
SimuladorHSWIM_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006348  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005b26c  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806178c  0806178c  00063178  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0806178c  0806178c  0006278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08061794  08061794  00063178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08061794  08061794  00062794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08061798  08061798  00062798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000178  20000000  0806179c  00063000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000178  08061914  00063178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08061914  00063670  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00063178  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001720e  00000000  00000000  000631a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eea  00000000  00000000  0007a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0007d2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  0007e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275de  00000000  00000000  0007f516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd4  00000000  00000000  000a6af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100b20  00000000  00000000  000bd7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be2e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  001be32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001c34d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000178 	.word	0x20000178
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006508 	.word	0x08006508

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000017c 	.word	0x2000017c
 8000214:	08006508 	.word	0x08006508

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <FWC_Start>:


ArrayDac_TypeDef *DACs_FWC = Vehicle1;
IWDG_HandleTypeDef hiwdg;

void FWC_Start(const ArrayDac_TypeDef *pD){
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMDAC; ++i) {
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e023      	b.n	800059a <FWC_Start+0x56>
		HAL_DAC_Start_DMA(pD[i].pDAC, pD[i].channel, pD[i].pDATA, TAMANHO_ARRAY, ALIGN12R);
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	4613      	mov	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	4413      	add	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	461a      	mov	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	6818      	ldr	r0, [r3, #0]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	461a      	mov	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	6859      	ldr	r1, [r3, #4]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	4613      	mov	r3, r2
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	461a      	mov	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	689a      	ldr	r2, [r3, #8]
 8000588:	2300      	movs	r3, #0
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	f640 6302 	movw	r3, #3586	@ 0xe02
 8000590:	f001 fc22 	bl	8001dd8 <HAL_DAC_Start_DMA>
	for (int i = 0; i < NUMDAC; ++i) {
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3301      	adds	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	2b05      	cmp	r3, #5
 800059e:	ddd8      	ble.n	8000552 <FWC_Start+0xe>
	}
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <SysInit>:

void SysInit(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	LOG_Msg("Simulador FWC-CPU 1A.\r\n", 23);
 80005b0:	2117      	movs	r1, #23
 80005b2:	4831      	ldr	r0, [pc, #196]	@ (8000678 <SysInit+0xcc>)
 80005b4:	f000 f8da 	bl	800076c <LOG_Msg>

	LOG_Msg("Reset: ",7);
 80005b8:	2107      	movs	r1, #7
 80005ba:	4830      	ldr	r0, [pc, #192]	@ (800067c <SysInit+0xd0>)
 80005bc:	f000 f8d6 	bl	800076c <LOG_Msg>
	__PRINT_RESET();
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <SysInit+0xd4>)
 80005c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	da04      	bge.n	80005d4 <SysInit+0x28>
 80005ca:	210c      	movs	r1, #12
 80005cc:	482d      	ldr	r0, [pc, #180]	@ (8000684 <SysInit+0xd8>)
 80005ce:	f000 f8cd 	bl	800076c <LOG_Msg>
 80005d2:	e027      	b.n	8000624 <SysInit+0x78>
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <SysInit+0xd4>)
 80005d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <SysInit+0x40>
 80005e2:	2117      	movs	r1, #23
 80005e4:	4828      	ldr	r0, [pc, #160]	@ (8000688 <SysInit+0xdc>)
 80005e6:	f000 f8c1 	bl	800076c <LOG_Msg>
 80005ea:	e01b      	b.n	8000624 <SysInit+0x78>
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SysInit+0xd4>)
 80005ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d004      	beq.n	8000604 <SysInit+0x58>
 80005fa:	210c      	movs	r1, #12
 80005fc:	4823      	ldr	r0, [pc, #140]	@ (800068c <SysInit+0xe0>)
 80005fe:	f000 f8b5 	bl	800076c <LOG_Msg>
 8000602:	e00f      	b.n	8000624 <SysInit+0x78>
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <SysInit+0xd4>)
 8000606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800060a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <SysInit+0x70>
 8000612:	210b      	movs	r1, #11
 8000614:	481e      	ldr	r0, [pc, #120]	@ (8000690 <SysInit+0xe4>)
 8000616:	f000 f8a9 	bl	800076c <LOG_Msg>
 800061a:	e003      	b.n	8000624 <SysInit+0x78>
 800061c:	210a      	movs	r1, #10
 800061e:	481d      	ldr	r0, [pc, #116]	@ (8000694 <SysInit+0xe8>)
 8000620:	f000 f8a4 	bl	800076c <LOG_Msg>

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <SysInit+0xd4>)
 8000626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800062a:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <SysInit+0xd4>)
 800062c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000630:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	HAL_TIM_Base_Start(&htim8);
 8000634:	4818      	ldr	r0, [pc, #96]	@ (8000698 <SysInit+0xec>)
 8000636:	f003 fc95 	bl	8003f64 <HAL_TIM_Base_Start>
	HAL_TIMEx_OnePulseN_Start(&htim8, TIM_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <SysInit+0xec>)
 800063e:	f004 fe5f 	bl	8005300 <HAL_TIMEx_OnePulseN_Start>
	LEDsInit();
 8000642:	f000 f86b 	bl	800071c <LEDsInit>

	HAL_TIM_Base_Start(&htim2);
 8000646:	4815      	ldr	r0, [pc, #84]	@ (800069c <SysInit+0xf0>)
 8000648:	f003 fc8c 	bl	8003f64 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 800064c:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <SysInit+0xf4>)
 800064e:	f003 fcf7 	bl	8004040 <HAL_TIM_Base_Start_IT>
	HAL_OPAMP_Start(&hopamp1);
 8000652:	4814      	ldr	r0, [pc, #80]	@ (80006a4 <SysInit+0xf8>)
 8000654:	f002 fbd4 	bl	8002e00 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8000658:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <SysInit+0xfc>)
 800065a:	f002 fbd1 	bl	8002e00 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp4);
 800065e:	4813      	ldr	r0, [pc, #76]	@ (80006ac <SysInit+0x100>)
 8000660:	f002 fbce 	bl	8002e00 <HAL_OPAMP_Start>
	tick_status = HAL_GetTick();
 8000664:	f001 fa5e 	bl	8001b24 <HAL_GetTick>
 8000668:	4603      	mov	r3, r0
 800066a:	4a11      	ldr	r2, [pc, #68]	@ (80006b0 <SysInit+0x104>)
 800066c:	6013      	str	r3, [r2, #0]
	WatchdogInit();
 800066e:	f000 f83b 	bl	80006e8 <WatchdogInit>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08006520 	.word	0x08006520
 800067c:	08006538 	.word	0x08006538
 8000680:	40021000 	.word	0x40021000
 8000684:	08006540 	.word	0x08006540
 8000688:	08006550 	.word	0x08006550
 800068c:	08006568 	.word	0x08006568
 8000690:	08006578 	.word	0x08006578
 8000694:	08006584 	.word	0x08006584
 8000698:	2000058c 	.word	0x2000058c
 800069c:	200004f4 	.word	0x200004f4
 80006a0:	20000540 	.word	0x20000540
 80006a4:	20000440 	.word	0x20000440
 80006a8:	2000047c 	.word	0x2000047c
 80006ac:	200004b8 	.word	0x200004b8
 80006b0:	2000019c 	.word	0x2000019c

080006b4 <LoopMain>:

void LoopMain(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - tick_status >= 1500) { // 1,5 segundos
 80006b8:	f001 fa34 	bl	8001b24 <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <LoopMain+0x30>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d906      	bls.n	80006da <LoopMain+0x26>
		tick_status = HAL_GetTick();
 80006cc:	f001 fa2a 	bl	8001b24 <HAL_GetTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <LoopMain+0x30>)
 80006d4:	6013      	str	r3, [r2, #0]
		PrintStatus();
 80006d6:	f000 f895 	bl	8000804 <PrintStatus>
	}
	WatchdogReset();
 80006da:	f000 f83d 	bl	8000758 <WatchdogReset>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000019c 	.word	0x2000019c

080006e8 <WatchdogInit>:

void WatchdogInit(void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <WatchdogInit+0x2c>)
 80006ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <WatchdogInit+0x30>)
 80006f0:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <WatchdogInit+0x2c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 999;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <WatchdogInit+0x2c>)
 80006fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006fe:	609a      	str	r2, [r3, #8]
	hiwdg.Init.Window = 0x0FFE;
 8000700:	4b04      	ldr	r3, [pc, #16]	@ (8000714 <WatchdogInit+0x2c>)
 8000702:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000706:	60da      	str	r2, [r3, #12]

	HAL_IWDG_Init(&hiwdg);
 8000708:	4802      	ldr	r0, [pc, #8]	@ (8000714 <WatchdogInit+0x2c>)
 800070a:	f000 fd43 	bl	8001194 <HAL_IWDG_Init>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200001a0 	.word	0x200001a0
 8000718:	40003000 	.word	0x40003000

0800071c <LEDsInit>:

void LEDsInit(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	e00c      	b.n	8000742 <LEDsInit+0x26>
		HAL_Delay(500);
 8000728:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800072c:	f001 fa04 	bl	8001b38 <HAL_Delay>
		__PWM_PULSE();
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <LEDsInit+0x38>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <LEDsInit+0x38>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; i++){
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3301      	adds	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b03      	cmp	r3, #3
 8000746:	ddef      	ble.n	8000728 <LEDsInit+0xc>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40013400 	.word	0x40013400

08000758 <WatchdogReset>:

void WatchdogReset(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 800075c:	4802      	ldr	r0, [pc, #8]	@ (8000768 <WatchdogReset+0x10>)
 800075e:	f000 fd68 	bl	8001232 <HAL_IWDG_Refresh>
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001a0 	.word	0x200001a0

0800076c <LOG_Msg>:

void LOG_Msg(char *pMsg, uint8_t size) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart5, (uint8_t *) pMsg, size, HAL_MAX_DELAY);
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	b29a      	uxth	r2, r3
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	4803      	ldr	r0, [pc, #12]	@ (8000790 <LOG_Msg+0x24>)
 8000784:	f004 ffeb 	bl	800575e <HAL_UART_Transmit>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200005d8 	.word	0x200005d8

08000794 <TIM3_Callback>:

void TIM3_Callback(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	flag_button = 0;
 8000798:	4b04      	ldr	r3, [pc, #16]	@ (80007ac <TIM3_Callback+0x18>)
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
	FWC_Start(DACs_FWC);
 800079e:	4b04      	ldr	r3, [pc, #16]	@ (80007b0 <TIM3_Callback+0x1c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fece 	bl	8000544 <FWC_Start>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000198 	.word	0x20000198
 80007b0:	20000168 	.word	0x20000168

080007b4 <EXTI_ButtonIRQHandler>:

void EXTI_ButtonIRQHandler(void){
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	if(!flag_button){
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <EXTI_ButtonIRQHandler+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d112      	bne.n	80007e6 <EXTI_ButtonIRQHandler+0x32>
		__PWM_PULSE();
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <EXTI_ButtonIRQHandler+0x44>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0c      	ldr	r2, [pc, #48]	@ (80007f8 <EXTI_ButtonIRQHandler+0x44>)
 80007c6:	f043 0301 	orr.w	r3, r3, #1
 80007ca:	6013      	str	r3, [r2, #0]
		id = (id + 1)%5;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <EXTI_ButtonIRQHandler+0x48>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	1c59      	adds	r1, r3, #1
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <EXTI_ButtonIRQHandler+0x4c>)
 80007d4:	fba3 2301 	umull	r2, r3, r3, r1
 80007d8:	089a      	lsrs	r2, r3, #2
 80007da:	4613      	mov	r3, r2
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	4413      	add	r3, r2
 80007e0:	1aca      	subs	r2, r1, r3
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <EXTI_ButtonIRQHandler+0x48>)
 80007e4:	601a      	str	r2, [r3, #0]
	}
	flag_button = 1;
 80007e6:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <EXTI_ButtonIRQHandler+0x40>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000198 	.word	0x20000198
 80007f8:	40013400 	.word	0x40013400
 80007fc:	20000194 	.word	0x20000194
 8000800:	cccccccd 	.word	0xcccccccd

08000804 <PrintStatus>:

void PrintStatus(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	switch(id){
 8000808:	4b3b      	ldr	r3, [pc, #236]	@ (80008f8 <PrintStatus+0xf4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d871      	bhi.n	80008f4 <PrintStatus+0xf0>
 8000810:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <PrintStatus+0x14>)
 8000812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000816:	bf00      	nop
 8000818:	0800082d 	.word	0x0800082d
 800081c:	08000855 	.word	0x08000855
 8000820:	0800087d 	.word	0x0800087d
 8000824:	080008a5 	.word	0x080008a5
 8000828:	080008cd 	.word	0x080008cd
		case 0:
			DACs_FWC = Vehicle1;
 800082c:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <PrintStatus+0xf8>)
 800082e:	4a34      	ldr	r2, [pc, #208]	@ (8000900 <PrintStatus+0xfc>)
 8000830:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 8000832:	2120      	movs	r1, #32
 8000834:	4833      	ldr	r0, [pc, #204]	@ (8000904 <PrintStatus+0x100>)
 8000836:	f7ff ff99 	bl	800076c <LOG_Msg>
			LOG_Msg("1' Vehicle: 3c\r\n",16);
 800083a:	2110      	movs	r1, #16
 800083c:	4832      	ldr	r0, [pc, #200]	@ (8000908 <PrintStatus+0x104>)
 800083e:	f7ff ff95 	bl	800076c <LOG_Msg>
			LOG_Msg("PBT: 15000 kg\r\n",15);
 8000842:	210f      	movs	r1, #15
 8000844:	4831      	ldr	r0, [pc, #196]	@ (800090c <PrintStatus+0x108>)
 8000846:	f7ff ff91 	bl	800076c <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 800084a:	2110      	movs	r1, #16
 800084c:	4830      	ldr	r0, [pc, #192]	@ (8000910 <PrintStatus+0x10c>)
 800084e:	f7ff ff8d 	bl	800076c <LOG_Msg>
			break;
 8000852:	e04f      	b.n	80008f4 <PrintStatus+0xf0>
		case 1:
			DACs_FWC = Vehicle2;
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <PrintStatus+0xf8>)
 8000856:	4a2f      	ldr	r2, [pc, #188]	@ (8000914 <PrintStatus+0x110>)
 8000858:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 800085a:	2120      	movs	r1, #32
 800085c:	4829      	ldr	r0, [pc, #164]	@ (8000904 <PrintStatus+0x100>)
 800085e:	f7ff ff85 	bl	800076c <LOG_Msg>
			LOG_Msg("2' Vehicle: 3c\r\n",16);
 8000862:	2110      	movs	r1, #16
 8000864:	482c      	ldr	r0, [pc, #176]	@ (8000918 <PrintStatus+0x114>)
 8000866:	f7ff ff81 	bl	800076c <LOG_Msg>
			LOG_Msg("PBT: 25000 kg\r\n",15);
 800086a:	210f      	movs	r1, #15
 800086c:	482b      	ldr	r0, [pc, #172]	@ (800091c <PrintStatus+0x118>)
 800086e:	f7ff ff7d 	bl	800076c <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 8000872:	2110      	movs	r1, #16
 8000874:	4826      	ldr	r0, [pc, #152]	@ (8000910 <PrintStatus+0x10c>)
 8000876:	f7ff ff79 	bl	800076c <LOG_Msg>
			break;
 800087a:	e03b      	b.n	80008f4 <PrintStatus+0xf0>
		case 2:
			DACs_FWC = Vehicle3;
 800087c:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <PrintStatus+0xf8>)
 800087e:	4a28      	ldr	r2, [pc, #160]	@ (8000920 <PrintStatus+0x11c>)
 8000880:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 8000882:	2120      	movs	r1, #32
 8000884:	481f      	ldr	r0, [pc, #124]	@ (8000904 <PrintStatus+0x100>)
 8000886:	f7ff ff71 	bl	800076c <LOG_Msg>
			LOG_Msg("3' Vehicle: 3c\r\n",16);
 800088a:	2110      	movs	r1, #16
 800088c:	4825      	ldr	r0, [pc, #148]	@ (8000924 <PrintStatus+0x120>)
 800088e:	f7ff ff6d 	bl	800076c <LOG_Msg>
			LOG_Msg("PBT: 30000 kg\r\n",15);
 8000892:	210f      	movs	r1, #15
 8000894:	4824      	ldr	r0, [pc, #144]	@ (8000928 <PrintStatus+0x124>)
 8000896:	f7ff ff69 	bl	800076c <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 800089a:	2110      	movs	r1, #16
 800089c:	481c      	ldr	r0, [pc, #112]	@ (8000910 <PrintStatus+0x10c>)
 800089e:	f7ff ff65 	bl	800076c <LOG_Msg>
			break;
 80008a2:	e027      	b.n	80008f4 <PrintStatus+0xf0>
		case 3:
			DACs_FWC = Vehicle4;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <PrintStatus+0xf8>)
 80008a6:	4a21      	ldr	r2, [pc, #132]	@ (800092c <PrintStatus+0x128>)
 80008a8:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 80008aa:	2120      	movs	r1, #32
 80008ac:	4815      	ldr	r0, [pc, #84]	@ (8000904 <PrintStatus+0x100>)
 80008ae:	f7ff ff5d 	bl	800076c <LOG_Msg>
			LOG_Msg("4' Vehicle: 3c\r\n",16);
 80008b2:	2110      	movs	r1, #16
 80008b4:	481e      	ldr	r0, [pc, #120]	@ (8000930 <PrintStatus+0x12c>)
 80008b6:	f7ff ff59 	bl	800076c <LOG_Msg>
			LOG_Msg("PBT: 35000 kg\r\n",15);
 80008ba:	210f      	movs	r1, #15
 80008bc:	481d      	ldr	r0, [pc, #116]	@ (8000934 <PrintStatus+0x130>)
 80008be:	f7ff ff55 	bl	800076c <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n", 16);
 80008c2:	2110      	movs	r1, #16
 80008c4:	4812      	ldr	r0, [pc, #72]	@ (8000910 <PrintStatus+0x10c>)
 80008c6:	f7ff ff51 	bl	800076c <LOG_Msg>
			break;
 80008ca:	e013      	b.n	80008f4 <PrintStatus+0xf0>
		case 4:
			DACs_FWC = Vehicle5;
 80008cc:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <PrintStatus+0xf8>)
 80008ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000938 <PrintStatus+0x134>)
 80008d0:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n", 32);
 80008d2:	2120      	movs	r1, #32
 80008d4:	480b      	ldr	r0, [pc, #44]	@ (8000904 <PrintStatus+0x100>)
 80008d6:	f7ff ff49 	bl	800076c <LOG_Msg>
			LOG_Msg("5' Vehicle: 3c\r\n", 16);
 80008da:	2110      	movs	r1, #16
 80008dc:	4817      	ldr	r0, [pc, #92]	@ (800093c <PrintStatus+0x138>)
 80008de:	f7ff ff45 	bl	800076c <LOG_Msg>
			LOG_Msg("PBT: 45000 kg\r\n",15);
 80008e2:	210f      	movs	r1, #15
 80008e4:	4816      	ldr	r0, [pc, #88]	@ (8000940 <PrintStatus+0x13c>)
 80008e6:	f7ff ff41 	bl	800076c <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 80008ea:	2110      	movs	r1, #16
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <PrintStatus+0x10c>)
 80008ee:	f7ff ff3d 	bl	800076c <LOG_Msg>
			break;
 80008f2:	bf00      	nop
	}
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000194 	.word	0x20000194
 80008fc:	20000168 	.word	0x20000168
 8000900:	20000000 	.word	0x20000000
 8000904:	08006590 	.word	0x08006590
 8000908:	080065b4 	.word	0x080065b4
 800090c:	080065c8 	.word	0x080065c8
 8000910:	080065d8 	.word	0x080065d8
 8000914:	20000048 	.word	0x20000048
 8000918:	080065ec 	.word	0x080065ec
 800091c:	08006600 	.word	0x08006600
 8000920:	20000090 	.word	0x20000090
 8000924:	08006610 	.word	0x08006610
 8000928:	08006624 	.word	0x08006624
 800092c:	200000d8 	.word	0x200000d8
 8000930:	08006634 	.word	0x08006634
 8000934:	08006648 	.word	0x08006648
 8000938:	20000120 	.word	0x20000120
 800093c:	08006658 	.word	0x08006658
 8000940:	0800666c 	.word	0x0800666c

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f001 f880 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f81f 	bl	800098e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f000 fbb4 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000954:	f000 fb60 	bl	8001018 <MX_DMA_Init>
  MX_DAC1_Init();
 8000958:	f000 f864 	bl	8000a24 <MX_DAC1_Init>
  MX_DAC2_Init();
 800095c:	f000 f8a6 	bl	8000aac <MX_DAC2_Init>
  MX_DAC3_Init();
 8000960:	f000 f8de 	bl	8000b20 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 8000964:	f000 f95a 	bl	8000c1c <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000968:	f000 f97e 	bl	8000c68 <MX_OPAMP3_Init>
  MX_TIM2_Init();
 800096c:	f000 f9c8 	bl	8000d00 <MX_TIM2_Init>
  MX_DAC4_Init();
 8000970:	f000 f91a 	bl	8000ba8 <MX_DAC4_Init>
  MX_OPAMP4_Init();
 8000974:	f000 f99e 	bl	8000cb4 <MX_OPAMP4_Init>
  MX_TIM3_Init();
 8000978:	f000 fa0e 	bl	8000d98 <MX_TIM3_Init>
  MX_UART5_Init();
 800097c:	f000 fb00 	bl	8000f80 <MX_UART5_Init>
  MX_TIM8_Init();
 8000980:	f000 fa5a 	bl	8000e38 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  SysInit();
 8000984:	f7ff fe12 	bl	80005ac <SysInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LoopMain();
 8000988:	f7ff fe94 	bl	80006b4 <LoopMain>
 800098c:	e7fc      	b.n	8000988 <main+0x44>

0800098e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b094      	sub	sp, #80	@ 0x50
 8000992:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000994:	f107 0318 	add.w	r3, r7, #24
 8000998:	2238      	movs	r2, #56	@ 0x38
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f005 fd87 	bl	80064b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009b4:	f002 fa54 	bl	8002e60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	2303      	movs	r3, #3
 80009c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 80009ce:	2320      	movs	r3, #32
 80009d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 faee 	bl	8002fc4 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80009ee:	f000 fbcb 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2303      	movs	r3, #3
 80009f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80009fa:	2390      	movs	r3, #144	@ 0x90
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fe:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000a02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 fdeb 	bl	80035e8 <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a18:	f000 fbb6 	bl	8001188 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	@ 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2230      	movs	r2, #48	@ 0x30
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f005 fd3d 	bl	80064b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_DAC1_Init+0x80>)
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <MX_DAC1_Init+0x84>)
 8000a3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a3c:	4819      	ldr	r0, [pc, #100]	@ (8000aa4 <MX_DAC1_Init+0x80>)
 8000a3e:	f001 f9a8 	bl	8001d92 <HAL_DAC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a48:	f000 fb9e 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <MX_DAC1_Init+0x80>)
 8000a78:	f001 fa9e 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a82:	f000 fb81 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2210      	movs	r2, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_DAC1_Init+0x80>)
 8000a8e:	f001 fa93 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000a98:	f000 fb76 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3730      	adds	r7, #48	@ 0x30
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001b0 	.word	0x200001b0
 8000aa8:	50000800 	.word	0x50000800

08000aac <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	@ 0x30
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2230      	movs	r2, #48	@ 0x30
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 fcf9 	bl	80064b0 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <MX_DAC2_Init+0x6c>)
 8000ac0:	4a16      	ldr	r2, [pc, #88]	@ (8000b1c <MX_DAC2_Init+0x70>)
 8000ac2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000ac4:	4814      	ldr	r0, [pc, #80]	@ (8000b18 <MX_DAC2_Init+0x6c>)
 8000ac6:	f001 f964 	bl	8001d92 <HAL_DAC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000ad0:	f000 fb5a 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <MX_DAC2_Init+0x6c>)
 8000b00:	f001 fa5a 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000b0a:	f000 fb3d 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200001c4 	.word	0x200001c4
 8000b1c:	50000c00 	.word	0x50000c00

08000b20 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b26:	463b      	mov	r3, r7
 8000b28:	2230      	movs	r2, #48	@ 0x30
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 fcbf 	bl	80064b0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba0 <MX_DAC3_Init+0x80>)
 8000b34:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba4 <MX_DAC3_Init+0x84>)
 8000b36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000b38:	4819      	ldr	r0, [pc, #100]	@ (8000ba0 <MX_DAC3_Init+0x80>)
 8000b3a:	f001 f92a 	bl	8001d92 <HAL_DAC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000b44:	f000 fb20 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b60:	2302      	movs	r3, #2
 8000b62:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <MX_DAC3_Init+0x80>)
 8000b74:	f001 fa20 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000b7e:	f000 fb03 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b82:	463b      	mov	r3, r7
 8000b84:	2210      	movs	r2, #16
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_DAC3_Init+0x80>)
 8000b8a:	f001 fa15 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000b94:	f000 faf8 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200001d8 	.word	0x200001d8
 8000ba4:	50001000 	.word	0x50001000

08000ba8 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08c      	sub	sp, #48	@ 0x30
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2230      	movs	r2, #48	@ 0x30
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f005 fc7b 	bl	80064b0 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000bba:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_DAC4_Init+0x6c>)
 8000bbc:	4a16      	ldr	r2, [pc, #88]	@ (8000c18 <MX_DAC4_Init+0x70>)
 8000bbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000bc0:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <MX_DAC4_Init+0x6c>)
 8000bc2:	f001 f8e6 	bl	8001d92 <HAL_DAC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000bcc:	f000 fadc 	bl	8001188 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000be0:	2312      	movs	r3, #18
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <MX_DAC4_Init+0x6c>)
 8000bfc:	f001 f9dc 	bl	8001fb8 <HAL_DAC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000c06:	f000 fabf 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	3730      	adds	r7, #48	@ 0x30
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200001ec 	.word	0x200001ec
 8000c18:	50001400 	.word	0x50001400

08000c1c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <MX_OPAMP1_Init+0x48>)
 8000c24:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c28:	2280      	movs	r2, #128	@ 0x80
 8000c2a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c2e:	2260      	movs	r2, #96	@ 0x60
 8000c30:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c34:	220c      	movs	r2, #12
 8000c36:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_OPAMP1_Init+0x44>)
 8000c4c:	f002 f808 	bl	8002c60 <HAL_OPAMP_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000c56:	f000 fa97 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000440 	.word	0x20000440
 8000c64:	40010300 	.word	0x40010300

08000c68 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c6e:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <MX_OPAMP3_Init+0x48>)
 8000c70:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c74:	2280      	movs	r2, #128	@ 0x80
 8000c76:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c7a:	2260      	movs	r2, #96	@ 0x60
 8000c7c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c80:	220c      	movs	r2, #12
 8000c82:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_OPAMP3_Init+0x44>)
 8000c98:	f001 ffe2 	bl	8002c60 <HAL_OPAMP_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000ca2:	f000 fa71 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000047c 	.word	0x2000047c
 8000cb0:	40010308 	.word	0x40010308

08000cb4 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cba:	4a10      	ldr	r2, [pc, #64]	@ (8000cfc <MX_OPAMP4_Init+0x48>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cc6:	2260      	movs	r2, #96	@ 0x60
 8000cc8:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000ccc:	220c      	movs	r2, #12
 8000cce:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_OPAMP4_Init+0x44>)
 8000ce4:	f001 ffbc 	bl	8002c60 <HAL_OPAMP_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000cee:	f000 fa4b 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200004b8 	.word	0x200004b8
 8000cfc:	4001030c 	.word	0x4001030c

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d28:	221f      	movs	r2, #31
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 51;
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d34:	2233      	movs	r2, #51	@ 0x33
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d46:	f003 f8b5 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 fa1a 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d62:	f003 fcf7 	bl	8004754 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 fa0c 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d70:	2320      	movs	r3, #32
 8000d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_TIM2_Init+0x94>)
 8000d7e:	f004 fb15 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f9fe 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3720      	adds	r7, #32
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200004f4 	.word	0x200004f4

08000d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000db8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e34 <MX_TIM3_Init+0x9c>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dbe:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000dc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dcc:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dde:	4814      	ldr	r0, [pc, #80]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000de0:	f003 f868 	bl	8003eb4 <HAL_TIM_Base_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dea:	f000 f9cd 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000dfc:	f003 fcaa 	bl	8004754 <HAL_TIM_ConfigClockSource>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000e06:	f000 f9bf 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <MX_TIM3_Init+0x98>)
 8000e18:	f004 fac8 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000e22:	f000 f9b1 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000540 	.word	0x20000540
 8000e34:	40000400 	.word	0x40000400

08000e38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b098      	sub	sp, #96	@ 0x60
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	615a      	str	r2, [r3, #20]
 8000e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2234      	movs	r2, #52	@ 0x34
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fb23 	bl	80064b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e6c:	4a43      	ldr	r2, [pc, #268]	@ (8000f7c <MX_TIM8_Init+0x144>)
 8000e6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16000;
 8000e70:	4b41      	ldr	r3, [pc, #260]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e72:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000e76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e80:	2264      	movs	r2, #100	@ 0x64
 8000e82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e84:	4b3c      	ldr	r3, [pc, #240]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b39      	ldr	r3, [pc, #228]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e96:	4838      	ldr	r0, [pc, #224]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000e98:	f003 f948 	bl	800412c <HAL_TIM_PWM_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 f971 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ea6:	2108      	movs	r1, #8
 8000ea8:	4833      	ldr	r0, [pc, #204]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000eaa:	f003 f996 	bl	80041da <HAL_TIM_OnePulse_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8000eb4:	f000 f968 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ec8:	4619      	mov	r1, r3
 8000eca:	482b      	ldr	r0, [pc, #172]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000ecc:	f004 fa6e 	bl	80053ac <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000ed6:	f000 f957 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eda:	2360      	movs	r3, #96	@ 0x60
 8000edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 50;
 8000ede:	2332      	movs	r3, #50	@ 0x32
 8000ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	481e      	ldr	r0, [pc, #120]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000f00:	f003 fb14 	bl	800452c <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000f0a:	f000 f93d 	bl	8001188 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	699a      	ldr	r2, [r3, #24]
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0208 	bic.w	r2, r2, #8
 8000f1c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000f5a:	f004 fabb 	bl	80054d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8000f64:	f000 f910 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <MX_TIM8_Init+0x140>)
 8000f6a:	f000 fc11 	bl	8001790 <HAL_TIM_MspPostInit>

}
 8000f6e:	bf00      	nop
 8000f70:	3760      	adds	r7, #96	@ 0x60
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000058c 	.word	0x2000058c
 8000f7c:	40013400 	.word	0x40013400

08000f80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f84:	4b22      	ldr	r3, [pc, #136]	@ (8001010 <MX_UART5_Init+0x90>)
 8000f86:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <MX_UART5_Init+0x94>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <MX_UART5_Init+0x90>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b1f      	ldr	r3, [pc, #124]	@ (8001010 <MX_UART5_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <MX_UART5_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fbc:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fca:	f004 fb78 	bl	80056be <HAL_UART_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000fd4:	f000 f8d8 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	480d      	ldr	r0, [pc, #52]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fdc:	f005 f99f 	bl	800631e <HAL_UARTEx_SetTxFifoThreshold>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000fe6:	f000 f8cf 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4808      	ldr	r0, [pc, #32]	@ (8001010 <MX_UART5_Init+0x90>)
 8000fee:	f005 f9d4 	bl	800639a <HAL_UARTEx_SetRxFifoThreshold>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000ff8:	f000 f8c6 	bl	8001188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_UART5_Init+0x90>)
 8000ffe:	f005 f956 	bl	80062ae <HAL_UARTEx_DisableFifoMode>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001008:	f000 f8be 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200005d8 	.word	0x200005d8
 8001014:	40005000 	.word	0x40005000

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800101e:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <MX_DMA_Init+0xa0>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	4a25      	ldr	r2, [pc, #148]	@ (80010b8 <MX_DMA_Init+0xa0>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6493      	str	r3, [r2, #72]	@ 0x48
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <MX_DMA_Init+0xa0>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001036:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <MX_DMA_Init+0xa0>)
 8001038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103a:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <MX_DMA_Init+0xa0>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6493      	str	r3, [r2, #72]	@ 0x48
 8001042:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <MX_DMA_Init+0xa0>)
 8001044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200b      	movs	r0, #11
 8001054:	f000 fe69 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001058:	200b      	movs	r0, #11
 800105a:	f000 fe80 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200c      	movs	r0, #12
 8001064:	f000 fe61 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001068:	200c      	movs	r0, #12
 800106a:	f000 fe78 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200d      	movs	r0, #13
 8001074:	f000 fe59 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001078:	200d      	movs	r0, #13
 800107a:	f000 fe70 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	200e      	movs	r0, #14
 8001084:	f000 fe51 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f000 fe68 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	200f      	movs	r0, #15
 8001094:	f000 fe49 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001098:	200f      	movs	r0, #15
 800109a:	f000 fe60 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2010      	movs	r0, #16
 80010a4:	f000 fe41 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80010a8:	2010      	movs	r0, #16
 80010aa:	f000 fe58 	bl	8001d5e <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010d8:	f043 0320 	orr.w	r3, r3, #32
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a24      	ldr	r2, [pc, #144]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b22      	ldr	r3, [pc, #136]	@ (8001180 <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b1f      	ldr	r3, [pc, #124]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a1e      	ldr	r2, [pc, #120]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b19      	ldr	r3, [pc, #100]	@ (8001180 <MX_GPIO_Init+0xc4>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a18      	ldr	r2, [pc, #96]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <MX_GPIO_Init+0xc4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : EXTI_Button_Pin */
  GPIO_InitStruct.Pin = EXTI_Button_Pin;
 800114a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001150:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI_Button_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <MX_GPIO_Init+0xc8>)
 8001162:	f001 fbd9 	bl	8002918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2028      	movs	r0, #40	@ 0x28
 800116c:	f000 fddd 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001170:	2028      	movs	r0, #40	@ 0x28
 8001172:	f000 fdf4 	bl	8001d5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000
 8001184:	48000800 	.word	0x48000800

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <Error_Handler+0x8>

08001194 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e041      	b.n	800122a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80011ae:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f245 5255 	movw	r2, #21845	@ 0x5555
 80011b8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6852      	ldr	r2, [r2, #4]
 80011c2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6892      	ldr	r2, [r2, #8]
 80011cc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80011ce:	f000 fca9 	bl	8001b24 <HAL_GetTick>
 80011d2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011d4:	e00f      	b.n	80011f6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80011d6:	f000 fca5 	bl	8001b24 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b31      	cmp	r3, #49	@ 0x31
 80011e2:	d908      	bls.n	80011f6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e019      	b.n	800122a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e8      	bne.n	80011d6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	429a      	cmp	r2, r3
 8001210:	d005      	beq.n	800121e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68d2      	ldr	r2, [r2, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	e004      	b.n	8001228 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001242:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	4a0e      	ldr	r2, [pc, #56]	@ (8001294 <HAL_MspInit+0x44>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	6613      	str	r3, [r2, #96]	@ 0x60
 8001262:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <HAL_MspInit+0x44>)
 8001264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_MspInit+0x44>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001278:	6593      	str	r3, [r2, #88]	@ 0x58
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_MspInit+0x44>)
 800127c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001286:	f001 fe8f 	bl	8002fa8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40021000 	.word	0x40021000

08001298 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08e      	sub	sp, #56	@ 0x38
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001460 <HAL_DAC_MspInit+0x1c8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d17b      	bne.n	80013b2 <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a69      	ldr	r2, [pc, #420]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b67      	ldr	r3, [pc, #412]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b64      	ldr	r3, [pc, #400]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a63      	ldr	r2, [pc, #396]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ea:	2330      	movs	r3, #48	@ 0x30
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f001 fb0a 	bl	8002918 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8001304:	4b58      	ldr	r3, [pc, #352]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001306:	4a59      	ldr	r2, [pc, #356]	@ (800146c <HAL_DAC_MspInit+0x1d4>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800130a:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 800130c:	2206      	movs	r2, #6
 800130e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001310:	4b55      	ldr	r3, [pc, #340]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001312:	2210      	movs	r2, #16
 8001314:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b54      	ldr	r3, [pc, #336]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b52      	ldr	r3, [pc, #328]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001322:	4b51      	ldr	r3, [pc, #324]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800132a:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 800132c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001330:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001332:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b4b      	ldr	r3, [pc, #300]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800133e:	484a      	ldr	r0, [pc, #296]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001340:	f001 f87a 	bl	8002438 <HAL_DMA_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800134a:	f7ff ff1d 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a45      	ldr	r2, [pc, #276]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	4a44      	ldr	r2, [pc, #272]	@ (8001468 <HAL_DAC_MspInit+0x1d0>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800135a:	4b45      	ldr	r3, [pc, #276]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 800135c:	4a45      	ldr	r2, [pc, #276]	@ (8001474 <HAL_DAC_MspInit+0x1dc>)
 800135e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8001360:	4b43      	ldr	r3, [pc, #268]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001362:	2207      	movs	r2, #7
 8001364:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001366:	4b42      	ldr	r3, [pc, #264]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001368:	2210      	movs	r2, #16
 800136a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800136c:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001372:	4b3f      	ldr	r3, [pc, #252]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001374:	2280      	movs	r2, #128	@ 0x80
 8001376:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001378:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 800137a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001386:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8001388:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800138e:	4b38      	ldr	r3, [pc, #224]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001394:	4836      	ldr	r0, [pc, #216]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 8001396:	f001 f84f 	bl	8002438 <HAL_DMA_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 80013a0:	f7ff fef2 	bl	8001188 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a32      	ldr	r2, [pc, #200]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	4a31      	ldr	r2, [pc, #196]	@ (8001470 <HAL_DAC_MspInit+0x1d8>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 80013b0:	e10c      	b.n	80015cc <HAL_DAC_MspInit+0x334>
  else if(hdac->Instance==DAC2)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a30      	ldr	r2, [pc, #192]	@ (8001478 <HAL_DAC_MspInit+0x1e0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d163      	bne.n	8001484 <HAL_DAC_MspInit+0x1ec>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80013bc:	4b29      	ldr	r3, [pc, #164]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a28      	ldr	r2, [pc, #160]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	4a22      	ldr	r2, [pc, #136]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_DAC_MspInit+0x1cc>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ec:	2340      	movs	r3, #64	@ 0x40
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	2303      	movs	r3, #3
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001402:	f001 fa89 	bl	8002918 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <HAL_DAC_MspInit+0x1e8>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800140c:	4b1b      	ldr	r3, [pc, #108]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 800140e:	2229      	movs	r2, #41	@ 0x29
 8001410:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001412:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001414:	2210      	movs	r2, #16
 8001416:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001418:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800141e:	4b17      	ldr	r3, [pc, #92]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001420:	2280      	movs	r2, #128	@ 0x80
 8001422:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001424:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800142a:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800142c:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 800142e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001432:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_NORMAL;
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800143a:	4b10      	ldr	r3, [pc, #64]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001440:	480e      	ldr	r0, [pc, #56]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001442:	f000 fff9 	bl	8002438 <HAL_DMA_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_DAC_MspInit+0x1b8>
      Error_Handler();
 800144c:	f7ff fe9c 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	4a09      	ldr	r2, [pc, #36]	@ (800147c <HAL_DAC_MspInit+0x1e4>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800145c:	e0b6      	b.n	80015cc <HAL_DAC_MspInit+0x334>
 800145e:	bf00      	nop
 8001460:	50000800 	.word	0x50000800
 8001464:	40021000 	.word	0x40021000
 8001468:	20000200 	.word	0x20000200
 800146c:	40020008 	.word	0x40020008
 8001470:	20000260 	.word	0x20000260
 8001474:	4002001c 	.word	0x4002001c
 8001478:	50000c00 	.word	0x50000c00
 800147c:	200002c0 	.word	0x200002c0
 8001480:	40020030 	.word	0x40020030
  else if(hdac->Instance==DAC3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_DAC_MspInit+0x33c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d162      	bne.n	8001554 <HAL_DAC_MspInit+0x2bc>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800148e:	4b52      	ldr	r3, [pc, #328]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001492:	4a51      	ldr	r2, [pc, #324]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 8001494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149a:	4b4f      	ldr	r3, [pc, #316]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800149e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    hdma_dac3_ch1.Instance = DMA1_Channel4;
 80014a6:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014a8:	4a4d      	ldr	r2, [pc, #308]	@ (80015e0 <HAL_DAC_MspInit+0x348>)
 80014aa:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 80014ac:	4b4b      	ldr	r3, [pc, #300]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014ae:	2266      	movs	r2, #102	@ 0x66
 80014b0:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014b4:	2210      	movs	r2, #16
 80014b6:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b48      	ldr	r3, [pc, #288]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014cc:	4b43      	ldr	r3, [pc, #268]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d2:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_NORMAL;
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014da:	4b40      	ldr	r3, [pc, #256]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80014e0:	483e      	ldr	r0, [pc, #248]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014e2:	f000 ffa9 	bl	8002438 <HAL_DMA_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_DAC_MspInit+0x258>
      Error_Handler();
 80014ec:	f7ff fe4c 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3a      	ldr	r2, [pc, #232]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	4a39      	ldr	r2, [pc, #228]	@ (80015dc <HAL_DAC_MspInit+0x344>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_dac3_ch2.Instance = DMA1_Channel5;
 80014fc:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 80014fe:	4a3a      	ldr	r2, [pc, #232]	@ (80015e8 <HAL_DAC_MspInit+0x350>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 8001502:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001504:	2267      	movs	r2, #103	@ 0x67
 8001506:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001508:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 800150a:	2210      	movs	r2, #16
 800150c:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b35      	ldr	r3, [pc, #212]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b33      	ldr	r3, [pc, #204]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001516:	2280      	movs	r2, #128	@ 0x80
 8001518:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151a:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 800151c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001520:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001522:	4b30      	ldr	r3, [pc, #192]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001528:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch2.Init.Mode = DMA_NORMAL;
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001530:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8001536:	482b      	ldr	r0, [pc, #172]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 8001538:	f000 ff7e 	bl	8002438 <HAL_DMA_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_DAC_MspInit+0x2ae>
      Error_Handler();
 8001542:	f7ff fe21 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a26      	ldr	r2, [pc, #152]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	4a25      	ldr	r2, [pc, #148]	@ (80015e4 <HAL_DAC_MspInit+0x34c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001552:	e03b      	b.n	80015cc <HAL_DAC_MspInit+0x334>
  else if(hdac->Instance==DAC4)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a24      	ldr	r2, [pc, #144]	@ (80015ec <HAL_DAC_MspInit+0x354>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d136      	bne.n	80015cc <HAL_DAC_MspInit+0x334>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 8001564:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_DAC_MspInit+0x340>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    hdma_dac4_ch1.Instance = DMA1_Channel6;
 8001576:	4b1e      	ldr	r3, [pc, #120]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 8001578:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <HAL_DAC_MspInit+0x35c>)
 800157a:	601a      	str	r2, [r3, #0]
    hdma_dac4_ch1.Init.Request = DMA_REQUEST_DAC4_CHANNEL1;
 800157c:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 800157e:	2268      	movs	r2, #104	@ 0x68
 8001580:	605a      	str	r2, [r3, #4]
    hdma_dac4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 8001584:	2210      	movs	r2, #16
 8001586:	609a      	str	r2, [r3, #8]
    hdma_dac4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
    hdma_dac4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800158e:	4b18      	ldr	r3, [pc, #96]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	611a      	str	r2, [r3, #16]
    hdma_dac4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 8001596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800159a:	615a      	str	r2, [r3, #20]
    hdma_dac4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159c:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 800159e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015a2:	619a      	str	r2, [r3, #24]
    hdma_dac4_ch1.Init.Mode = DMA_NORMAL;
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
    hdma_dac4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac4_ch1) != HAL_OK)
 80015b0:	480f      	ldr	r0, [pc, #60]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 80015b2:	f000 ff41 	bl	8002438 <HAL_DMA_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_DAC_MspInit+0x328>
      Error_Handler();
 80015bc:	f7ff fde4 	bl	8001188 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac4_ch1);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0b      	ldr	r2, [pc, #44]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	4a0a      	ldr	r2, [pc, #40]	@ (80015f0 <HAL_DAC_MspInit+0x358>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	@ 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	50001000 	.word	0x50001000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	20000320 	.word	0x20000320
 80015e0:	40020044 	.word	0x40020044
 80015e4:	20000380 	.word	0x20000380
 80015e8:	40020058 	.word	0x40020058
 80015ec:	50001400 	.word	0x50001400
 80015f0:	200003e0 	.word	0x200003e0
 80015f4:	4002006c 	.word	0x4002006c

080015f8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a2e      	ldr	r2, [pc, #184]	@ (80016d0 <HAL_OPAMP_MspInit+0xd8>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d119      	bne.n	800164e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4a2d      	ldr	r2, [pc, #180]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001632:	2304      	movs	r3, #4
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001636:	2303      	movs	r3, #3
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001648:	f001 f966 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 800164c:	e03b      	b.n	80016c6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a21      	ldr	r2, [pc, #132]	@ (80016d8 <HAL_OPAMP_MspInit+0xe0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d118      	bne.n	800168a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165c:	4a1d      	ldr	r2, [pc, #116]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001670:	2302      	movs	r3, #2
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001674:	2303      	movs	r3, #3
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4816      	ldr	r0, [pc, #88]	@ (80016dc <HAL_OPAMP_MspInit+0xe4>)
 8001684:	f001 f948 	bl	8002918 <HAL_GPIO_Init>
}
 8001688:	e01d      	b.n	80016c6 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP4)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a14      	ldr	r2, [pc, #80]	@ (80016e0 <HAL_OPAMP_MspInit+0xe8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d118      	bne.n	80016c6 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 800169a:	f043 0302 	orr.w	r3, r3, #2
 800169e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <HAL_OPAMP_MspInit+0xdc>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016b2:	2303      	movs	r3, #3
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	f107 0314 	add.w	r3, r7, #20
 80016be:	4619      	mov	r1, r3
 80016c0:	4806      	ldr	r0, [pc, #24]	@ (80016dc <HAL_OPAMP_MspInit+0xe4>)
 80016c2:	f001 f929 	bl	8002918 <HAL_GPIO_Init>
}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	@ 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40010300 	.word	0x40010300
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010308 	.word	0x40010308
 80016dc:	48000400 	.word	0x48000400
 80016e0:	4001030c 	.word	0x4001030c

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d10c      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a14      	ldr	r2, [pc, #80]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800170e:	e018      	b.n	8001742 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0e      	ldr	r2, [pc, #56]	@ (8001750 <HAL_TIM_Base_MspInit+0x6c>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d113      	bne.n	8001742 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6593      	str	r3, [r2, #88]	@ 0x58
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <HAL_TIM_Base_MspInit+0x68>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	201d      	movs	r0, #29
 8001738:	f000 faf7 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800173c:	201d      	movs	r0, #29
 800173e:	f000 fb0e 	bl	8001d5e <HAL_NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	40000400 	.word	0x40000400

08001754 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <HAL_TIM_PWM_MspInit+0x34>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d10b      	bne.n	800177e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_TIM_PWM_MspInit+0x38>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_TIM_PWM_MspInit+0x38>)
 800176c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001770:	6613      	str	r3, [r2, #96]	@ 0x60
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_TIM_PWM_MspInit+0x38>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800177e:	bf00      	nop
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40013400 	.word	0x40013400
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a11      	ldr	r2, [pc, #68]	@ (80017f4 <HAL_TIM_MspPostInit+0x64>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d11c      	bne.n	80017ec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_TIM_MspPostInit+0x68>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	4a10      	ldr	r2, [pc, #64]	@ (80017f8 <HAL_TIM_MspPostInit+0x68>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_TIM_MspPostInit+0x68>)
 80017c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC10     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = LED_Control_Pin;
 80017ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80017dc:	2304      	movs	r3, #4
 80017de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_Control_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017e8:	f001 f896 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40013400 	.word	0x40013400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	48000800 	.word	0x48000800

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0a0      	sub	sp, #128	@ 0x80
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	2254      	movs	r2, #84	@ 0x54
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fe45 	bl	80064b0 <memset>
  if(huart->Instance==UART5)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <HAL_UART_MspInit+0xe0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d152      	bne.n	80018d6 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001830:	2310      	movs	r3, #16
 8001832:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f8eb 	bl	8003a18 <HAL_RCCEx_PeriphCLKConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001848:	f7ff fc9e 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800184c:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a24      	ldr	r2, [pc, #144]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 8001852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
 8001858:	4b22      	ldr	r3, [pc, #136]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001868:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 8001882:	f043 0308 	orr.w	r3, r3, #8
 8001886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_UART_MspInit+0xe4>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001898:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80018a6:	2305      	movs	r3, #5
 80018a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <HAL_UART_MspInit+0xe8>)
 80018b2:	f001 f831 	bl	8002918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018b6:	2304      	movs	r3, #4
 80018b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80018c6:	2305      	movs	r3, #5
 80018c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ca:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018ce:	4619      	mov	r1, r3
 80018d0:	4806      	ldr	r0, [pc, #24]	@ (80018ec <HAL_UART_MspInit+0xec>)
 80018d2:	f001 f821 	bl	8002918 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3780      	adds	r7, #128	@ 0x80
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40005000 	.word	0x40005000
 80018e4:	40021000 	.word	0x40021000
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48000c00 	.word	0x48000c00

080018f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <NMI_Handler+0x4>

080018f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <HardFault_Handler+0x4>

08001900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <MemManage_Handler+0x4>

08001908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <BusFault_Handler+0x4>

08001910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <UsageFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001940:	f000 f8de 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Channel1_IRQHandler+0x10>)
 800194e:	f000 fe96 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000200 	.word	0x20000200

0800195c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Channel2_IRQHandler+0x10>)
 8001962:	f000 fe8c 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000260 	.word	0x20000260

08001970 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Channel3_IRQHandler+0x10>)
 8001976:	f000 fe82 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002c0 	.word	0x200002c0

08001984 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <DMA1_Channel4_IRQHandler+0x10>)
 800198a:	f000 fe78 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000320 	.word	0x20000320

08001998 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch2);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <DMA1_Channel5_IRQHandler+0x10>)
 800199e:	f000 fe6e 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000380 	.word	0x20000380

080019ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac4_ch1);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <DMA1_Channel6_IRQHandler+0x10>)
 80019b2:	f000 fe64 	bl	800267e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200003e0 	.word	0x200003e0

080019c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	TIM3_Callback();
 80019c4:	f7fe fee6 	bl	8000794 <TIM3_Callback>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <TIM3_IRQHandler+0x14>)
 80019ca:	f002 fc5f 	bl	800428c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000540 	.word	0x20000540

080019d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_Button_Pin);
 80019dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019e0:	f001 f91c 	bl	8002c1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  EXTI_ButtonIRQHandler();
 80019e4:	f7fe fee6 	bl	80007b4 <EXTI_ButtonIRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}

080019ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019f8:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019fc:	f7ff fff6 	bl	80019ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	@ (8001a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <LoopForever+0xe>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	@ (8001a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	@ (8001a44 <LoopForever+0x16>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a26:	f004 fd4b 	bl	80064c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a2a:	f7fe ff8b 	bl	8000944 <main>

08001a2e <LoopForever>:

LoopForever:
    b LoopForever
 8001a2e:	e7fe      	b.n	8001a2e <LoopForever>
  ldr   r0, =_estack
 8001a30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001a3c:	0806179c 	.word	0x0806179c
  ldr r2, =_sbss
 8001a40:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001a44:	20000670 	.word	0x20000670

08001a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC1_2_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <HAL_Init+0x3c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_Init+0x3c>)
 8001a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a62:	2003      	movs	r0, #3
 8001a64:	f000 f956 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a68:	200f      	movs	r0, #15
 8001a6a:	f000 f80f 	bl	8001a8c <HAL_InitTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	71fb      	strb	r3, [r7, #7]
 8001a78:	e001      	b.n	8001a7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7a:	f7ff fbe9 	bl	8001250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]

}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_InitTick+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d022      	beq.n	8001ae6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_InitTick+0x6c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_InitTick+0x68>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f960 	bl	8001d7a <HAL_SYSTICK_Config>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d809      	bhi.n	8001ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	f000 f92c 	bl	8001d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_InitTick+0x70>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e004      	b.n	8001aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000174 	.word	0x20000174
 8001af8:	2000016c 	.word	0x2000016c
 8001afc:	20000170 	.word	0x20000170

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a03      	ldr	r2, [pc, #12]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000066c 	.word	0x2000066c
 8001b20:	20000174 	.word	0x20000174

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b02      	ldr	r3, [pc, #8]	@ (8001b34 <HAL_GetTick+0x10>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	2000066c 	.word	0x2000066c

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fff0 	bl	8001b24 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d004      	beq.n	8001b5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_Delay+0x40>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff ffe1 	bl	8001b24 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8f7      	bhi.n	8001b5e <HAL_Delay+0x26>
  {
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000174 	.word	0x20000174

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	@ (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff90 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff2d 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff44 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff92 	bl	8001c6c <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff61 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff37 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa4 	bl	8001cd0 <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e014      	b.n	8001dce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fa6f 	bl	8001298 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b2      	b.n	8001f56 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_DAC_Start_DMA+0x24>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0ac      	b.n	8001f56 <HAL_DAC_Start_DMA+0x17e>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2202      	movs	r2, #2
 8001e06:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d129      	bne.n	8001e62 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4a53      	ldr	r2, [pc, #332]	@ (8001f60 <HAL_DAC_Start_DMA+0x188>)
 8001e14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4a52      	ldr	r2, [pc, #328]	@ (8001f64 <HAL_DAC_Start_DMA+0x18c>)
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4a51      	ldr	r2, [pc, #324]	@ (8001f68 <HAL_DAC_Start_DMA+0x190>)
 8001e24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e34:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DAC_Start_DMA+0x6c>
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d005      	beq.n	8001e4e <HAL_DAC_Start_DMA+0x76>
 8001e42:	e009      	b.n	8001e58 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3308      	adds	r3, #8
 8001e4a:	61bb      	str	r3, [r7, #24]
        break;
 8001e4c:	e033      	b.n	8001eb6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	330c      	adds	r3, #12
 8001e54:	61bb      	str	r3, [r7, #24]
        break;
 8001e56:	e02e      	b.n	8001eb6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	61bb      	str	r3, [r7, #24]
        break;
 8001e60:	e029      	b.n	8001eb6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4a41      	ldr	r2, [pc, #260]	@ (8001f6c <HAL_DAC_Start_DMA+0x194>)
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <HAL_DAC_Start_DMA+0x198>)
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	4a3f      	ldr	r2, [pc, #252]	@ (8001f74 <HAL_DAC_Start_DMA+0x19c>)
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DAC_Start_DMA+0xc0>
 8001e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d005      	beq.n	8001ea2 <HAL_DAC_Start_DMA+0xca>
 8001e96:	e009      	b.n	8001eac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3314      	adds	r3, #20
 8001e9e:	61bb      	str	r3, [r7, #24]
        break;
 8001ea0:	e009      	b.n	8001eb6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3318      	adds	r3, #24
 8001ea8:	61bb      	str	r3, [r7, #24]
        break;
 8001eaa:	e004      	b.n	8001eb6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	331c      	adds	r3, #28
 8001eb2:	61bb      	str	r3, [r7, #24]
        break;
 8001eb4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d111      	bne.n	8001ee0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001eca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6898      	ldr	r0, [r3, #8]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f000 fb57 	bl	8002588 <HAL_DMA_Start_IT>
 8001eda:	4603      	mov	r3, r0
 8001edc:	77fb      	strb	r3, [r7, #31]
 8001ede:	e010      	b.n	8001f02 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001eee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	68d8      	ldr	r0, [r3, #12]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f000 fb45 	bl	8002588 <HAL_DMA_Start_IT>
 8001efe:	4603      	mov	r3, r0
 8001f00:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11c      	bne.n	8001f48 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_DAC_Start_DMA+0x1a0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	099b      	lsrs	r3, r3, #6
 8001f2c:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <HAL_DAC_Start_DMA+0x1a4>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	099b      	lsrs	r3, r3, #6
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f38:	e002      	b.n	8001f40 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_DAC_Start_DMA+0x162>
 8001f46:	e005      	b.n	8001f54 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f043 0204 	orr.w	r2, r3, #4
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001f54:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	08002329 	.word	0x08002329
 8001f64:	0800234b 	.word	0x0800234b
 8001f68:	08002367 	.word	0x08002367
 8001f6c:	080023cb 	.word	0x080023cb
 8001f70:	080023ed 	.word	0x080023ed
 8001f74:	08002409 	.word	0x08002409
 8001f78:	2000016c 	.word	0x2000016c
 8001f7c:	053e2d63 	.word	0x053e2d63

08001f80 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_DAC_ConfigChannel+0x1c>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e19e      	b.n	8002316 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	795b      	ldrb	r3, [r3, #5]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_DAC_ConfigChannel+0x2c>
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	e198      	b.n	8002316 <HAL_DAC_ConfigChannel+0x35e>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2202      	movs	r2, #2
 8001fee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d17a      	bne.n	80020ee <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff fd94 	bl	8001b24 <HAL_GetTick>
 8001ffc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d13d      	bne.n	8002080 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002004:	e018      	b.n	8002038 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002006:	f7ff fd8d 	bl	8001b24 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d911      	bls.n	8002038 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f043 0208 	orr.w	r2, r3, #8
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2203      	movs	r2, #3
 8002032:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e16e      	b.n	8002316 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1df      	bne.n	8002006 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800204e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002050:	e020      	b.n	8002094 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002052:	f7ff fd67 	bl	8001b24 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d90f      	bls.n	8002080 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	2b00      	cmp	r3, #0
 8002068:	da0a      	bge.n	8002080 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f043 0208 	orr.w	r2, r3, #8
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	2203      	movs	r2, #3
 800207a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e14a      	b.n	8002316 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002086:	2b00      	cmp	r3, #0
 8002088:	dbe3      	blt.n	8002052 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	ea02 0103 	and.w	r1, r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	21ff      	movs	r1, #255	@ 0xff
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	ea02 0103 	and.w	r1, r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d11d      	bne.n	8002132 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	221f      	movs	r2, #31
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210e:	4013      	ands	r3, r2
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002126:	4313      	orrs	r3, r2
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2207      	movs	r2, #7
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800214a:	4013      	ands	r3, r2
 800214c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002156:	2300      	movs	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	e00f      	b.n	800217c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d102      	bne.n	800216a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002164:	2301      	movs	r3, #1
 8002166:	623b      	str	r3, [r7, #32]
 8002168:	e008      	b.n	800217c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	e001      	b.n	800217c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	6a3a      	ldr	r2, [r7, #32]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219e:	4013      	ands	r3, r2
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	791b      	ldrb	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d102      	bne.n	80021b0 <HAL_DAC_ConfigChannel+0x1f8>
 80021aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021ae:	e000      	b.n	80021b2 <HAL_DAC_ConfigChannel+0x1fa>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ca:	4013      	ands	r3, r2
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	795b      	ldrb	r3, [r3, #5]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d102      	bne.n	80021dc <HAL_DAC_ConfigChannel+0x224>
 80021d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021da:	e000      	b.n	80021de <HAL_DAC_ConfigChannel+0x226>
 80021dc:	2300      	movs	r3, #0
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d114      	bne.n	800221e <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80021f4:	f001 fb94 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 80021f8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4a48      	ldr	r2, [pc, #288]	@ (8002320 <HAL_DAC_ConfigChannel+0x368>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d904      	bls.n	800220c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
 800220a:	e00f      	b.n	800222c <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4a45      	ldr	r2, [pc, #276]	@ (8002324 <HAL_DAC_ConfigChannel+0x36c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d90a      	bls.n	800222a <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
 800221c:	e006      	b.n	800222c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002224:	4313      	orrs	r3, r2
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
 8002228:	e000      	b.n	800222c <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800222a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223a:	4313      	orrs	r3, r2
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227e:	4013      	ands	r3, r2
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002296:	4313      	orrs	r3, r2
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	22c0      	movs	r2, #192	@ 0xc0
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43da      	mvns	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	ea02 0103 	and.w	r1, r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002314:	7ffb      	ldrb	r3, [r7, #31]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3728      	adds	r7, #40	@ 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	09896800 	.word	0x09896800
 8002324:	04c4b400 	.word	0x04c4b400

08002328 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002334:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f7ff fe22 	bl	8001f80 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	711a      	strb	r2, [r3, #4]
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff fe1a 	bl	8001f92 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002372:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f043 0204 	orr.w	r2, r3, #4
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fe0f 	bl	8001fa4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	711a      	strb	r2, [r3, #4]
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff ffdb 	bl	8002394 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	711a      	strb	r2, [r3, #4]
}
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ffd3 	bl	80023a6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002414:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f043 0204 	orr.w	r2, r3, #4
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff ffc8 	bl	80023b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	711a      	strb	r2, [r3, #4]
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e08d      	b.n	8002566 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b47      	ldr	r3, [pc, #284]	@ (8002570 <HAL_DMA_Init+0x138>)
 8002452:	429a      	cmp	r2, r3
 8002454:	d80f      	bhi.n	8002476 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b45      	ldr	r3, [pc, #276]	@ (8002574 <HAL_DMA_Init+0x13c>)
 800245e:	4413      	add	r3, r2
 8002460:	4a45      	ldr	r2, [pc, #276]	@ (8002578 <HAL_DMA_Init+0x140>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	009a      	lsls	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_DMA_Init+0x144>)
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40
 8002474:	e00e      	b.n	8002494 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	4b40      	ldr	r3, [pc, #256]	@ (8002580 <HAL_DMA_Init+0x148>)
 800247e:	4413      	add	r3, r2
 8002480:	4a3d      	ldr	r2, [pc, #244]	@ (8002578 <HAL_DMA_Init+0x140>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	009a      	lsls	r2, r3, #2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a3c      	ldr	r2, [pc, #240]	@ (8002584 <HAL_DMA_Init+0x14c>)
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f9b6 	bl	8002858 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024f4:	d102      	bne.n	80024fc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002510:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d010      	beq.n	800253c <HAL_DMA_Init+0x104>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b04      	cmp	r3, #4
 8002520:	d80c      	bhi.n	800253c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9d4 	bl	80028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	e008      	b.n	800254e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40020407 	.word	0x40020407
 8002574:	bffdfff8 	.word	0xbffdfff8
 8002578:	cccccccd 	.word	0xcccccccd
 800257c:	40020000 	.word	0x40020000
 8002580:	bffdfbf8 	.word	0xbffdfbf8
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_DMA_Start_IT+0x20>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e066      	b.n	8002676 <HAL_DMA_Start_IT+0xee>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d155      	bne.n	8002668 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f8fb 	bl	80027dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 020e 	orr.w	r2, r2, #14
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e00f      	b.n	8002620 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0204 	bic.w	r2, r2, #4
 800260e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 020a 	orr.w	r2, r2, #10
 800261e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002650:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002654:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e005      	b.n	8002674 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2204      	movs	r2, #4
 80026a0:	409a      	lsls	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d026      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x7a>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d021      	beq.n	80026f8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0204 	bic.w	r2, r2, #4
 80026d0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	f003 021f 	and.w	r2, r3, #31
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	2104      	movs	r1, #4
 80026e0:	fa01 f202 	lsl.w	r2, r1, r2
 80026e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d071      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026f6:	e06c      	b.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2202      	movs	r2, #2
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d02e      	beq.n	800276a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d029      	beq.n	800276a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10b      	bne.n	800273c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 020a 	bic.w	r2, r2, #10
 8002732:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	2102      	movs	r1, #2
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d038      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002768:	e033      	b.n	80027d2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2208      	movs	r2, #8
 8002774:	409a      	lsls	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d025      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 020e 	bic.w	r2, r2, #14
 8002796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
}
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d004      	beq.n	8002806 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002804:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	f003 021f 	and.w	r2, r3, #31
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2101      	movs	r1, #1
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b10      	cmp	r3, #16
 8002828:	d108      	bne.n	800283c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800283a:	e007      	b.n	800284c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr
	...

08002858 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b15      	ldr	r3, [pc, #84]	@ (80028bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 8002868:	429a      	cmp	r2, r3
 800286a:	d802      	bhi.n	8002872 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800286c:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e001      	b.n	8002876 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002872:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002874:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3b08      	subs	r3, #8
 8002882:	4a11      	ldr	r2, [pc, #68]	@ (80028c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	461a      	mov	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	2201      	movs	r2, #1
 80028ac:	409a      	lsls	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40020407 	.word	0x40020407
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020820 	.word	0x40020820
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	40020880 	.word	0x40020880

080028d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a08      	ldr	r2, [pc, #32]	@ (8002914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028f2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2201      	movs	r2, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	1000823f 	.word	0x1000823f
 8002914:	40020940 	.word	0x40020940

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002926:	e15a      	b.n	8002bde <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2101      	movs	r1, #1
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 814c 	beq.w	8002bd8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d005      	beq.n	8002958 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002954:	2b02      	cmp	r3, #2
 8002956:	d130      	bne.n	80029ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800298e:	2201      	movs	r2, #1
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	f003 0201 	and.w	r2, r3, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d017      	beq.n	80029f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	2203      	movs	r2, #3
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d123      	bne.n	8002a4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4013      	ands	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	6939      	ldr	r1, [r7, #16]
 8002a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80a6 	beq.w	8002bd8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a90:	4a5a      	ldr	r2, [pc, #360]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a98:	4b58      	ldr	r3, [pc, #352]	@ (8002bfc <HAL_GPIO_Init+0x2e4>)
 8002a9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa4:	4a56      	ldr	r2, [pc, #344]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	089b      	lsrs	r3, r3, #2
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ace:	d01f      	beq.n	8002b10 <HAL_GPIO_Init+0x1f8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8002c04 <HAL_GPIO_Init+0x2ec>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d019      	beq.n	8002b0c <HAL_GPIO_Init+0x1f4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a4b      	ldr	r2, [pc, #300]	@ (8002c08 <HAL_GPIO_Init+0x2f0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_GPIO_Init+0x1f0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8002c0c <HAL_GPIO_Init+0x2f4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00d      	beq.n	8002b04 <HAL_GPIO_Init+0x1ec>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a49      	ldr	r2, [pc, #292]	@ (8002c10 <HAL_GPIO_Init+0x2f8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <HAL_GPIO_Init+0x1e8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a48      	ldr	r2, [pc, #288]	@ (8002c14 <HAL_GPIO_Init+0x2fc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d101      	bne.n	8002afc <HAL_GPIO_Init+0x1e4>
 8002af8:	2305      	movs	r3, #5
 8002afa:	e00a      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e008      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b00:	2304      	movs	r3, #4
 8002b02:	e006      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b04:	2303      	movs	r3, #3
 8002b06:	e004      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e002      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e000      	b.n	8002b12 <HAL_GPIO_Init+0x1fa>
 8002b10:	2300      	movs	r3, #0
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	f002 0203 	and.w	r2, r2, #3
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	4093      	lsls	r3, r2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b22:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <HAL_GPIO_Init+0x2e8>)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b30:	4b39      	ldr	r3, [pc, #228]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b54:	4a30      	ldr	r2, [pc, #192]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b7e:	4a26      	ldr	r2, [pc, #152]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b84:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd2:	4a11      	ldr	r2, [pc, #68]	@ (8002c18 <HAL_GPIO_Init+0x300>)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f ae9d 	bne.w	8002928 <HAL_GPIO_Init+0x10>
  }
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40010000 	.word	0x40010000
 8002c04:	48000400 	.word	0x48000400
 8002c08:	48000800 	.word	0x48000800
 8002c0c:	48000c00 	.word	0x48000c00
 8002c10:	48001000 	.word	0x48001000
 8002c14:	48001400 	.word	0x48001400
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c26:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d006      	beq.n	8002c40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c32:	4a05      	ldr	r2, [pc, #20]	@ (8002c48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f806 	bl	8002c4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40010400 	.word	0x40010400

08002c4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0bb      	b.n	8002dee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b05      	cmp	r3, #5
 8002c80:	d101      	bne.n	8002c86 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0b3      	b.n	8002dee <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d101      	bne.n	8002c96 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e0ab      	b.n	8002dee <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c96:	4b58      	ldr	r3, [pc, #352]	@ (8002df8 <HAL_OPAMP_Init+0x198>)
 8002c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9a:	4a57      	ldr	r2, [pc, #348]	@ (8002df8 <HAL_OPAMP_Init+0x198>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ca2:	4b55      	ldr	r3, [pc, #340]	@ (8002df8 <HAL_OPAMP_Init+0x198>)
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fc98 	bl	80015f8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b40      	cmp	r3, #64	@ 0x40
 8002cce:	d003      	beq.n	8002cd8 <HAL_OPAMP_Init+0x78>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b60      	cmp	r3, #96	@ 0x60
 8002cd6:	d133      	bne.n	8002d40 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 0110 	bic.w	r1, r3, #16
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b41      	ldr	r3, [pc, #260]	@ (8002dfc <HAL_OPAMP_Init+0x19c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6851      	ldr	r1, [r2, #4]
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6892      	ldr	r2, [r2, #8]
 8002d00:	4311      	orrs	r1, r2
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	6912      	ldr	r2, [r2, #16]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	7d09      	ldrb	r1, [r1, #20]
 8002d0c:	2901      	cmp	r1, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_OPAMP_Init+0xb6>
 8002d10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d14:	e000      	b.n	8002d18 <HAL_OPAMP_Init+0xb8>
 8002d16:	2100      	movs	r1, #0
 8002d18:	4311      	orrs	r1, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d2a:	04d2      	lsls	r2, r2, #19
 8002d2c:	4311      	orrs	r1, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d32:	0612      	lsls	r2, r2, #24
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e035      	b.n	8002dac <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0110 	bic.w	r1, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <HAL_OPAMP_Init+0x19c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6851      	ldr	r1, [r2, #4]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	4311      	orrs	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68d2      	ldr	r2, [r2, #12]
 8002d6e:	4311      	orrs	r1, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6912      	ldr	r2, [r2, #16]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	7d09      	ldrb	r1, [r1, #20]
 8002d7a:	2901      	cmp	r1, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_OPAMP_Init+0x124>
 8002d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d82:	e000      	b.n	8002d86 <HAL_OPAMP_Init+0x126>
 8002d84:	2100      	movs	r1, #0
 8002d86:	4311      	orrs	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d98:	04d2      	lsls	r2, r2, #19
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002da0:	0612      	lsls	r2, r2, #24
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	db10      	blt.n	8002dd8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d103      	bne.n	8002dec <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	e0003e11 	.word	0xe0003e11

08002e00 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e01d      	b.n	8002e54 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d102      	bne.n	8002e2a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	e014      	b.n	8002e54 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d10c      	bne.n	8002e50 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002e4e:	e001      	b.n	8002e54 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d141      	bne.n	8002ef2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e7a:	d131      	bne.n	8002ee0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e7c:	4b47      	ldr	r3, [pc, #284]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e82:	4a46      	ldr	r2, [pc, #280]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8c:	4b43      	ldr	r3, [pc, #268]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e94:	4a41      	ldr	r2, [pc, #260]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e9c:	4b40      	ldr	r3, [pc, #256]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2232      	movs	r2, #50	@ 0x32
 8002ea2:	fb02 f303 	mul.w	r3, r2, r3
 8002ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	0c9b      	lsrs	r3, r3, #18
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb2:	e002      	b.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eba:	4b38      	ldr	r3, [pc, #224]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec6:	d102      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f2      	bne.n	8002eb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ece:	4b33      	ldr	r3, [pc, #204]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eda:	d158      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e057      	b.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ef0:	e04d      	b.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef8:	d141      	bne.n	8002f7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002efa:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f06:	d131      	bne.n	8002f6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f08:	4b24      	ldr	r3, [pc, #144]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f0e:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f18:	4b20      	ldr	r3, [pc, #128]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f20:	4a1e      	ldr	r2, [pc, #120]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2232      	movs	r2, #50	@ 0x32
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	0c9b      	lsrs	r3, r3, #18
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3e:	e002      	b.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f46:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f52:	d102      	bne.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f2      	bne.n	8002f40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5a:	4b10      	ldr	r3, [pc, #64]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f66:	d112      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e011      	b.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f7c:	e007      	b.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f7e:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f86:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	2000016c 	.word	0x2000016c
 8002fa4:	431bde83 	.word	0x431bde83

08002fa8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a03      	ldr	r2, [pc, #12]	@ (8002fc0 <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 8002fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fb6:	6093      	str	r3, [r2, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e2fe      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d075      	beq.n	80030ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe2:	4b97      	ldr	r3, [pc, #604]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fec:	4b94      	ldr	r3, [pc, #592]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b0c      	cmp	r3, #12
 8002ffa:	d102      	bne.n	8003002 <HAL_RCC_OscConfig+0x3e>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d002      	beq.n	8003008 <HAL_RCC_OscConfig+0x44>
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d10b      	bne.n	8003020 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003008:	4b8d      	ldr	r3, [pc, #564]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d05b      	beq.n	80030cc <HAL_RCC_OscConfig+0x108>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d157      	bne.n	80030cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e2d9      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003028:	d106      	bne.n	8003038 <HAL_RCC_OscConfig+0x74>
 800302a:	4b85      	ldr	r3, [pc, #532]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a84      	ldr	r2, [pc, #528]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xb0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x98>
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7e      	ldr	r2, [pc, #504]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a7b      	ldr	r2, [pc, #492]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xb0>
 800305c:	4b78      	ldr	r3, [pc, #480]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a77      	ldr	r2, [pc, #476]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b75      	ldr	r3, [pc, #468]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a74      	ldr	r2, [pc, #464]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe fd52 	bl	8001b24 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe fd4e 	bl	8001b24 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e29e      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	4b6a      	ldr	r3, [pc, #424]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xc0>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fd3e 	bl	8001b24 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe fd3a 	bl	8001b24 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e28a      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	4b60      	ldr	r3, [pc, #384]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0xe8>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d075      	beq.n	80031c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4b59      	ldr	r3, [pc, #356]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b56      	ldr	r3, [pc, #344]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_OscConfig+0x136>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d002      	beq.n	8003100 <HAL_RCC_OscConfig+0x13c>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d11f      	bne.n	8003140 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003100:	4b4f      	ldr	r3, [pc, #316]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_OscConfig+0x154>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e25d      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	4946      	ldr	r1, [pc, #280]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800312c:	4b45      	ldr	r3, [pc, #276]	@ (8003244 <HAL_RCC_OscConfig+0x280>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fcab 	bl	8001a8c <HAL_InitTick>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d043      	beq.n	80031c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e249      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d023      	beq.n	8003190 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003148:	4b3d      	ldr	r3, [pc, #244]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a3c      	ldr	r2, [pc, #240]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fce6 	bl	8001b24 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fe fce2 	bl	8001b24 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e232      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	061b      	lsls	r3, r3, #24
 8003188:	492d      	ldr	r1, [pc, #180]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
 800318e:	e01a      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003190:	4b2b      	ldr	r3, [pc, #172]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2a      	ldr	r2, [pc, #168]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fcc2 	bl	8001b24 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fe fcbe 	bl	8001b24 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e20e      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1e0>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d041      	beq.n	8003256 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01c      	beq.n	8003214 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80031dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e0:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fc9b 	bl	8001b24 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f2:	f7fe fc97 	bl	8001b24 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e1e7      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003204:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0ef      	beq.n	80031f2 <HAL_RCC_OscConfig+0x22e>
 8003212:	e020      	b.n	8003256 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321a:	4a09      	ldr	r2, [pc, #36]	@ (8003240 <HAL_RCC_OscConfig+0x27c>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fe fc7e 	bl	8001b24 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800322a:	e00d      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322c:	f7fe fc7a 	bl	8001b24 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d906      	bls.n	8003248 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1ca      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
 800323e:	bf00      	nop
 8003240:	40021000 	.word	0x40021000
 8003244:	20000170 	.word	0x20000170
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003248:	4b8c      	ldr	r3, [pc, #560]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800324a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ea      	bne.n	800322c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a6 	beq.w	80033b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003268:	4b84      	ldr	r3, [pc, #528]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <HAL_RCC_OscConfig+0x2b4>
 8003274:	2301      	movs	r3, #1
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x2b6>
 8003278:	2300      	movs	r3, #0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b7f      	ldr	r3, [pc, #508]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	4a7e      	ldr	r2, [pc, #504]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003288:	6593      	str	r3, [r2, #88]	@ 0x58
 800328a:	4b7c      	ldr	r3, [pc, #496]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800328c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003296:	2301      	movs	r3, #1
 8003298:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329a:	4b79      	ldr	r3, [pc, #484]	@ (8003480 <HAL_RCC_OscConfig+0x4bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d118      	bne.n	80032d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a6:	4b76      	ldr	r3, [pc, #472]	@ (8003480 <HAL_RCC_OscConfig+0x4bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a75      	ldr	r2, [pc, #468]	@ (8003480 <HAL_RCC_OscConfig+0x4bc>)
 80032ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b2:	f7fe fc37 	bl	8001b24 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ba:	f7fe fc33 	bl	8001b24 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e183      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <HAL_RCC_OscConfig+0x4bc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d108      	bne.n	80032f2 <HAL_RCC_OscConfig+0x32e>
 80032e0:	4b66      	ldr	r3, [pc, #408]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e6:	4a65      	ldr	r2, [pc, #404]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f0:	e024      	b.n	800333c <HAL_RCC_OscConfig+0x378>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d110      	bne.n	800331c <HAL_RCC_OscConfig+0x358>
 80032fa:	4b60      	ldr	r3, [pc, #384]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003300:	4a5e      	ldr	r2, [pc, #376]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800330a:	4b5c      	ldr	r3, [pc, #368]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003310:	4a5a      	ldr	r2, [pc, #360]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800331a:	e00f      	b.n	800333c <HAL_RCC_OscConfig+0x378>
 800331c:	4b57      	ldr	r3, [pc, #348]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003322:	4a56      	ldr	r2, [pc, #344]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	4a52      	ldr	r2, [pc, #328]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003334:	f023 0304 	bic.w	r3, r3, #4
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d016      	beq.n	8003372 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003344:	f7fe fbee 	bl	8001b24 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fbea 	bl	8001b24 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e138      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003362:	4b46      	ldr	r3, [pc, #280]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ed      	beq.n	800334c <HAL_RCC_OscConfig+0x388>
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fe fbd7 	bl	8001b24 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337a:	f7fe fbd3 	bl	8001b24 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e121      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003390:	4b3a      	ldr	r3, [pc, #232]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ed      	bne.n	800337a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b35      	ldr	r3, [pc, #212]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a8:	4a34      	ldr	r2, [pc, #208]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d03c      	beq.n	8003436 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01c      	beq.n	80033fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c4:	4b2d      	ldr	r3, [pc, #180]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fe fba6 	bl	8001b24 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033dc:	f7fe fba2 	bl	8001b24 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0f2      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ee:	4b23      	ldr	r3, [pc, #140]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCC_OscConfig+0x418>
 80033fc:	e01b      	b.n	8003436 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033fe:	4b1f      	ldr	r3, [pc, #124]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003404:	4a1d      	ldr	r2, [pc, #116]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fe fb89 	bl	8001b24 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003416:	f7fe fb85 	bl	8001b24 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0d5      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003428:	4b14      	ldr	r3, [pc, #80]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800342a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1ef      	bne.n	8003416 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80c9 	beq.w	80035d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003440:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b0c      	cmp	r3, #12
 800344a:	f000 8083 	beq.w	8003554 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d15e      	bne.n	8003514 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a08      	ldr	r2, [pc, #32]	@ (800347c <HAL_RCC_OscConfig+0x4b8>)
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fb5f 	bl	8001b24 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	e00c      	b.n	8003484 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe fb5b 	bl	8001b24 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d905      	bls.n	8003484 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0ab      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
 800347c:	40021000 	.word	0x40021000
 8003480:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	4b55      	ldr	r3, [pc, #340]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ec      	bne.n	800346a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003490:	4b52      	ldr	r3, [pc, #328]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4b52      	ldr	r3, [pc, #328]	@ (80035e0 <HAL_RCC_OscConfig+0x61c>)
 8003496:	4013      	ands	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6a11      	ldr	r1, [r2, #32]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a0:	3a01      	subs	r2, #1
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	4311      	orrs	r1, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034aa:	0212      	lsls	r2, r2, #8
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034b2:	0852      	lsrs	r2, r2, #1
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0552      	lsls	r2, r2, #21
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034be:	0852      	lsrs	r2, r2, #1
 80034c0:	3a01      	subs	r2, #1
 80034c2:	0652      	lsls	r2, r2, #25
 80034c4:	4311      	orrs	r1, r2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034ca:	06d2      	lsls	r2, r2, #27
 80034cc:	430a      	orrs	r2, r1
 80034ce:	4943      	ldr	r1, [pc, #268]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b41      	ldr	r3, [pc, #260]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a40      	ldr	r2, [pc, #256]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e0:	4b3e      	ldr	r3, [pc, #248]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a3d      	ldr	r2, [pc, #244]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe fb1a 	bl	8001b24 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe fb16 	bl	8001b24 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e066      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	4b35      	ldr	r3, [pc, #212]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x530>
 8003512:	e05e      	b.n	80035d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003514:	4b31      	ldr	r3, [pc, #196]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a30      	ldr	r2, [pc, #192]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 800351a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800351e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003520:	f7fe fb00 	bl	8001b24 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe fafc 	bl	8001b24 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04c      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1f0      	bne.n	8003528 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003546:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	4924      	ldr	r1, [pc, #144]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_RCC_OscConfig+0x620>)
 800354e:	4013      	ands	r3, r2
 8003550:	60cb      	str	r3, [r1, #12]
 8003552:	e03e      	b.n	80035d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e039      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003560:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <HAL_RCC_OscConfig+0x618>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0203 	and.w	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d12c      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	3b01      	subs	r3, #1
 8003580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d123      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d11b      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d113      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	019f800c 	.word	0x019f800c
 80035e4:	feeefffc 	.word	0xfeeefffc

080035e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e11e      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003600:	4b91      	ldr	r3, [pc, #580]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d910      	bls.n	8003630 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b8e      	ldr	r3, [pc, #568]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 020f 	bic.w	r2, r3, #15
 8003616:	498c      	ldr	r1, [pc, #560]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b8a      	ldr	r3, [pc, #552]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e106      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d073      	beq.n	8003724 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d129      	bne.n	8003698 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003644:	4b81      	ldr	r3, [pc, #516]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0f4      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003654:	f000 f99a 	bl	800398c <RCC_GetSysClockFreqFromPLLSource>
 8003658:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4a7c      	ldr	r2, [pc, #496]	@ (8003850 <HAL_RCC_ClockConfig+0x268>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d93f      	bls.n	80036e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003662:	4b7a      	ldr	r3, [pc, #488]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003676:	2b00      	cmp	r3, #0
 8003678:	d033      	beq.n	80036e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800367e:	2b00      	cmp	r3, #0
 8003680:	d12f      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003682:	4b72      	ldr	r3, [pc, #456]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800368a:	4a70      	ldr	r2, [pc, #448]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 800368c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003690:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e024      	b.n	80036e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a0:	4b6a      	ldr	r3, [pc, #424]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d109      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e0c6      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b0:	4b66      	ldr	r3, [pc, #408]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0be      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036c0:	f000 f8ce 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4a61      	ldr	r2, [pc, #388]	@ (8003850 <HAL_RCC_ClockConfig+0x268>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d909      	bls.n	80036e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036ce:	4b5f      	ldr	r3, [pc, #380]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036d6:	4a5d      	ldr	r2, [pc, #372]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036de:	2380      	movs	r3, #128	@ 0x80
 80036e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036e2:	4b5a      	ldr	r3, [pc, #360]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 0203 	bic.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4957      	ldr	r1, [pc, #348]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f4:	f7fe fa16 	bl	8001b24 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe fa12 	bl	8001b24 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e095      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	4b4e      	ldr	r3, [pc, #312]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 020c 	and.w	r2, r3, #12
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	429a      	cmp	r2, r3
 8003722:	d1eb      	bne.n	80036fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d023      	beq.n	8003778 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800373c:	4b43      	ldr	r3, [pc, #268]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a42      	ldr	r2, [pc, #264]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003742:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003746:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003754:	4b3d      	ldr	r3, [pc, #244]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800375c:	4a3b      	ldr	r2, [pc, #236]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 800375e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b39      	ldr	r3, [pc, #228]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4936      	ldr	r1, [pc, #216]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
 8003776:	e008      	b.n	800378a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d105      	bne.n	800378a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4a32      	ldr	r2, [pc, #200]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003784:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003788:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800378a:	4b2f      	ldr	r3, [pc, #188]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	429a      	cmp	r2, r3
 8003796:	d21d      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f023 020f 	bic.w	r2, r3, #15
 80037a0:	4929      	ldr	r1, [pc, #164]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037a8:	f7fe f9bc 	bl	8001b24 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe f9b8 	bl	8001b24 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03b      	b.n	800383e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d1ed      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4917      	ldr	r1, [pc, #92]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b13      	ldr	r3, [pc, #76]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490f      	ldr	r1, [pc, #60]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003812:	f000 f825 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <HAL_RCC_ClockConfig+0x264>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490c      	ldr	r1, [pc, #48]	@ (8003854 <HAL_RCC_ClockConfig+0x26c>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x270>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x274>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe f928 	bl	8001a8c <HAL_InitTick>
 800383c:	4603      	mov	r3, r0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40022000 	.word	0x40022000
 800384c:	40021000 	.word	0x40021000
 8003850:	04c4b400 	.word	0x04c4b400
 8003854:	0806174c 	.word	0x0806174c
 8003858:	2000016c 	.word	0x2000016c
 800385c:	20000170 	.word	0x20000170

08003860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003866:	4b2b      	ldr	r3, [pc, #172]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b04      	cmp	r3, #4
 8003870:	d102      	bne.n	8003878 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003872:	4b29      	ldr	r3, [pc, #164]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e047      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003878:	4b26      	ldr	r3, [pc, #152]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 030c 	and.w	r3, r3, #12
 8003880:	2b08      	cmp	r3, #8
 8003882:	d102      	bne.n	800388a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003884:	4b25      	ldr	r3, [pc, #148]	@ (800391c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	e03e      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800388a:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b0c      	cmp	r3, #12
 8003894:	d136      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003896:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3301      	adds	r3, #1
 80038ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d10c      	bne.n	80038ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038b4:	4a19      	ldr	r2, [pc, #100]	@ (800391c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038be:	68d2      	ldr	r2, [r2, #12]
 80038c0:	0a12      	lsrs	r2, r2, #8
 80038c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
      break;
 80038cc:	e00c      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038d8:	68d2      	ldr	r2, [r2, #12]
 80038da:	0a12      	lsrs	r2, r2, #8
 80038dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
      break;
 80038e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0e5b      	lsrs	r3, r3, #25
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e001      	b.n	8003908 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003908:	693b      	ldr	r3, [r7, #16]
}
 800390a:	4618      	mov	r0, r3
 800390c:	371c      	adds	r7, #28
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40021000 	.word	0x40021000
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200

08003920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b02      	ldr	r3, [pc, #8]	@ (8003930 <HAL_RCC_GetHCLKFreq+0x10>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr
 8003930:	2000016c 	.word	0x2000016c

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003938:	f7ff fff2 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	0806175c 	.word	0x0806175c

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003964:	f7ff ffdc 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	@ (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000
 8003988:	0806175c 	.word	0x0806175c

0800398c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d10c      	bne.n	80039ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ba:	68d2      	ldr	r2, [r2, #12]
 80039bc:	0a12      	lsrs	r2, r2, #8
 80039be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	617b      	str	r3, [r7, #20]
    break;
 80039c8:	e00c      	b.n	80039e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039ca:	4a12      	ldr	r2, [pc, #72]	@ (8003a14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	4a0e      	ldr	r2, [pc, #56]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	0a12      	lsrs	r2, r2, #8
 80039d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]
    break;
 80039e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039e4:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	0e5b      	lsrs	r3, r3, #25
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039fe:	687b      	ldr	r3, [r7, #4]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	007a1200 	.word	0x007a1200
 8003a14:	00f42400 	.word	0x00f42400

08003a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a20:	2300      	movs	r3, #0
 8003a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8098 	beq.w	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a52:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a62:	4b3a      	ldr	r3, [pc, #232]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a39      	ldr	r2, [pc, #228]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a6e:	f7fe f859 	bl	8001b24 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a74:	e009      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a76:	f7fe f855 	bl	8001b24 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d902      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	74fb      	strb	r3, [r7, #19]
        break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8a:	4b30      	ldr	r3, [pc, #192]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0ef      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d159      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01e      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d019      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ab8:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ac4:	4b20      	ldr	r3, [pc, #128]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aca:	4a1f      	ldr	r2, [pc, #124]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	4a1b      	ldr	r2, [pc, #108]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003adc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ae4:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe f815 	bl	8001b24 <HAL_GetTick>
 8003afa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afc:	e00b      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe f811 	bl	8001b24 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	74fb      	strb	r3, [r7, #19]
            break;
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ec      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10b      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b2a:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b38:	4903      	ldr	r1, [pc, #12]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b40:	e008      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	74bb      	strb	r3, [r7, #18]
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	7cfb      	ldrb	r3, [r7, #19]
 8003b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b54:	7c7b      	ldrb	r3, [r7, #17]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	4aa6      	ldr	r2, [pc, #664]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b72:	4ba1      	ldr	r3, [pc, #644]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f023 0203 	bic.w	r2, r3, #3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	499d      	ldr	r1, [pc, #628]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b94:	4b98      	ldr	r3, [pc, #608]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f023 020c 	bic.w	r2, r3, #12
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4995      	ldr	r1, [pc, #596]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bb6:	4b90      	ldr	r3, [pc, #576]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	498c      	ldr	r1, [pc, #560]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bd8:	4b87      	ldr	r3, [pc, #540]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	4984      	ldr	r1, [pc, #528]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	497b      	ldr	r1, [pc, #492]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00a      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c1c:	4b76      	ldr	r3, [pc, #472]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	4973      	ldr	r1, [pc, #460]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	496a      	ldr	r1, [pc, #424]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c60:	4b65      	ldr	r3, [pc, #404]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	4962      	ldr	r1, [pc, #392]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c82:	4b5d      	ldr	r3, [pc, #372]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	4959      	ldr	r1, [pc, #356]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ca4:	4b54      	ldr	r3, [pc, #336]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	4951      	ldr	r1, [pc, #324]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc6:	4b4c      	ldr	r3, [pc, #304]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	4948      	ldr	r1, [pc, #288]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d015      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce8:	4b43      	ldr	r3, [pc, #268]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4940      	ldr	r1, [pc, #256]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d08:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d20:	4b35      	ldr	r3, [pc, #212]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2e:	4932      	ldr	r1, [pc, #200]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b2d      	ldr	r3, [pc, #180]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a2c      	ldr	r2, [pc, #176]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d58:	4b27      	ldr	r3, [pc, #156]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	4924      	ldr	r1, [pc, #144]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d78:	4b1f      	ldr	r3, [pc, #124]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d82:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d90:	4b19      	ldr	r3, [pc, #100]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	4916      	ldr	r1, [pc, #88]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db0:	4b11      	ldr	r3, [pc, #68]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a10      	ldr	r2, [pc, #64]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d019      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	4908      	ldr	r1, [pc, #32]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003de6:	d109      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de8:	4b03      	ldr	r3, [pc, #12]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a02      	ldr	r2, [pc, #8]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df2:	60d3      	str	r3, [r2, #12]
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003df6:	bf00      	nop
 8003df8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e08:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	4926      	ldr	r1, [pc, #152]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e32:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	4918      	ldr	r1, [pc, #96]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	490a      	ldr	r1, [pc, #40]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e98:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ea4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e049      	b.n	8003f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fc02 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	f000 fd72 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d001      	beq.n	8003f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04c      	b.n	8004016 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a25      	ldr	r2, [pc, #148]	@ (8004020 <HAL_TIM_Base_Start+0xbc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d022      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d01d      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a21      	ldr	r2, [pc, #132]	@ (8004024 <HAL_TIM_Base_Start+0xc0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <HAL_TIM_Base_Start+0xc4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a1e      	ldr	r2, [pc, #120]	@ (800402c <HAL_TIM_Base_Start+0xc8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1d      	ldr	r2, [pc, #116]	@ (8004030 <HAL_TIM_Base_Start+0xcc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004034 <HAL_TIM_Base_Start+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_Base_Start+0x70>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1a      	ldr	r2, [pc, #104]	@ (8004038 <HAL_TIM_Base_Start+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d115      	bne.n	8004000 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b18      	ldr	r3, [pc, #96]	@ (800403c <HAL_TIM_Base_Start+0xd8>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d015      	beq.n	8004012 <HAL_TIM_Base_Start+0xae>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fec:	d011      	beq.n	8004012 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e008      	b.n	8004012 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e000      	b.n	8004014 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40013400 	.word	0x40013400
 8004034:	40014000 	.word	0x40014000
 8004038:	40015000 	.word	0x40015000
 800403c:	00010007 	.word	0x00010007

08004040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d001      	beq.n	8004058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e054      	b.n	8004102 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a25      	ldr	r2, [pc, #148]	@ (800410c <HAL_TIM_Base_Start_IT+0xcc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d022      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004082:	d01d      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a21      	ldr	r2, [pc, #132]	@ (8004110 <HAL_TIM_Base_Start_IT+0xd0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d018      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a20      	ldr	r2, [pc, #128]	@ (8004114 <HAL_TIM_Base_Start_IT+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d013      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <HAL_TIM_Base_Start_IT+0xd8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00e      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1d      	ldr	r2, [pc, #116]	@ (800411c <HAL_TIM_Base_Start_IT+0xdc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_TIM_Base_Start_IT+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d004      	beq.n	80040c0 <HAL_TIM_Base_Start_IT+0x80>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004124 <HAL_TIM_Base_Start_IT+0xe4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d115      	bne.n	80040ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	4b18      	ldr	r3, [pc, #96]	@ (8004128 <HAL_TIM_Base_Start_IT+0xe8>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d015      	beq.n	80040fe <HAL_TIM_Base_Start_IT+0xbe>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d8:	d011      	beq.n	80040fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ea:	e008      	b.n	80040fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e000      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40015000 	.word	0x40015000
 8004128:	00010007 	.word	0x00010007

0800412c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e049      	b.n	80041d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd fafe 	bl	8001754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f000 fc36 	bl	80049dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e041      	b.n	8004272 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f839 	bl	800427a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fbde 	bl	80049dc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0208 	bic.w	r2, r2, #8
 800422e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d020      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01b      	beq.n	80042f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0202 	mvn.w	r2, #2
 80042c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fb64 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fb57 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fb66 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f06f 0204 	mvn.w	r2, #4
 800430c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2202      	movs	r2, #2
 8004312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb3e 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004328:	e005      	b.n	8004336 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fb31 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fb40 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0208 	mvn.w	r2, #8
 8004358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2204      	movs	r2, #4
 800435e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fb18 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fb0b 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb1a 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d020      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2208      	movs	r2, #8
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 faf2 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fae5 	bl	8004992 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 faf4 	bl	80049b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0201 	mvn.w	r2, #1
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fac4 	bl	8004980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800441e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f001 f8f2 	bl	800560a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00c      	beq.n	800444a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f001 f8e9 	bl	800561c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00c      	beq.n	800446e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 faad 	bl	80049c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00c      	beq.n	8004492 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f06f 0220 	mvn.w	r2, #32
 800448a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 f8b3 	bl	80055f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80044ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f001 f8bc 	bl	800562e <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 f8b3 	bl	8005640 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f001 f8aa 	bl	8005652 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 f8a1 	bl	8005664 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004546:	2302      	movs	r3, #2
 8004548:	e0ff      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b14      	cmp	r3, #20
 8004556:	f200 80f0 	bhi.w	800473a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800455a:	a201      	add	r2, pc, #4	@ (adr r2, 8004560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	080045b5 	.word	0x080045b5
 8004564:	0800473b 	.word	0x0800473b
 8004568:	0800473b 	.word	0x0800473b
 800456c:	0800473b 	.word	0x0800473b
 8004570:	080045f5 	.word	0x080045f5
 8004574:	0800473b 	.word	0x0800473b
 8004578:	0800473b 	.word	0x0800473b
 800457c:	0800473b 	.word	0x0800473b
 8004580:	08004637 	.word	0x08004637
 8004584:	0800473b 	.word	0x0800473b
 8004588:	0800473b 	.word	0x0800473b
 800458c:	0800473b 	.word	0x0800473b
 8004590:	08004677 	.word	0x08004677
 8004594:	0800473b 	.word	0x0800473b
 8004598:	0800473b 	.word	0x0800473b
 800459c:	0800473b 	.word	0x0800473b
 80045a0:	080046b9 	.word	0x080046b9
 80045a4:	0800473b 	.word	0x0800473b
 80045a8:	0800473b 	.word	0x0800473b
 80045ac:	0800473b 	.word	0x0800473b
 80045b0:	080046f9 	.word	0x080046f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fac0 	bl	8004b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6999      	ldr	r1, [r3, #24]
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	619a      	str	r2, [r3, #24]
      break;
 80045f2:	e0a5      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fb3a 	bl	8004c74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699a      	ldr	r2, [r3, #24]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800460e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699a      	ldr	r2, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
      break;
 8004634:	e084      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68b9      	ldr	r1, [r7, #8]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fbab 	bl	8004d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	69da      	ldr	r2, [r3, #28]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0208 	orr.w	r2, r2, #8
 8004650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0204 	bic.w	r2, r2, #4
 8004660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69d9      	ldr	r1, [r3, #28]
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	61da      	str	r2, [r3, #28]
      break;
 8004674:	e064      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fc1d 	bl	8004ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69da      	ldr	r2, [r3, #28]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	021a      	lsls	r2, r3, #8
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	61da      	str	r2, [r3, #28]
      break;
 80046b6:	e043      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fc8e 	bl	8004fe0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	691a      	ldr	r2, [r3, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80046f6:	e023      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fcd8 	bl	80050b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004712:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004722:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004738:	e002      	b.n	8004740 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
      break;
 800473e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004748:	7dfb      	ldrb	r3, [r7, #23]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop

08004754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_TIM_ConfigClockSource+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e0f6      	b.n	800495e <HAL_TIM_ConfigClockSource+0x20a>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800478e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800479a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a6f      	ldr	r2, [pc, #444]	@ (8004968 <HAL_TIM_ConfigClockSource+0x214>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f000 80c1 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 80047b0:	4a6d      	ldr	r2, [pc, #436]	@ (8004968 <HAL_TIM_ConfigClockSource+0x214>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f200 80c6 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b8:	4a6c      	ldr	r2, [pc, #432]	@ (800496c <HAL_TIM_ConfigClockSource+0x218>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f000 80b9 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 80047c0:	4a6a      	ldr	r2, [pc, #424]	@ (800496c <HAL_TIM_ConfigClockSource+0x218>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f200 80be 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c8:	4a69      	ldr	r2, [pc, #420]	@ (8004970 <HAL_TIM_ConfigClockSource+0x21c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 80b1 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 80047d0:	4a67      	ldr	r2, [pc, #412]	@ (8004970 <HAL_TIM_ConfigClockSource+0x21c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	f200 80b6 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d8:	4a66      	ldr	r2, [pc, #408]	@ (8004974 <HAL_TIM_ConfigClockSource+0x220>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	f000 80a9 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 80047e0:	4a64      	ldr	r2, [pc, #400]	@ (8004974 <HAL_TIM_ConfigClockSource+0x220>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f200 80ae 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 80047e8:	4a63      	ldr	r2, [pc, #396]	@ (8004978 <HAL_TIM_ConfigClockSource+0x224>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	f000 80a1 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 80047f0:	4a61      	ldr	r2, [pc, #388]	@ (8004978 <HAL_TIM_ConfigClockSource+0x224>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	f200 80a6 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 80047f8:	4a60      	ldr	r2, [pc, #384]	@ (800497c <HAL_TIM_ConfigClockSource+0x228>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	f000 8099 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004800:	4a5e      	ldr	r2, [pc, #376]	@ (800497c <HAL_TIM_ConfigClockSource+0x228>)
 8004802:	4293      	cmp	r3, r2
 8004804:	f200 809e 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004808:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800480c:	f000 8091 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004810:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004814:	f200 8096 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004818:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800481c:	f000 8089 	beq.w	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004824:	f200 808e 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482c:	d03e      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x158>
 800482e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004832:	f200 8087 	bhi.w	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483a:	f000 8086 	beq.w	800494a <HAL_TIM_ConfigClockSource+0x1f6>
 800483e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004842:	d87f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004844:	2b70      	cmp	r3, #112	@ 0x70
 8004846:	d01a      	beq.n	800487e <HAL_TIM_ConfigClockSource+0x12a>
 8004848:	2b70      	cmp	r3, #112	@ 0x70
 800484a:	d87b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 800484c:	2b60      	cmp	r3, #96	@ 0x60
 800484e:	d050      	beq.n	80048f2 <HAL_TIM_ConfigClockSource+0x19e>
 8004850:	2b60      	cmp	r3, #96	@ 0x60
 8004852:	d877      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004854:	2b50      	cmp	r3, #80	@ 0x50
 8004856:	d03c      	beq.n	80048d2 <HAL_TIM_ConfigClockSource+0x17e>
 8004858:	2b50      	cmp	r3, #80	@ 0x50
 800485a:	d873      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	d058      	beq.n	8004912 <HAL_TIM_ConfigClockSource+0x1be>
 8004860:	2b40      	cmp	r3, #64	@ 0x40
 8004862:	d86f      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004864:	2b30      	cmp	r3, #48	@ 0x30
 8004866:	d064      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004868:	2b30      	cmp	r3, #48	@ 0x30
 800486a:	d86b      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 800486c:	2b20      	cmp	r3, #32
 800486e:	d060      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004870:	2b20      	cmp	r3, #32
 8004872:	d867      	bhi.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
 8004874:	2b00      	cmp	r3, #0
 8004876:	d05c      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d05a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0x1de>
 800487c:	e062      	b.n	8004944 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488e:	f000 fcf4 	bl	800527a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	609a      	str	r2, [r3, #8]
      break;
 80048aa:	e04f      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	f000 fcdd 	bl	800527a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
      break;
 80048d0:	e03c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048de:	461a      	mov	r2, r3
 80048e0:	f000 fc52 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2150      	movs	r1, #80	@ 0x50
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fca9 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 80048f0:	e02c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048fe:	461a      	mov	r2, r3
 8004900:	f000 fc70 	bl	80051e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2160      	movs	r1, #96	@ 0x60
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fc99 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004910:	e01c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800491e:	461a      	mov	r2, r3
 8004920:	f000 fc32 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2140      	movs	r1, #64	@ 0x40
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fc89 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004930:	e00c      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	4610      	mov	r0, r2
 800493e:	f000 fc80 	bl	8005242 <TIM_ITRx_SetConfig>
      break;
 8004942:	e003      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      break;
 8004948:	e000      	b.n	800494c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800494a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800495c:	7bfb      	ldrb	r3, [r7, #15]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	00100070 	.word	0x00100070
 800496c:	00100060 	.word	0x00100060
 8004970:	00100050 	.word	0x00100050
 8004974:	00100040 	.word	0x00100040
 8004978:	00100030 	.word	0x00100030
 800497c:	00100020 	.word	0x00100020

08004980 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	bc80      	pop	{r7}
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr

080049b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr
	...

080049dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a4b      	ldr	r2, [pc, #300]	@ (8004b1c <TIM_Base_SetConfig+0x140>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d017      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d013      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a48      	ldr	r2, [pc, #288]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d00f      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a47      	ldr	r2, [pc, #284]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00b      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a46      	ldr	r2, [pc, #280]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d007      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a45      	ldr	r2, [pc, #276]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_Base_SetConfig+0x48>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a44      	ldr	r2, [pc, #272]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a38      	ldr	r2, [pc, #224]	@ (8004b1c <TIM_Base_SetConfig+0x140>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d023      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a44:	d01f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a35      	ldr	r2, [pc, #212]	@ (8004b20 <TIM_Base_SetConfig+0x144>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d01b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a34      	ldr	r2, [pc, #208]	@ (8004b24 <TIM_Base_SetConfig+0x148>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d017      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a33      	ldr	r2, [pc, #204]	@ (8004b28 <TIM_Base_SetConfig+0x14c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d013      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a32      	ldr	r2, [pc, #200]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00f      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a31      	ldr	r2, [pc, #196]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d007      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a30      	ldr	r2, [pc, #192]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_Base_SetConfig+0xaa>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a2b      	ldr	r2, [pc, #172]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d108      	bne.n	8004a98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a17      	ldr	r2, [pc, #92]	@ (8004b1c <TIM_Base_SetConfig+0x140>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d013      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	@ (8004b2c <TIM_Base_SetConfig+0x150>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00f      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a19      	ldr	r2, [pc, #100]	@ (8004b34 <TIM_Base_SetConfig+0x158>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00b      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <TIM_Base_SetConfig+0x15c>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d007      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a17      	ldr	r2, [pc, #92]	@ (8004b3c <TIM_Base_SetConfig+0x160>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0x110>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a12      	ldr	r2, [pc, #72]	@ (8004b30 <TIM_Base_SetConfig+0x154>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 0201 	bic.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]
  }
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40000400 	.word	0x40000400
 8004b24:	40000800 	.word	0x40000800
 8004b28:	40000c00 	.word	0x40000c00
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	40015000 	.word	0x40015000
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800

08004b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f023 0201 	bic.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0303 	bic.w	r3, r3, #3
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 0302 	bic.w	r3, r3, #2
 8004b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a30      	ldr	r2, [pc, #192]	@ (8004c5c <TIM_OC1_SetConfig+0x11c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d013      	beq.n	8004bc8 <TIM_OC1_SetConfig+0x88>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c60 <TIM_OC1_SetConfig+0x120>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00f      	beq.n	8004bc8 <TIM_OC1_SetConfig+0x88>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a2e      	ldr	r2, [pc, #184]	@ (8004c64 <TIM_OC1_SetConfig+0x124>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00b      	beq.n	8004bc8 <TIM_OC1_SetConfig+0x88>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a2d      	ldr	r2, [pc, #180]	@ (8004c68 <TIM_OC1_SetConfig+0x128>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d007      	beq.n	8004bc8 <TIM_OC1_SetConfig+0x88>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a2c      	ldr	r2, [pc, #176]	@ (8004c6c <TIM_OC1_SetConfig+0x12c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC1_SetConfig+0x88>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a2b      	ldr	r2, [pc, #172]	@ (8004c70 <TIM_OC1_SetConfig+0x130>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10c      	bne.n	8004be2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0308 	bic.w	r3, r3, #8
 8004bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	f023 0304 	bic.w	r3, r3, #4
 8004be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <TIM_OC1_SetConfig+0x11c>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <TIM_OC1_SetConfig+0xd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1c      	ldr	r2, [pc, #112]	@ (8004c60 <TIM_OC1_SetConfig+0x120>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00f      	beq.n	8004c12 <TIM_OC1_SetConfig+0xd2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <TIM_OC1_SetConfig+0x124>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00b      	beq.n	8004c12 <TIM_OC1_SetConfig+0xd2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <TIM_OC1_SetConfig+0x128>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_OC1_SetConfig+0xd2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a19      	ldr	r2, [pc, #100]	@ (8004c6c <TIM_OC1_SetConfig+0x12c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_OC1_SetConfig+0xd2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	@ (8004c70 <TIM_OC1_SetConfig+0x130>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d111      	bne.n	8004c36 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	621a      	str	r2, [r3, #32]
}
 8004c50:	bf00      	nop
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800
 8004c70:	40015000 	.word	0x40015000

08004c74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 0210 	bic.w	r2, r3, #16
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	021b      	lsls	r3, r3, #8
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d80 <TIM_OC2_SetConfig+0x10c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_OC2_SetConfig+0x74>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a2a      	ldr	r2, [pc, #168]	@ (8004d84 <TIM_OC2_SetConfig+0x110>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC2_SetConfig+0x74>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a29      	ldr	r2, [pc, #164]	@ (8004d88 <TIM_OC2_SetConfig+0x114>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10d      	bne.n	8004d04 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <TIM_OC2_SetConfig+0x10c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <TIM_OC2_SetConfig+0xc0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d84 <TIM_OC2_SetConfig+0x110>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00f      	beq.n	8004d34 <TIM_OC2_SetConfig+0xc0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1d      	ldr	r2, [pc, #116]	@ (8004d8c <TIM_OC2_SetConfig+0x118>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00b      	beq.n	8004d34 <TIM_OC2_SetConfig+0xc0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004d90 <TIM_OC2_SetConfig+0x11c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d007      	beq.n	8004d34 <TIM_OC2_SetConfig+0xc0>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a1b      	ldr	r2, [pc, #108]	@ (8004d94 <TIM_OC2_SetConfig+0x120>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC2_SetConfig+0xc0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <TIM_OC2_SetConfig+0x114>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d113      	bne.n	8004d5c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40015000 	.word	0x40015000
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40014400 	.word	0x40014400
 8004d94:	40014800 	.word	0x40014800

08004d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea4 <TIM_OC3_SetConfig+0x10c>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d007      	beq.n	8004e0a <TIM_OC3_SetConfig+0x72>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea8 <TIM_OC3_SetConfig+0x110>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_OC3_SetConfig+0x72>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a29      	ldr	r2, [pc, #164]	@ (8004eac <TIM_OC3_SetConfig+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10d      	bne.n	8004e26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <TIM_OC3_SetConfig+0x10c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <TIM_OC3_SetConfig+0xbe>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <TIM_OC3_SetConfig+0x110>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00f      	beq.n	8004e56 <TIM_OC3_SetConfig+0xbe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <TIM_OC3_SetConfig+0x118>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00b      	beq.n	8004e56 <TIM_OC3_SetConfig+0xbe>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <TIM_OC3_SetConfig+0x11c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <TIM_OC3_SetConfig+0xbe>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb8 <TIM_OC3_SetConfig+0x120>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d003      	beq.n	8004e56 <TIM_OC3_SetConfig+0xbe>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <TIM_OC3_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d113      	bne.n	8004e7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	40013400 	.word	0x40013400
 8004eac:	40015000 	.word	0x40015000
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc8 <TIM_OC4_SetConfig+0x10c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_OC4_SetConfig+0x74>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2a      	ldr	r2, [pc, #168]	@ (8004fcc <TIM_OC4_SetConfig+0x110>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC4_SetConfig+0x74>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a29      	ldr	r2, [pc, #164]	@ (8004fd0 <TIM_OC4_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10d      	bne.n	8004f4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc8 <TIM_OC4_SetConfig+0x10c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d013      	beq.n	8004f7c <TIM_OC4_SetConfig+0xc0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a1d      	ldr	r2, [pc, #116]	@ (8004fcc <TIM_OC4_SetConfig+0x110>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00f      	beq.n	8004f7c <TIM_OC4_SetConfig+0xc0>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <TIM_OC4_SetConfig+0x118>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_OC4_SetConfig+0xc0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <TIM_OC4_SetConfig+0x11c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_OC4_SetConfig+0xc0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fdc <TIM_OC4_SetConfig+0x120>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC4_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <TIM_OC4_SetConfig+0x114>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d113      	bne.n	8004fa4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40015000 	.word	0x40015000
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800

08004fe0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005024:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	041b      	lsls	r3, r3, #16
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a19      	ldr	r2, [pc, #100]	@ (800509c <TIM_OC5_SetConfig+0xbc>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d013      	beq.n	8005062 <TIM_OC5_SetConfig+0x82>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a18      	ldr	r2, [pc, #96]	@ (80050a0 <TIM_OC5_SetConfig+0xc0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00f      	beq.n	8005062 <TIM_OC5_SetConfig+0x82>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a17      	ldr	r2, [pc, #92]	@ (80050a4 <TIM_OC5_SetConfig+0xc4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00b      	beq.n	8005062 <TIM_OC5_SetConfig+0x82>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <TIM_OC5_SetConfig+0xc8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d007      	beq.n	8005062 <TIM_OC5_SetConfig+0x82>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <TIM_OC5_SetConfig+0xcc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d003      	beq.n	8005062 <TIM_OC5_SetConfig+0x82>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a14      	ldr	r2, [pc, #80]	@ (80050b0 <TIM_OC5_SetConfig+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d109      	bne.n	8005076 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40013400 	.word	0x40013400
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800
 80050b0:	40015000 	.word	0x40015000

080050b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	051b      	lsls	r3, r3, #20
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <TIM_OC6_SetConfig+0xbc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <TIM_OC6_SetConfig+0x84>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a18      	ldr	r2, [pc, #96]	@ (8005174 <TIM_OC6_SetConfig+0xc0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00f      	beq.n	8005138 <TIM_OC6_SetConfig+0x84>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <TIM_OC6_SetConfig+0xc4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_OC6_SetConfig+0x84>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a16      	ldr	r2, [pc, #88]	@ (800517c <TIM_OC6_SetConfig+0xc8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC6_SetConfig+0x84>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <TIM_OC6_SetConfig+0xcc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC6_SetConfig+0x84>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <TIM_OC6_SetConfig+0xd0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d109      	bne.n	800514c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	bf00      	nop
 8005168:	371c      	adds	r7, #28
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800
 8005184:	40015000 	.word	0x40015000

08005188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f023 0201 	bic.w	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 030a 	bic.w	r3, r3, #10
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800520e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	031b      	lsls	r3, r3, #12
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005220:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	f043 0307 	orr.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr

0800527a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005294:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	021a      	lsls	r2, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	431a      	orrs	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	371c      	adds	r7, #28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	2201      	movs	r2, #1
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a1a      	ldr	r2, [r3, #32]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a1a      	ldr	r2, [r3, #32]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_OnePulseN_Start+0x14>
 8005310:	2304      	movs	r3, #4
 8005312:	e000      	b.n	8005316 <HAL_TIMEx_OnePulseN_Start+0x16>
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800531e:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005326:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800532e:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005336:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005338:	7afb      	ldrb	r3, [r7, #11]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d108      	bne.n	8005350 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800533e:	7abb      	ldrb	r3, [r7, #10]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005344:	7a7b      	ldrb	r3, [r7, #9]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d102      	bne.n	8005350 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800534a:	7a3b      	ldrb	r3, [r7, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d001      	beq.n	8005354 <HAL_TIMEx_OnePulseN_Start+0x54>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e026      	b.n	80053a2 <HAL_TIMEx_OnePulseN_Start+0xa2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2204      	movs	r2, #4
 800537a:	6839      	ldr	r1, [r7, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f97a 	bl	8005676 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2201      	movs	r2, #1
 8005388:	68f9      	ldr	r1, [r7, #12]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff ff94 	bl	80052b8 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800539e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e074      	b.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a33      	ldr	r2, [pc, #204]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d009      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a32      	ldr	r2, [pc, #200]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d004      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a30      	ldr	r2, [pc, #192]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005408:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800541a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800541e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a20      	ldr	r2, [pc, #128]	@ (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005444:	d01d      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1b      	ldr	r2, [pc, #108]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a14      	ldr	r2, [pc, #80]	@ (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a17      	ldr	r2, [pc, #92]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a10      	ldr	r2, [pc, #64]	@ (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d10c      	bne.n	800549c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4313      	orrs	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40013400 	.word	0x40013400
 80054c0:	40015000 	.word	0x40015000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	40014000 	.word	0x40014000

080054d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e078      	b.n	80055e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1b      	ldr	r2, [pc, #108]	@ (80055ec <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d009      	beq.n	8005596 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1a      	ldr	r2, [pc, #104]	@ (80055f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d004      	beq.n	8005596 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a18      	ldr	r2, [pc, #96]	@ (80055f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d11c      	bne.n	80055d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	051b      	lsls	r3, r3, #20
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055be:	4313      	orrs	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	40012c00 	.word	0x40012c00
 80055f0:	40013400 	.word	0x40013400
 80055f4:	40015000 	.word	0x40015000

080055f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	bc80      	pop	{r7}
 8005608:	4770      	bx	lr

0800560a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005676:	b480      	push	{r7}
 8005678:	b087      	sub	sp, #28
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2204      	movs	r2, #4
 800568a:	fa02 f303 	lsl.w	r3, r2, r3
 800568e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1a      	ldr	r2, [r3, #32]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	43db      	mvns	r3, r3
 8005698:	401a      	ands	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a1a      	ldr	r2, [r3, #32]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f003 030f 	and.w	r3, r3, #15
 80056a8:	6879      	ldr	r1, [r7, #4]
 80056aa:	fa01 f303 	lsl.w	r3, r1, r3
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e042      	b.n	8005756 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc f88c 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	@ 0x24
 80056ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fbb3 	bl	8005e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8b4 	bl	800587c <UART_SetConfig>
 8005714:	4603      	mov	r3, r0
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e01b      	b.n	8005756 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800572c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800573c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fc31 	bl	8005fb6 <UART_CheckIdleState>
 8005754:	4603      	mov	r3, r0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b08a      	sub	sp, #40	@ 0x28
 8005762:	af02      	add	r7, sp, #8
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005774:	2b20      	cmp	r3, #32
 8005776:	d17b      	bne.n	8005870 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_UART_Transmit+0x26>
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e074      	b.n	8005872 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2221      	movs	r2, #33	@ 0x21
 8005794:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005798:	f7fc f9c4 	bl	8001b24 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	88fa      	ldrh	r2, [r7, #6]
 80057a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b6:	d108      	bne.n	80057ca <HAL_UART_Transmit+0x6c>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d104      	bne.n	80057ca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e003      	b.n	80057d2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d2:	e030      	b.n	8005836 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	@ 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fc93 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e03d      	b.n	8005872 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	3302      	adds	r3, #2
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e007      	b.n	8005824 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	781a      	ldrb	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3301      	adds	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1c8      	bne.n	80057d4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2200      	movs	r2, #0
 800584a:	2140      	movs	r1, #64	@ 0x40
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fc5c 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e006      	b.n	8005872 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	3720      	adds	r7, #32
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800587c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005880:	b08c      	sub	sp, #48	@ 0x30
 8005882:	af00      	add	r7, sp, #0
 8005884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	431a      	orrs	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	431a      	orrs	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4baa      	ldr	r3, [pc, #680]	@ (8005b54 <UART_SetConfig+0x2d8>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a9f      	ldr	r2, [pc, #636]	@ (8005b58 <UART_SetConfig+0x2dc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d004      	beq.n	80058e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e4:	4313      	orrs	r3, r2
 80058e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	f023 010f 	bic.w	r1, r3, #15
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a90      	ldr	r2, [pc, #576]	@ (8005b5c <UART_SetConfig+0x2e0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d125      	bne.n	800596c <UART_SetConfig+0xf0>
 8005920:	4b8f      	ldr	r3, [pc, #572]	@ (8005b60 <UART_SetConfig+0x2e4>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d81a      	bhi.n	8005964 <UART_SetConfig+0xe8>
 800592e:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0xb8>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005945 	.word	0x08005945
 8005938:	08005955 	.word	0x08005955
 800593c:	0800594d 	.word	0x0800594d
 8005940:	0800595d 	.word	0x0800595d
 8005944:	2301      	movs	r3, #1
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800594a:	e116      	b.n	8005b7a <UART_SetConfig+0x2fe>
 800594c:	2302      	movs	r3, #2
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005952:	e112      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800595a:	e10e      	b.n	8005b7a <UART_SetConfig+0x2fe>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005962:	e10a      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800596a:	e106      	b.n	8005b7a <UART_SetConfig+0x2fe>
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a7c      	ldr	r2, [pc, #496]	@ (8005b64 <UART_SetConfig+0x2e8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d138      	bne.n	80059e8 <UART_SetConfig+0x16c>
 8005976:	4b7a      	ldr	r3, [pc, #488]	@ (8005b60 <UART_SetConfig+0x2e4>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f003 030c 	and.w	r3, r3, #12
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d82d      	bhi.n	80059e0 <UART_SetConfig+0x164>
 8005984:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x110>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059c1 	.word	0x080059c1
 8005990:	080059e1 	.word	0x080059e1
 8005994:	080059e1 	.word	0x080059e1
 8005998:	080059e1 	.word	0x080059e1
 800599c:	080059d1 	.word	0x080059d1
 80059a0:	080059e1 	.word	0x080059e1
 80059a4:	080059e1 	.word	0x080059e1
 80059a8:	080059e1 	.word	0x080059e1
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	080059e1 	.word	0x080059e1
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059d9 	.word	0x080059d9
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	e0d8      	b.n	8005b7a <UART_SetConfig+0x2fe>
 80059c8:	2302      	movs	r3, #2
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ce:	e0d4      	b.n	8005b7a <UART_SetConfig+0x2fe>
 80059d0:	2304      	movs	r3, #4
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059d6:	e0d0      	b.n	8005b7a <UART_SetConfig+0x2fe>
 80059d8:	2308      	movs	r3, #8
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059de:	e0cc      	b.n	8005b7a <UART_SetConfig+0x2fe>
 80059e0:	2310      	movs	r3, #16
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059e6:	e0c8      	b.n	8005b7a <UART_SetConfig+0x2fe>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a5e      	ldr	r2, [pc, #376]	@ (8005b68 <UART_SetConfig+0x2ec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d125      	bne.n	8005a3e <UART_SetConfig+0x1c2>
 80059f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b60 <UART_SetConfig+0x2e4>)
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059fc:	2b30      	cmp	r3, #48	@ 0x30
 80059fe:	d016      	beq.n	8005a2e <UART_SetConfig+0x1b2>
 8005a00:	2b30      	cmp	r3, #48	@ 0x30
 8005a02:	d818      	bhi.n	8005a36 <UART_SetConfig+0x1ba>
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d00a      	beq.n	8005a1e <UART_SetConfig+0x1a2>
 8005a08:	2b20      	cmp	r3, #32
 8005a0a:	d814      	bhi.n	8005a36 <UART_SetConfig+0x1ba>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <UART_SetConfig+0x19a>
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d008      	beq.n	8005a26 <UART_SetConfig+0x1aa>
 8005a14:	e00f      	b.n	8005a36 <UART_SetConfig+0x1ba>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a1c:	e0ad      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a1e:	2302      	movs	r3, #2
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a24:	e0a9      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a26:	2304      	movs	r3, #4
 8005a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2c:	e0a5      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a2e:	2308      	movs	r3, #8
 8005a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a34:	e0a1      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a36:	2310      	movs	r3, #16
 8005a38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3c:	e09d      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a4a      	ldr	r2, [pc, #296]	@ (8005b6c <UART_SetConfig+0x2f0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d125      	bne.n	8005a94 <UART_SetConfig+0x218>
 8005a48:	4b45      	ldr	r3, [pc, #276]	@ (8005b60 <UART_SetConfig+0x2e4>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a52:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a54:	d016      	beq.n	8005a84 <UART_SetConfig+0x208>
 8005a56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a58:	d818      	bhi.n	8005a8c <UART_SetConfig+0x210>
 8005a5a:	2b80      	cmp	r3, #128	@ 0x80
 8005a5c:	d00a      	beq.n	8005a74 <UART_SetConfig+0x1f8>
 8005a5e:	2b80      	cmp	r3, #128	@ 0x80
 8005a60:	d814      	bhi.n	8005a8c <UART_SetConfig+0x210>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <UART_SetConfig+0x1f0>
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d008      	beq.n	8005a7c <UART_SetConfig+0x200>
 8005a6a:	e00f      	b.n	8005a8c <UART_SetConfig+0x210>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a72:	e082      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a74:	2302      	movs	r3, #2
 8005a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a7a:	e07e      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a82:	e07a      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a84:	2308      	movs	r3, #8
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a8a:	e076      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a8c:	2310      	movs	r3, #16
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a92:	e072      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a35      	ldr	r2, [pc, #212]	@ (8005b70 <UART_SetConfig+0x2f4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d12a      	bne.n	8005af4 <UART_SetConfig+0x278>
 8005a9e:	4b30      	ldr	r3, [pc, #192]	@ (8005b60 <UART_SetConfig+0x2e4>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005aac:	d01a      	beq.n	8005ae4 <UART_SetConfig+0x268>
 8005aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab2:	d81b      	bhi.n	8005aec <UART_SetConfig+0x270>
 8005ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ab8:	d00c      	beq.n	8005ad4 <UART_SetConfig+0x258>
 8005aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005abe:	d815      	bhi.n	8005aec <UART_SetConfig+0x270>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <UART_SetConfig+0x250>
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ac8:	d008      	beq.n	8005adc <UART_SetConfig+0x260>
 8005aca:	e00f      	b.n	8005aec <UART_SetConfig+0x270>
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad2:	e052      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ada:	e04e      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005adc:	2304      	movs	r3, #4
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae2:	e04a      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aea:	e046      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005aec:	2310      	movs	r3, #16
 8005aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af2:	e042      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a17      	ldr	r2, [pc, #92]	@ (8005b58 <UART_SetConfig+0x2dc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d13a      	bne.n	8005b74 <UART_SetConfig+0x2f8>
 8005afe:	4b18      	ldr	r3, [pc, #96]	@ (8005b60 <UART_SetConfig+0x2e4>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b0c:	d01a      	beq.n	8005b44 <UART_SetConfig+0x2c8>
 8005b0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b12:	d81b      	bhi.n	8005b4c <UART_SetConfig+0x2d0>
 8005b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b18:	d00c      	beq.n	8005b34 <UART_SetConfig+0x2b8>
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1e:	d815      	bhi.n	8005b4c <UART_SetConfig+0x2d0>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <UART_SetConfig+0x2b0>
 8005b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b28:	d008      	beq.n	8005b3c <UART_SetConfig+0x2c0>
 8005b2a:	e00f      	b.n	8005b4c <UART_SetConfig+0x2d0>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	e022      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005b34:	2302      	movs	r3, #2
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3a:	e01e      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b42:	e01a      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005b44:	2308      	movs	r3, #8
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e016      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005b4c:	2310      	movs	r3, #16
 8005b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b52:	e012      	b.n	8005b7a <UART_SetConfig+0x2fe>
 8005b54:	cfff69f3 	.word	0xcfff69f3
 8005b58:	40008000 	.word	0x40008000
 8005b5c:	40013800 	.word	0x40013800
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40004400 	.word	0x40004400
 8005b68:	40004800 	.word	0x40004800
 8005b6c:	40004c00 	.word	0x40004c00
 8005b70:	40005000 	.word	0x40005000
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4aae      	ldr	r2, [pc, #696]	@ (8005e38 <UART_SetConfig+0x5bc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	f040 8097 	bne.w	8005cb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b8a:	2b08      	cmp	r3, #8
 8005b8c:	d823      	bhi.n	8005bd6 <UART_SetConfig+0x35a>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0x318>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bd7 	.word	0x08005bd7
 8005b9c:	08005bc1 	.word	0x08005bc1
 8005ba0:	08005bd7 	.word	0x08005bd7
 8005ba4:	08005bc7 	.word	0x08005bc7
 8005ba8:	08005bd7 	.word	0x08005bd7
 8005bac:	08005bd7 	.word	0x08005bd7
 8005bb0:	08005bd7 	.word	0x08005bd7
 8005bb4:	08005bcf 	.word	0x08005bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f7fd febc 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bbe:	e010      	b.n	8005be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc0:	4b9e      	ldr	r3, [pc, #632]	@ (8005e3c <UART_SetConfig+0x5c0>)
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bc4:	e00d      	b.n	8005be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bc6:	f7fd fe4b 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bcc:	e009      	b.n	8005be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bd4:	e005      	b.n	8005be2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8130 	beq.w	8005e4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	4a94      	ldr	r2, [pc, #592]	@ (8005e40 <UART_SetConfig+0x5c4>)
 8005bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d305      	bcc.n	8005c1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d903      	bls.n	8005c22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c20:	e113      	b.n	8005e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	2200      	movs	r2, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	60fa      	str	r2, [r7, #12]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	4a84      	ldr	r2, [pc, #528]	@ (8005e40 <UART_SetConfig+0x5c4>)
 8005c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2200      	movs	r2, #0
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c44:	f7fa fae8 	bl	8000218 <__aeabi_uldivmod>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	020b      	lsls	r3, r1, #8
 8005c5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c5e:	0202      	lsls	r2, r0, #8
 8005c60:	6979      	ldr	r1, [r7, #20]
 8005c62:	6849      	ldr	r1, [r1, #4]
 8005c64:	0849      	lsrs	r1, r1, #1
 8005c66:	2000      	movs	r0, #0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	4605      	mov	r5, r0
 8005c6c:	eb12 0804 	adds.w	r8, r2, r4
 8005c70:	eb43 0905 	adc.w	r9, r3, r5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	469a      	mov	sl, r3
 8005c7c:	4693      	mov	fp, r2
 8005c7e:	4652      	mov	r2, sl
 8005c80:	465b      	mov	r3, fp
 8005c82:	4640      	mov	r0, r8
 8005c84:	4649      	mov	r1, r9
 8005c86:	f7fa fac7 	bl	8000218 <__aeabi_uldivmod>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4613      	mov	r3, r2
 8005c90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c98:	d308      	bcc.n	8005cac <UART_SetConfig+0x430>
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca0:	d204      	bcs.n	8005cac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	e0ce      	b.n	8005e4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cb2:	e0ca      	b.n	8005e4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cbc:	d166      	bne.n	8005d8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d827      	bhi.n	8005d16 <UART_SetConfig+0x49a>
 8005cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <UART_SetConfig+0x450>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d01 	.word	0x08005d01
 8005cd8:	08005d17 	.word	0x08005d17
 8005cdc:	08005d07 	.word	0x08005d07
 8005ce0:	08005d17 	.word	0x08005d17
 8005ce4:	08005d17 	.word	0x08005d17
 8005ce8:	08005d17 	.word	0x08005d17
 8005cec:	08005d0f 	.word	0x08005d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fd fe20 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cf6:	e014      	b.n	8005d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7fd fe32 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cfe:	e010      	b.n	8005d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d00:	4b4e      	ldr	r3, [pc, #312]	@ (8005e3c <UART_SetConfig+0x5c0>)
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d04:	e00d      	b.n	8005d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fd fdab 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8005d0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d0c:	e009      	b.n	8005d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d14:	e005      	b.n	8005d22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8090 	beq.w	8005e4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	4a44      	ldr	r2, [pc, #272]	@ (8005e40 <UART_SetConfig+0x5c4>)
 8005d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d3c:	005a      	lsls	r2, r3, #1
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	085b      	lsrs	r3, r3, #1
 8005d44:	441a      	add	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	2b0f      	cmp	r3, #15
 8005d54:	d916      	bls.n	8005d84 <UART_SetConfig+0x508>
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d5c:	d212      	bcs.n	8005d84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f023 030f 	bic.w	r3, r3, #15
 8005d66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	f003 0307 	and.w	r3, r3, #7
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	8bfb      	ldrh	r3, [r7, #30]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	8bfa      	ldrh	r2, [r7, #30]
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e062      	b.n	8005e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d8a:	e05e      	b.n	8005e4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d828      	bhi.n	8005de6 <UART_SetConfig+0x56a>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0x520>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	08005de7 	.word	0x08005de7
 8005dac:	08005dd7 	.word	0x08005dd7
 8005db0:	08005de7 	.word	0x08005de7
 8005db4:	08005de7 	.word	0x08005de7
 8005db8:	08005de7 	.word	0x08005de7
 8005dbc:	08005ddf 	.word	0x08005ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dc0:	f7fd fdb8 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dc6:	e014      	b.n	8005df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7fd fdca 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dce:	e010      	b.n	8005df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e3c <UART_SetConfig+0x5c0>)
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd4:	e00d      	b.n	8005df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dd6:	f7fd fd43 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 8005dda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ddc:	e009      	b.n	8005df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005de2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005de4:	e005      	b.n	8005df2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005df0:	bf00      	nop
    }

    if (pclk != 0U)
 8005df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d028      	beq.n	8005e4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	4a10      	ldr	r2, [pc, #64]	@ (8005e40 <UART_SetConfig+0x5c4>)
 8005dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e02:	461a      	mov	r2, r3
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	085b      	lsrs	r3, r3, #1
 8005e10:	441a      	add	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b0f      	cmp	r3, #15
 8005e20:	d910      	bls.n	8005e44 <UART_SetConfig+0x5c8>
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e28:	d20c      	bcs.n	8005e44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60da      	str	r2, [r3, #12]
 8005e34:	e009      	b.n	8005e4a <UART_SetConfig+0x5ce>
 8005e36:	bf00      	nop
 8005e38:	40008000 	.word	0x40008000
 8005e3c:	00f42400 	.word	0x00f42400
 8005e40:	08061764 	.word	0x08061764
      }
      else
      {
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2200      	movs	r2, #0
 8005e64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3730      	adds	r7, #48	@ 0x30
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	f003 0302 	and.w	r3, r3, #2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01a      	beq.n	8005f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f72:	d10a      	bne.n	8005f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	605a      	str	r2, [r3, #4]
  }
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b098      	sub	sp, #96	@ 0x60
 8005fba:	af02      	add	r7, sp, #8
 8005fbc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fc6:	f7fb fdad 	bl	8001b24 <HAL_GetTick>
 8005fca:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d12f      	bne.n	800603a <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f88e 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d022      	beq.n	800603a <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006008:	653b      	str	r3, [r7, #80]	@ 0x50
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006012:	647b      	str	r3, [r7, #68]	@ 0x44
 8006014:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006018:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e6      	bne.n	8005ff4 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e063      	b.n	8006102 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b04      	cmp	r3, #4
 8006046:	d149      	bne.n	80060dc <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006050:	2200      	movs	r2, #0
 8006052:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f857 	bl	800610a <UART_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d03c      	beq.n	80060dc <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
 8006082:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e6      	bne.n	8006062 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3308      	adds	r3, #8
 800609a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0301 	bic.w	r3, r3, #1
 80060aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3308      	adds	r3, #8
 80060b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060b4:	61fa      	str	r2, [r7, #28]
 80060b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	69b9      	ldr	r1, [r7, #24]
 80060ba:	69fa      	ldr	r2, [r7, #28]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	617b      	str	r3, [r7, #20]
   return(result);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e012      	b.n	8006102 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3758      	adds	r7, #88	@ 0x58
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611a:	e04f      	b.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006122:	d04b      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006124:	f7fb fcfe 	bl	8001b24 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	429a      	cmp	r2, r3
 8006132:	d302      	bcc.n	800613a <UART_WaitOnFlagUntilTimeout+0x30>
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e04e      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d037      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b80      	cmp	r3, #128	@ 0x80
 8006150:	d034      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d031      	beq.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f003 0308 	and.w	r3, r3, #8
 8006162:	2b08      	cmp	r3, #8
 8006164:	d110      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2208      	movs	r2, #8
 800616c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f838 	bl	80061e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2208      	movs	r2, #8
 8006178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e029      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006196:	d111      	bne.n	80061bc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f81e 	bl	80061e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e00f      	b.n	80061dc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69da      	ldr	r2, [r3, #28]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d0a0      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b095      	sub	sp, #84	@ 0x54
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006200:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620a:	643b      	str	r3, [r7, #64]	@ 0x40
 800620c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006210:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e6      	bne.n	80061ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3308      	adds	r3, #8
 8006224:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	61fb      	str	r3, [r7, #28]
   return(result);
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006248:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624a:	e841 2300 	strex	r3, r2, [r1]
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e3      	bne.n	800621e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d118      	bne.n	8006290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	e853 3f00 	ldrex	r3, [r3]
 800626a:	60bb      	str	r3, [r7, #8]
   return(result);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0310 	bic.w	r3, r3, #16
 8006272:	647b      	str	r3, [r7, #68]	@ 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6979      	ldr	r1, [r7, #20]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	613b      	str	r3, [r7, #16]
   return(result);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e6      	bne.n	800625e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062a4:	bf00      	nop
 80062a6:	3754      	adds	r7, #84	@ 0x54
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e027      	b.n	8006314 <HAL_UARTEx_DisableFifoMode+0x66>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	@ 0x24
 80062d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006332:	2302      	movs	r3, #2
 8006334:	e02d      	b.n	8006392 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2224      	movs	r2, #36	@ 0x24
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f850 	bl	8006418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e02d      	b.n	800640e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2224      	movs	r2, #36	@ 0x24
 80063be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f812 	bl	8006418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006424:	2b00      	cmp	r3, #0
 8006426:	d108      	bne.n	800643a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006438:	e031      	b.n	800649e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800643a:	2308      	movs	r3, #8
 800643c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800643e:	2308      	movs	r3, #8
 8006440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	0e5b      	lsrs	r3, r3, #25
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	0f5b      	lsrs	r3, r3, #29
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0307 	and.w	r3, r3, #7
 8006460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006462:	7bbb      	ldrb	r3, [r7, #14]
 8006464:	7b3a      	ldrb	r2, [r7, #12]
 8006466:	4910      	ldr	r1, [pc, #64]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x90>)
 8006468:	5c8a      	ldrb	r2, [r1, r2]
 800646a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800646e:	7b3a      	ldrb	r2, [r7, #12]
 8006470:	490e      	ldr	r1, [pc, #56]	@ (80064ac <UARTEx_SetNbDataToProcess+0x94>)
 8006472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006474:	fb93 f3f2 	sdiv	r3, r3, r2
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	7b7a      	ldrb	r2, [r7, #13]
 8006484:	4908      	ldr	r1, [pc, #32]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x90>)
 8006486:	5c8a      	ldrb	r2, [r1, r2]
 8006488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800648c:	7b7a      	ldrb	r2, [r7, #13]
 800648e:	4907      	ldr	r1, [pc, #28]	@ (80064ac <UARTEx_SetNbDataToProcess+0x94>)
 8006490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006492:	fb93 f3f2 	sdiv	r3, r3, r2
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800649e:	bf00      	nop
 80064a0:	3714      	adds	r7, #20
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc80      	pop	{r7}
 80064a6:	4770      	bx	lr
 80064a8:	0806177c 	.word	0x0806177c
 80064ac:	08061784 	.word	0x08061784

080064b0 <memset>:
 80064b0:	4402      	add	r2, r0
 80064b2:	4603      	mov	r3, r0
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d100      	bne.n	80064ba <memset+0xa>
 80064b8:	4770      	bx	lr
 80064ba:	f803 1b01 	strb.w	r1, [r3], #1
 80064be:	e7f9      	b.n	80064b4 <memset+0x4>

080064c0 <__libc_init_array>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	4d0d      	ldr	r5, [pc, #52]	@ (80064f8 <__libc_init_array+0x38>)
 80064c4:	4c0d      	ldr	r4, [pc, #52]	@ (80064fc <__libc_init_array+0x3c>)
 80064c6:	1b64      	subs	r4, r4, r5
 80064c8:	10a4      	asrs	r4, r4, #2
 80064ca:	2600      	movs	r6, #0
 80064cc:	42a6      	cmp	r6, r4
 80064ce:	d109      	bne.n	80064e4 <__libc_init_array+0x24>
 80064d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006500 <__libc_init_array+0x40>)
 80064d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006504 <__libc_init_array+0x44>)
 80064d4:	f000 f818 	bl	8006508 <_init>
 80064d8:	1b64      	subs	r4, r4, r5
 80064da:	10a4      	asrs	r4, r4, #2
 80064dc:	2600      	movs	r6, #0
 80064de:	42a6      	cmp	r6, r4
 80064e0:	d105      	bne.n	80064ee <__libc_init_array+0x2e>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e8:	4798      	blx	r3
 80064ea:	3601      	adds	r6, #1
 80064ec:	e7ee      	b.n	80064cc <__libc_init_array+0xc>
 80064ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f2:	4798      	blx	r3
 80064f4:	3601      	adds	r6, #1
 80064f6:	e7f2      	b.n	80064de <__libc_init_array+0x1e>
 80064f8:	08061794 	.word	0x08061794
 80064fc:	08061794 	.word	0x08061794
 8006500:	08061794 	.word	0x08061794
 8006504:	08061798 	.word	0x08061798

08006508 <_init>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr

08006514 <_fini>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr
