
SimuladorHSWIM_V2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000727bc  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08078cac  08078cac  0007a190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08078cac  08078cac  00079cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08078cb4  08078cb4  0007a190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08078cb4  08078cb4  00079cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08078cb8  08078cb8  00079cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  08078cbc  0007a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000190  08078e4c  0007a190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  08078e4c  0007a688  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0007a190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001722a  00000000  00000000  0007a1ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eea  00000000  00000000  000913e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  000942d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f16  00000000  00000000  00095630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275f0  00000000  00000000  00096546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd9  00000000  00000000  000bdb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100b19  00000000  00000000  000d480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d5328  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  001d536c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001da518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064d8 	.word	0x080064d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	080064d8 	.word	0x080064d8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <FWC_Start>:


ArrayDac_TypeDef *DACs_FWC = Vehicle1;
IWDG_HandleTypeDef hiwdg;

void FWC_Start(const ArrayDac_TypeDef *pD){
 8000544:	b590      	push	{r4, r7, lr}
 8000546:	b087      	sub	sp, #28
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMDAC; ++i) {
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	e01b      	b.n	800058a <FWC_Start+0x46>
		HAL_DAC_Start_DMA(pD[i].pDAC, pD[i].channel, pD[i].pDATA, pD[i].arrayLength, ALIGN12R);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	6818      	ldr	r0, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	4413      	add	r3, r2
 8000564:	6859      	ldr	r1, [r3, #4]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	689c      	ldr	r4, [r3, #8]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	011b      	lsls	r3, r3, #4
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	2200      	movs	r2, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	4622      	mov	r2, r4
 8000580:	f001 fc12 	bl	8001da8 <HAL_DAC_Start_DMA>
	for (int i = 0; i < NUMDAC; ++i) {
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b05      	cmp	r3, #5
 800058e:	dde0      	ble.n	8000552 <FWC_Start+0xe>
	}
}
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	bd90      	pop	{r4, r7, pc}
	...

0800059c <SysInit>:

void SysInit(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	LOG_Msg("Simulador HSWIM.\r\n", 18);
 80005a0:	2112      	movs	r1, #18
 80005a2:	4832      	ldr	r0, [pc, #200]	@ (800066c <SysInit+0xd0>)
 80005a4:	f000 f8dc 	bl	8000760 <LOG_Msg>

	LOG_Msg("Reset: ",7);
 80005a8:	2107      	movs	r1, #7
 80005aa:	4831      	ldr	r0, [pc, #196]	@ (8000670 <SysInit+0xd4>)
 80005ac:	f000 f8d8 	bl	8000760 <LOG_Msg>
	__PRINT_RESET();
 80005b0:	4b30      	ldr	r3, [pc, #192]	@ (8000674 <SysInit+0xd8>)
 80005b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	da04      	bge.n	80005c4 <SysInit+0x28>
 80005ba:	210c      	movs	r1, #12
 80005bc:	482e      	ldr	r0, [pc, #184]	@ (8000678 <SysInit+0xdc>)
 80005be:	f000 f8cf 	bl	8000760 <LOG_Msg>
 80005c2:	e027      	b.n	8000614 <SysInit+0x78>
 80005c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <SysInit+0xd8>)
 80005c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <SysInit+0x40>
 80005d2:	2117      	movs	r1, #23
 80005d4:	4829      	ldr	r0, [pc, #164]	@ (800067c <SysInit+0xe0>)
 80005d6:	f000 f8c3 	bl	8000760 <LOG_Msg>
 80005da:	e01b      	b.n	8000614 <SysInit+0x78>
 80005dc:	4b25      	ldr	r3, [pc, #148]	@ (8000674 <SysInit+0xd8>)
 80005de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <SysInit+0x58>
 80005ea:	210c      	movs	r1, #12
 80005ec:	4824      	ldr	r0, [pc, #144]	@ (8000680 <SysInit+0xe4>)
 80005ee:	f000 f8b7 	bl	8000760 <LOG_Msg>
 80005f2:	e00f      	b.n	8000614 <SysInit+0x78>
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <SysInit+0xd8>)
 80005f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <SysInit+0x70>
 8000602:	210b      	movs	r1, #11
 8000604:	481f      	ldr	r0, [pc, #124]	@ (8000684 <SysInit+0xe8>)
 8000606:	f000 f8ab 	bl	8000760 <LOG_Msg>
 800060a:	e003      	b.n	8000614 <SysInit+0x78>
 800060c:	210a      	movs	r1, #10
 800060e:	481e      	ldr	r0, [pc, #120]	@ (8000688 <SysInit+0xec>)
 8000610:	f000 f8a6 	bl	8000760 <LOG_Msg>

	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <SysInit+0xd8>)
 8000616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800061a:	4a16      	ldr	r2, [pc, #88]	@ (8000674 <SysInit+0xd8>)
 800061c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

	HAL_TIM_Base_Start(&htim8);
 8000624:	4819      	ldr	r0, [pc, #100]	@ (800068c <SysInit+0xf0>)
 8000626:	f003 fc85 	bl	8003f34 <HAL_TIM_Base_Start>
	HAL_TIMEx_OnePulseN_Start(&htim8, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	4817      	ldr	r0, [pc, #92]	@ (800068c <SysInit+0xf0>)
 800062e:	f004 fe4f 	bl	80052d0 <HAL_TIMEx_OnePulseN_Start>

	LEDsInit();
 8000632:	f000 f86d 	bl	8000710 <LEDsInit>
	PrintStatus();
 8000636:	f000 f8e9 	bl	800080c <PrintStatus>

	HAL_TIM_Base_Start(&htim2);
 800063a:	4815      	ldr	r0, [pc, #84]	@ (8000690 <SysInit+0xf4>)
 800063c:	f003 fc7a 	bl	8003f34 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000640:	4814      	ldr	r0, [pc, #80]	@ (8000694 <SysInit+0xf8>)
 8000642:	f003 fce5 	bl	8004010 <HAL_TIM_Base_Start_IT>
	HAL_OPAMP_Start(&hopamp1);
 8000646:	4814      	ldr	r0, [pc, #80]	@ (8000698 <SysInit+0xfc>)
 8000648:	f002 fbc2 	bl	8002dd0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 800064c:	4813      	ldr	r0, [pc, #76]	@ (800069c <SysInit+0x100>)
 800064e:	f002 fbbf 	bl	8002dd0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp4);
 8000652:	4813      	ldr	r0, [pc, #76]	@ (80006a0 <SysInit+0x104>)
 8000654:	f002 fbbc 	bl	8002dd0 <HAL_OPAMP_Start>
	tick_status = HAL_GetTick();
 8000658:	f001 fa4c 	bl	8001af4 <HAL_GetTick>
 800065c:	4603      	mov	r3, r0
 800065e:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <SysInit+0x108>)
 8000660:	6013      	str	r3, [r2, #0]

	WatchdogInit();
 8000662:	f000 f83b 	bl	80006dc <WatchdogInit>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	080064f0 	.word	0x080064f0
 8000670:	08006504 	.word	0x08006504
 8000674:	40021000 	.word	0x40021000
 8000678:	0800650c 	.word	0x0800650c
 800067c:	0800651c 	.word	0x0800651c
 8000680:	08006534 	.word	0x08006534
 8000684:	08006544 	.word	0x08006544
 8000688:	08006550 	.word	0x08006550
 800068c:	200005a4 	.word	0x200005a4
 8000690:	2000050c 	.word	0x2000050c
 8000694:	20000558 	.word	0x20000558
 8000698:	20000458 	.word	0x20000458
 800069c:	20000494 	.word	0x20000494
 80006a0:	200004d0 	.word	0x200004d0
 80006a4:	200001b4 	.word	0x200001b4

080006a8 <LoopMain>:

void LoopMain(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - tick_status >= 6000) { // 6 segundos
 80006ac:	f001 fa22 	bl	8001af4 <HAL_GetTick>
 80006b0:	4602      	mov	r2, r0
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <LoopMain+0x30>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	f241 726f 	movw	r2, #5999	@ 0x176f
 80006bc:	4293      	cmp	r3, r2
 80006be:	d906      	bls.n	80006ce <LoopMain+0x26>
		tick_status = HAL_GetTick();
 80006c0:	f001 fa18 	bl	8001af4 <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <LoopMain+0x30>)
 80006c8:	6013      	str	r3, [r2, #0]
		PrintStatus();
 80006ca:	f000 f89f 	bl	800080c <PrintStatus>
	}
	WatchdogReset();
 80006ce:	f000 f83d 	bl	800074c <WatchdogReset>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200001b4 	.word	0x200001b4

080006dc <WatchdogInit>:

void WatchdogInit(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	hiwdg.Instance = IWDG;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <WatchdogInit+0x2c>)
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <WatchdogInit+0x30>)
 80006e4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <WatchdogInit+0x2c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 999;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <WatchdogInit+0x2c>)
 80006ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006f2:	609a      	str	r2, [r3, #8]
	hiwdg.Init.Window = 0x0FFE;
 80006f4:	4b04      	ldr	r3, [pc, #16]	@ (8000708 <WatchdogInit+0x2c>)
 80006f6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80006fa:	60da      	str	r2, [r3, #12]

	HAL_IWDG_Init(&hiwdg);
 80006fc:	4802      	ldr	r0, [pc, #8]	@ (8000708 <WatchdogInit+0x2c>)
 80006fe:	f000 fd31 	bl	8001164 <HAL_IWDG_Init>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	200001b8 	.word	0x200001b8
 800070c:	40003000 	.word	0x40003000

08000710 <LEDsInit>:

void LEDsInit(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	e00c      	b.n	8000736 <LEDsInit+0x26>
		HAL_Delay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000720:	f001 f9f2 	bl	8001b08 <HAL_Delay>
		__PWM_PULSE();
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <LEDsInit+0x38>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <LEDsInit+0x38>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < 4; i++){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b03      	cmp	r3, #3
 800073a:	ddef      	ble.n	800071c <LEDsInit+0xc>
	}
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40013400 	.word	0x40013400

0800074c <WatchdogReset>:

void WatchdogReset(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg);
 8000750:	4802      	ldr	r0, [pc, #8]	@ (800075c <WatchdogReset+0x10>)
 8000752:	f000 fd56 	bl	8001202 <HAL_IWDG_Refresh>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200001b8 	.word	0x200001b8

08000760 <LOG_Msg>:

void LOG_Msg(char *pMsg, uint8_t size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart5, (uint8_t *) pMsg, size, HAL_MAX_DELAY);
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	b29a      	uxth	r2, r3
 8000770:	f04f 33ff 	mov.w	r3, #4294967295
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	4803      	ldr	r0, [pc, #12]	@ (8000784 <LOG_Msg+0x24>)
 8000778:	f004 ffd9 	bl	800572e <HAL_UART_Transmit>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200005f0 	.word	0x200005f0

08000788 <TIM3_Callback>:

void TIM3_Callback(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	flag_button = 0;
 800078c:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <TIM3_Callback+0x28>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
	id = (id + 1)%4;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <TIM3_Callback+0x2c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <TIM3_Callback+0x2c>)
 800079e:	6013      	str	r3, [r2, #0]
	FWC_Start(DACs_FWC);
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <TIM3_Callback+0x30>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fecd 	bl	8000544 <FWC_Start>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200001b0 	.word	0x200001b0
 80007b4:	200001ac 	.word	0x200001ac
 80007b8:	20000180 	.word	0x20000180

080007bc <EXTI_ButtonIRQHandler>:

void EXTI_ButtonIRQHandler(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	if(!flag_button){
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <EXTI_ButtonIRQHandler+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d112      	bne.n	80007ee <EXTI_ButtonIRQHandler+0x32>
		__PWM_PULSE();
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <EXTI_ButtonIRQHandler+0x44>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000800 <EXTI_ButtonIRQHandler+0x44>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6013      	str	r3, [r2, #0]
		id = (id + 1)%5;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <EXTI_ButtonIRQHandler+0x48>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	1c59      	adds	r1, r3, #1
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <EXTI_ButtonIRQHandler+0x4c>)
 80007dc:	fba3 2301 	umull	r2, r3, r3, r1
 80007e0:	089a      	lsrs	r2, r3, #2
 80007e2:	4613      	mov	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	1aca      	subs	r2, r1, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <EXTI_ButtonIRQHandler+0x48>)
 80007ec:	601a      	str	r2, [r3, #0]
	}
	flag_button = 1;
 80007ee:	4b03      	ldr	r3, [pc, #12]	@ (80007fc <EXTI_ButtonIRQHandler+0x40>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200001b0 	.word	0x200001b0
 8000800:	40013400 	.word	0x40013400
 8000804:	200001ac 	.word	0x200001ac
 8000808:	cccccccd 	.word	0xcccccccd

0800080c <PrintStatus>:

void PrintStatus(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	switch(id){
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <PrintStatus+0xc8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d85b      	bhi.n	80008d0 <PrintStatus+0xc4>
 8000818:	a201      	add	r2, pc, #4	@ (adr r2, 8000820 <PrintStatus+0x14>)
 800081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	08000831 	.word	0x08000831
 8000824:	08000859 	.word	0x08000859
 8000828:	08000881 	.word	0x08000881
 800082c:	080008a9 	.word	0x080008a9
		case 0:
			DACs_FWC = Vehicle1;
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <PrintStatus+0xcc>)
 8000832:	4a2a      	ldr	r2, [pc, #168]	@ (80008dc <PrintStatus+0xd0>)
 8000834:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 8000836:	2120      	movs	r1, #32
 8000838:	4829      	ldr	r0, [pc, #164]	@ (80008e0 <PrintStatus+0xd4>)
 800083a:	f7ff ff91 	bl	8000760 <LOG_Msg>
			LOG_Msg("1' Vehicle: 3c\r\n",16);
 800083e:	2110      	movs	r1, #16
 8000840:	4828      	ldr	r0, [pc, #160]	@ (80008e4 <PrintStatus+0xd8>)
 8000842:	f7ff ff8d 	bl	8000760 <LOG_Msg>
			LOG_Msg("PBT: 25000 kg\r\n",15);
 8000846:	210f      	movs	r1, #15
 8000848:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <PrintStatus+0xdc>)
 800084a:	f7ff ff89 	bl	8000760 <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 800084e:	2110      	movs	r1, #16
 8000850:	4826      	ldr	r0, [pc, #152]	@ (80008ec <PrintStatus+0xe0>)
 8000852:	f7ff ff85 	bl	8000760 <LOG_Msg>
			break;
 8000856:	e03b      	b.n	80008d0 <PrintStatus+0xc4>
		case 1:
			DACs_FWC = Vehicle2;
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <PrintStatus+0xcc>)
 800085a:	4a25      	ldr	r2, [pc, #148]	@ (80008f0 <PrintStatus+0xe4>)
 800085c:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 800085e:	2120      	movs	r1, #32
 8000860:	481f      	ldr	r0, [pc, #124]	@ (80008e0 <PrintStatus+0xd4>)
 8000862:	f7ff ff7d 	bl	8000760 <LOG_Msg>
			LOG_Msg("2' Vehicle: 2s3\r\n",17);
 8000866:	2111      	movs	r1, #17
 8000868:	4822      	ldr	r0, [pc, #136]	@ (80008f4 <PrintStatus+0xe8>)
 800086a:	f7ff ff79 	bl	8000760 <LOG_Msg>
			LOG_Msg("PBT: 45000 kg\r\n",15);
 800086e:	210f      	movs	r1, #15
 8000870:	4821      	ldr	r0, [pc, #132]	@ (80008f8 <PrintStatus+0xec>)
 8000872:	f7ff ff75 	bl	8000760 <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 8000876:	2110      	movs	r1, #16
 8000878:	481c      	ldr	r0, [pc, #112]	@ (80008ec <PrintStatus+0xe0>)
 800087a:	f7ff ff71 	bl	8000760 <LOG_Msg>
			break;
 800087e:	e027      	b.n	80008d0 <PrintStatus+0xc4>
		case 2:
			DACs_FWC = Vehicle3;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <PrintStatus+0xcc>)
 8000882:	4a1e      	ldr	r2, [pc, #120]	@ (80008fc <PrintStatus+0xf0>)
 8000884:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 8000886:	2120      	movs	r1, #32
 8000888:	4815      	ldr	r0, [pc, #84]	@ (80008e0 <PrintStatus+0xd4>)
 800088a:	f7ff ff69 	bl	8000760 <LOG_Msg>
			LOG_Msg("3' Vehicle: 3s3\r\n",17);
 800088e:	2111      	movs	r1, #17
 8000890:	481b      	ldr	r0, [pc, #108]	@ (8000900 <PrintStatus+0xf4>)
 8000892:	f7ff ff65 	bl	8000760 <LOG_Msg>
			LOG_Msg("PBT: 55000 kg\r\n",15);
 8000896:	210f      	movs	r1, #15
 8000898:	481a      	ldr	r0, [pc, #104]	@ (8000904 <PrintStatus+0xf8>)
 800089a:	f7ff ff61 	bl	8000760 <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n",16);
 800089e:	2110      	movs	r1, #16
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <PrintStatus+0xe0>)
 80008a2:	f7ff ff5d 	bl	8000760 <LOG_Msg>
			break;
 80008a6:	e013      	b.n	80008d0 <PrintStatus+0xc4>
		case 3:
			DACs_FWC = Vehicle4;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <PrintStatus+0xcc>)
 80008aa:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <PrintStatus+0xfc>)
 80008ac:	601a      	str	r2, [r3, #0]
			LOG_Msg("******************************\r\n",32);
 80008ae:	2120      	movs	r1, #32
 80008b0:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <PrintStatus+0xd4>)
 80008b2:	f7ff ff55 	bl	8000760 <LOG_Msg>
			LOG_Msg("4' Vehicle: 4t3\r\n",17);
 80008b6:	2111      	movs	r1, #17
 80008b8:	4814      	ldr	r0, [pc, #80]	@ (800090c <PrintStatus+0x100>)
 80008ba:	f7ff ff51 	bl	8000760 <LOG_Msg>
			LOG_Msg("PBT: 65000 kg\r\n",15);
 80008be:	210f      	movs	r1, #15
 80008c0:	4813      	ldr	r0, [pc, #76]	@ (8000910 <PrintStatus+0x104>)
 80008c2:	f7ff ff4d 	bl	8000760 <LOG_Msg>
			LOG_Msg("Speed: 90 km/h\r\n", 16);
 80008c6:	2110      	movs	r1, #16
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <PrintStatus+0xe0>)
 80008ca:	f7ff ff49 	bl	8000760 <LOG_Msg>
			break;
 80008ce:	bf00      	nop
	}
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001ac 	.word	0x200001ac
 80008d8:	20000180 	.word	0x20000180
 80008dc:	20000000 	.word	0x20000000
 80008e0:	0800655c 	.word	0x0800655c
 80008e4:	08006580 	.word	0x08006580
 80008e8:	08006594 	.word	0x08006594
 80008ec:	080065a4 	.word	0x080065a4
 80008f0:	20000060 	.word	0x20000060
 80008f4:	080065b8 	.word	0x080065b8
 80008f8:	080065cc 	.word	0x080065cc
 80008fc:	200000c0 	.word	0x200000c0
 8000900:	080065dc 	.word	0x080065dc
 8000904:	080065f0 	.word	0x080065f0
 8000908:	20000120 	.word	0x20000120
 800090c:	08006600 	.word	0x08006600
 8000910:	08006614 	.word	0x08006614

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f001 f880 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091c:	f000 f81f 	bl	800095e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000920:	f000 fbb4 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 8000924:	f000 fb60 	bl	8000fe8 <MX_DMA_Init>
  MX_DAC1_Init();
 8000928:	f000 f864 	bl	80009f4 <MX_DAC1_Init>
  MX_DAC2_Init();
 800092c:	f000 f8a6 	bl	8000a7c <MX_DAC2_Init>
  MX_DAC3_Init();
 8000930:	f000 f8de 	bl	8000af0 <MX_DAC3_Init>
  MX_OPAMP1_Init();
 8000934:	f000 f95a 	bl	8000bec <MX_OPAMP1_Init>
  MX_OPAMP3_Init();
 8000938:	f000 f97e 	bl	8000c38 <MX_OPAMP3_Init>
  MX_TIM2_Init();
 800093c:	f000 f9c8 	bl	8000cd0 <MX_TIM2_Init>
  MX_DAC4_Init();
 8000940:	f000 f91a 	bl	8000b78 <MX_DAC4_Init>
  MX_OPAMP4_Init();
 8000944:	f000 f99e 	bl	8000c84 <MX_OPAMP4_Init>
  MX_TIM3_Init();
 8000948:	f000 fa0e 	bl	8000d68 <MX_TIM3_Init>
  MX_UART5_Init();
 800094c:	f000 fb00 	bl	8000f50 <MX_UART5_Init>
  MX_TIM8_Init();
 8000950:	f000 fa5a 	bl	8000e08 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  SysInit();
 8000954:	f7ff fe22 	bl	800059c <SysInit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LoopMain();
 8000958:	f7ff fea6 	bl	80006a8 <LoopMain>
 800095c:	e7fc      	b.n	8000958 <main+0x44>

0800095e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b094      	sub	sp, #80	@ 0x50
 8000962:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000964:	f107 0318 	add.w	r3, r7, #24
 8000968:	2238      	movs	r2, #56	@ 0x38
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f005 fd87 	bl	8006480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000984:	f002 fa54 	bl	8002e30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000990:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000996:	2303      	movs	r3, #3
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800099a:	2302      	movs	r3, #2
 800099c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 32;
 800099e:	2320      	movs	r3, #32
 80009a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 faee 	bl	8002f94 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80009be:	f000 fbcb 	bl	8001158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80009ca:	2390      	movs	r3, #144	@ 0x90
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009ce:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2100      	movs	r1, #0
 80009dc:	4618      	mov	r0, r3
 80009de:	f002 fdeb 	bl	80035b8 <HAL_RCC_ClockConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80009e8:	f000 fbb6 	bl	8001158 <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	3750      	adds	r7, #80	@ 0x50
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	@ 0x30
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2230      	movs	r2, #48	@ 0x30
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fd3d 	bl	8006480 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_DAC1_Init+0x80>)
 8000a08:	4a1b      	ldr	r2, [pc, #108]	@ (8000a78 <MX_DAC1_Init+0x84>)
 8000a0a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a0c:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <MX_DAC1_Init+0x80>)
 8000a0e:	f001 f9a8 	bl	8001d62 <HAL_DAC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a18:	f000 fb9e 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <MX_DAC1_Init+0x80>)
 8000a48:	f001 fa9e 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000a52:	f000 fb81 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a56:	463b      	mov	r3, r7
 8000a58:	2210      	movs	r2, #16
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_DAC1_Init+0x80>)
 8000a5e:	f001 fa93 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000a68:	f000 fb76 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3730      	adds	r7, #48	@ 0x30
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	200001c8 	.word	0x200001c8
 8000a78:	50000800 	.word	0x50000800

08000a7c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08c      	sub	sp, #48	@ 0x30
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2230      	movs	r2, #48	@ 0x30
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f005 fcf9 	bl	8006480 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_DAC2_Init+0x6c>)
 8000a90:	4a16      	ldr	r2, [pc, #88]	@ (8000aec <MX_DAC2_Init+0x70>)
 8000a92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000a94:	4814      	ldr	r0, [pc, #80]	@ (8000ae8 <MX_DAC2_Init+0x6c>)
 8000a96:	f001 f964 	bl	8001d62 <HAL_DAC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000aa0:	f000 fb5a 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	4619      	mov	r1, r3
 8000ace:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <MX_DAC2_Init+0x6c>)
 8000ad0:	f001 fa5a 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000ada:	f000 fb3d 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	3730      	adds	r7, #48	@ 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001dc 	.word	0x200001dc
 8000aec:	50000c00 	.word	0x50000c00

08000af0 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2230      	movs	r2, #48	@ 0x30
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fcbf 	bl	8006480 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_DAC3_Init+0x80>)
 8000b04:	4a1b      	ldr	r2, [pc, #108]	@ (8000b74 <MX_DAC3_Init+0x84>)
 8000b06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8000b08:	4819      	ldr	r0, [pc, #100]	@ (8000b70 <MX_DAC3_Init+0x80>)
 8000b0a:	f001 f92a 	bl	8001d62 <HAL_DAC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000b14:	f000 fb20 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000b30:	2302      	movs	r3, #2
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_DAC3_Init+0x80>)
 8000b44:	f001 fa20 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000b4e:	f000 fb03 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2210      	movs	r2, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_DAC3_Init+0x80>)
 8000b5a:	f001 fa15 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC3_Init+0x78>
  {
    Error_Handler();
 8000b64:	f000 faf8 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	@ 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001f0 	.word	0x200001f0
 8000b74:	50001000 	.word	0x50001000

08000b78 <MX_DAC4_Init>:
  * @brief DAC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC4_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	@ 0x30
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC4_Init 0 */

  /* USER CODE END DAC4_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2230      	movs	r2, #48	@ 0x30
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f005 fc7b 	bl	8006480 <memset>

  /* USER CODE END DAC4_Init 1 */

  /** DAC Initialization
  */
  hdac4.Instance = DAC4;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_DAC4_Init+0x6c>)
 8000b8c:	4a16      	ldr	r2, [pc, #88]	@ (8000be8 <MX_DAC4_Init+0x70>)
 8000b8e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac4) != HAL_OK)
 8000b90:	4814      	ldr	r0, [pc, #80]	@ (8000be4 <MX_DAC4_Init+0x6c>)
 8000b92:	f001 f8e6 	bl	8001d62 <HAL_DAC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_DAC4_Init+0x28>
  {
    Error_Handler();
 8000b9c:	f000 fadc 	bl	8001158 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bb0:	2312      	movs	r3, #18
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac4, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MX_DAC4_Init+0x6c>)
 8000bcc:	f001 f9dc 	bl	8001f88 <HAL_DAC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DAC4_Init+0x62>
  {
    Error_Handler();
 8000bd6:	f000 fabf 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN DAC4_Init 2 */

  /* USER CODE END DAC4_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3730      	adds	r7, #48	@ 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000204 	.word	0x20000204
 8000be8:	50001400 	.word	0x50001400

08000bec <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <MX_OPAMP1_Init+0x48>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000bf8:	2280      	movs	r2, #128	@ 0x80
 8000bfa:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000bfe:	2260      	movs	r2, #96	@ 0x60
 8000c00:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000c04:	220c      	movs	r2, #12
 8000c06:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_OPAMP1_Init+0x44>)
 8000c1c:	f002 f808 	bl	8002c30 <HAL_OPAMP_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_OPAMP1_Init+0x3e>
  {
    Error_Handler();
 8000c26:	f000 fa97 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000458 	.word	0x20000458
 8000c34:	40010300 	.word	0x40010300

08000c38 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c3e:	4a10      	ldr	r2, [pc, #64]	@ (8000c80 <MX_OPAMP3_Init+0x48>)
 8000c40:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c4a:	2260      	movs	r2, #96	@ 0x60
 8000c4c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c50:	220c      	movs	r2, #12
 8000c52:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = DISABLE;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_OPAMP3_Init+0x44>)
 8000c68:	f001 ffe2 	bl	8002c30 <HAL_OPAMP_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_OPAMP3_Init+0x3e>
  {
    Error_Handler();
 8000c72:	f000 fa71 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000494 	.word	0x20000494
 8000c80:	40010308 	.word	0x40010308

08000c84 <MX_OPAMP4_Init>:
  * @brief OPAMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP4_Init 0 */

  /* USER CODE BEGIN OPAMP4_Init 1 */

  /* USER CODE END OPAMP4_Init 1 */
  hopamp4.Instance = OPAMP4;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <MX_OPAMP4_Init+0x48>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hopamp4.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000c90:	2280      	movs	r2, #128	@ 0x80
 8000c92:	605a      	str	r2, [r3, #4]
  hopamp4.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000c96:	2260      	movs	r2, #96	@ 0x60
 8000c98:	609a      	str	r2, [r3, #8]
  hopamp4.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000c9c:	220c      	movs	r2, #12
 8000c9e:	611a      	str	r2, [r3, #16]
  hopamp4.Init.InternalOutput = DISABLE;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	751a      	strb	r2, [r3, #20]
  hopamp4.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hopamp4.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp4) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	@ (8000cc8 <MX_OPAMP4_Init+0x44>)
 8000cb4:	f001 ffbc 	bl	8002c30 <HAL_OPAMP_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_OPAMP4_Init+0x3e>
  {
    Error_Handler();
 8000cbe:	f000 fa4b 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP4_Init 2 */

  /* USER CODE END OPAMP4_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200004d0 	.word	0x200004d0
 8000ccc:	4001030c 	.word	0x4001030c

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 51;
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d04:	2233      	movs	r2, #51	@ 0x33
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f003 f8b5 	bl	8003e84 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 fa1a 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f003 fcf7 	bl	8004724 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 fa0c 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d40:	2320      	movs	r3, #32
 8000d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f004 fb15 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f9fe 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3720      	adds	r7, #32
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000050c 	.word	0x2000050c

08000d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <MX_TIM3_Init+0x9c>)
 8000d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000-1;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000d8e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000d9c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dae:	4814      	ldr	r0, [pc, #80]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000db0:	f003 f868 	bl	8003e84 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000dba:	f000 f9cd 	bl	8001158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000dcc:	f003 fcaa 	bl	8004724 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000dd6:	f000 f9bf 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <MX_TIM3_Init+0x98>)
 8000de8:	f004 fac8 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000df2:	f000 f9b1 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3720      	adds	r7, #32
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000558 	.word	0x20000558
 8000e04:	40000400 	.word	0x40000400

08000e08 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b098      	sub	sp, #96	@ 0x60
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2234      	movs	r2, #52	@ 0x34
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f005 fb23 	bl	8006480 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e3a:	4b43      	ldr	r3, [pc, #268]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e3c:	4a43      	ldr	r2, [pc, #268]	@ (8000f4c <MX_TIM8_Init+0x144>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16000;
 8000e40:	4b41      	ldr	r3, [pc, #260]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e42:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000e46:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b3f      	ldr	r3, [pc, #252]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8000e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e50:	2264      	movs	r2, #100	@ 0x64
 8000e52:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b3c      	ldr	r3, [pc, #240]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e60:	4b39      	ldr	r3, [pc, #228]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e66:	4838      	ldr	r0, [pc, #224]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e68:	f003 f948 	bl	80040fc <HAL_TIM_PWM_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f971 	bl	8001158 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e76:	2108      	movs	r1, #8
 8000e78:	4833      	ldr	r0, [pc, #204]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e7a:	f003 f996 	bl	80041aa <HAL_TIM_OnePulse_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM8_Init+0x80>
  {
    Error_Handler();
 8000e84:	f000 f968 	bl	8001158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e98:	4619      	mov	r1, r3
 8000e9a:	482b      	ldr	r0, [pc, #172]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000e9c:	f004 fa6e 	bl	800537c <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000ea6:	f000 f957 	bl	8001158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	@ 0x60
 8000eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 50;
 8000eae:	2332      	movs	r3, #50	@ 0x32
 8000eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481e      	ldr	r0, [pc, #120]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000ed0:	f003 fb14 	bl	80044fc <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8000eda:	f000 f93d 	bl	8001158 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 8000ede:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699a      	ldr	r2, [r3, #24]
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0208 	bic.w	r2, r2, #8
 8000eec:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000f2a:	f004 fabb 	bl	80054a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8000f34:	f000 f910 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <MX_TIM8_Init+0x140>)
 8000f3a:	f000 fc11 	bl	8001760 <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3760      	adds	r7, #96	@ 0x60
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200005a4 	.word	0x200005a4
 8000f4c:	40013400 	.word	0x40013400

08000f50 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f56:	4a23      	ldr	r2, [pc, #140]	@ (8000fe4 <MX_UART5_Init+0x94>)
 8000f58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f76:	2208      	movs	r2, #8
 8000f78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f80:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f98:	4811      	ldr	r0, [pc, #68]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000f9a:	f004 fb78 	bl	800568e <HAL_UART_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000fa4:	f000 f8d8 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000fac:	f005 f99f 	bl	80062ee <HAL_UARTEx_SetTxFifoThreshold>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000fb6:	f000 f8cf 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000fbe:	f005 f9d4 	bl	800636a <HAL_UARTEx_SetRxFifoThreshold>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f000 f8c6 	bl	8001158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_UART5_Init+0x90>)
 8000fce:	f005 f956 	bl	800627e <HAL_UARTEx_DisableFifoMode>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000fd8:	f000 f8be 	bl	8001158 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200005f0 	.word	0x200005f0
 8000fe4:	40005000 	.word	0x40005000

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <MX_DMA_Init+0xa0>)
 8000ff0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ff2:	4a25      	ldr	r2, [pc, #148]	@ (8001088 <MX_DMA_Init+0xa0>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_DMA_Init+0xa0>)
 8000ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_DMA_Init+0xa0>)
 8001008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800100a:	4a1f      	ldr	r2, [pc, #124]	@ (8001088 <MX_DMA_Init+0xa0>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6493      	str	r3, [r2, #72]	@ 0x48
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_DMA_Init+0xa0>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	200b      	movs	r0, #11
 8001024:	f000 fe69 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001028:	200b      	movs	r0, #11
 800102a:	f000 fe80 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	200c      	movs	r0, #12
 8001034:	f000 fe61 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001038:	200c      	movs	r0, #12
 800103a:	f000 fe78 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	200d      	movs	r0, #13
 8001044:	f000 fe59 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001048:	200d      	movs	r0, #13
 800104a:	f000 fe70 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200e      	movs	r0, #14
 8001054:	f000 fe51 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001058:	200e      	movs	r0, #14
 800105a:	f000 fe68 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200f      	movs	r0, #15
 8001064:	f000 fe49 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001068:	200f      	movs	r0, #15
 800106a:	f000 fe60 	bl	8001d2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2010      	movs	r0, #16
 8001074:	f000 fe41 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001078:	2010      	movs	r0, #16
 800107a:	f000 fe58 	bl	8001d2e <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010a8:	f043 0320 	orr.w	r3, r3, #32
 80010ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ae:	4b28      	ldr	r3, [pc, #160]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b25      	ldr	r3, [pc, #148]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	4a24      	ldr	r2, [pc, #144]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c6:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ee:	4a18      	ldr	r2, [pc, #96]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_GPIO_Init+0xc4>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_GPIO_Init+0xc4>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_GPIO_Init+0xc4>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <MX_GPIO_Init+0xc4>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : EXTI_Button_Pin */
  GPIO_InitStruct.Pin = EXTI_Button_Pin;
 800111a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001120:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTI_Button_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <MX_GPIO_Init+0xc8>)
 8001132:	f001 fbd9 	bl	80028e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f000 fddd 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001140:	2028      	movs	r0, #40	@ 0x28
 8001142:	f000 fdf4 	bl	8001d2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	@ 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800

08001158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <Error_Handler+0x8>

08001164 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e041      	b.n	80011fa <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800117e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001188:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	6852      	ldr	r2, [r2, #4]
 8001192:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6892      	ldr	r2, [r2, #8]
 800119c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800119e:	f000 fca9 	bl	8001af4 <HAL_GetTick>
 80011a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011a4:	e00f      	b.n	80011c6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80011a6:	f000 fca5 	bl	8001af4 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b31      	cmp	r3, #49	@ 0x31
 80011b2:	d908      	bls.n	80011c6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e019      	b.n	80011fa <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1e8      	bne.n	80011a6 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d005      	beq.n	80011ee <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68d2      	ldr	r2, [r2, #12]
 80011ea:	611a      	str	r2, [r3, #16]
 80011ec:	e004      	b.n	80011f8 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001212:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	4a0e      	ldr	r2, [pc, #56]	@ (8001264 <HAL_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6613      	str	r3, [r2, #96]	@ 0x60
 8001232:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <HAL_MspInit+0x44>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001248:	6593      	str	r3, [r2, #88]	@ 0x58
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001256:	f001 fe8f 	bl	8002f78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40021000 	.word	0x40021000

08001268 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a6a      	ldr	r2, [pc, #424]	@ (8001430 <HAL_DAC_MspInit+0x1c8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d17b      	bne.n	8001382 <HAL_DAC_MspInit+0x11a>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a69      	ldr	r2, [pc, #420]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b67      	ldr	r3, [pc, #412]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b64      	ldr	r3, [pc, #400]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a63      	ldr	r2, [pc, #396]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b61      	ldr	r3, [pc, #388]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012ba:	2330      	movs	r3, #48	@ 0x30
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012be:	2303      	movs	r3, #3
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d0:	f001 fb0a 	bl	80028e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80012d4:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012d6:	4a59      	ldr	r2, [pc, #356]	@ (800143c <HAL_DAC_MspInit+0x1d4>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80012da:	4b57      	ldr	r3, [pc, #348]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012dc:	2206      	movs	r2, #6
 80012de:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e0:	4b55      	ldr	r3, [pc, #340]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012e2:	2210      	movs	r2, #16
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e6:	4b54      	ldr	r3, [pc, #336]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012ec:	4b52      	ldr	r3, [pc, #328]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012f2:	4b51      	ldr	r3, [pc, #324]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 80012fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001300:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001302:	4b4d      	ldr	r3, [pc, #308]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001308:	4b4b      	ldr	r3, [pc, #300]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800130e:	484a      	ldr	r0, [pc, #296]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 8001310:	f001 f87a 	bl	8002408 <HAL_DMA_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800131a:	f7ff ff1d 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	4a44      	ldr	r2, [pc, #272]	@ (8001438 <HAL_DAC_MspInit+0x1d0>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Channel2;
 800132a:	4b45      	ldr	r3, [pc, #276]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 800132c:	4a45      	ldr	r2, [pc, #276]	@ (8001444 <HAL_DAC_MspInit+0x1dc>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC1_CHANNEL2;
 8001330:	4b43      	ldr	r3, [pc, #268]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001332:	2207      	movs	r2, #7
 8001334:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001336:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001338:	2210      	movs	r2, #16
 800133a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001342:	4b3f      	ldr	r3, [pc, #252]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001348:	4b3d      	ldr	r3, [pc, #244]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 800134a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001350:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001352:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001356:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_NORMAL;
 8001358:	4b39      	ldr	r3, [pc, #228]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800135e:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001364:	4836      	ldr	r0, [pc, #216]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001366:	f001 f84f 	bl	8002408 <HAL_DMA_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_DAC_MspInit+0x10c>
    {
      Error_Handler();
 8001370:	f7ff fef2 	bl	8001158 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a32      	ldr	r2, [pc, #200]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	4a31      	ldr	r2, [pc, #196]	@ (8001440 <HAL_DAC_MspInit+0x1d8>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC4_MspInit 1 */

  /* USER CODE END DAC4_MspInit 1 */
  }

}
 8001380:	e10c      	b.n	800159c <HAL_DAC_MspInit+0x334>
  else if(hdac->Instance==DAC2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a30      	ldr	r2, [pc, #192]	@ (8001448 <HAL_DAC_MspInit+0x1e0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d163      	bne.n	8001454 <HAL_DAC_MspInit+0x1ec>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800138c:	4b29      	ldr	r3, [pc, #164]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a22      	ldr	r2, [pc, #136]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b20      	ldr	r3, [pc, #128]	@ (8001434 <HAL_DAC_MspInit+0x1cc>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013bc:	2340      	movs	r3, #64	@ 0x40
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d2:	f001 fa89 	bl	80028e8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001450 <HAL_DAC_MspInit+0x1e8>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013de:	2229      	movs	r2, #41	@ 0x29
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013e4:	2210      	movs	r2, #16
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b17      	ldr	r3, [pc, #92]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013f4:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fa:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 80013fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001402:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_NORMAL;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8001410:	480e      	ldr	r0, [pc, #56]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 8001412:	f000 fff9 	bl	8002408 <HAL_DMA_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_DAC_MspInit+0x1b8>
      Error_Handler();
 800141c:	f7ff fe9c 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a0a      	ldr	r2, [pc, #40]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_DAC_MspInit+0x1e4>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800142c:	e0b6      	b.n	800159c <HAL_DAC_MspInit+0x334>
 800142e:	bf00      	nop
 8001430:	50000800 	.word	0x50000800
 8001434:	40021000 	.word	0x40021000
 8001438:	20000218 	.word	0x20000218
 800143c:	40020008 	.word	0x40020008
 8001440:	20000278 	.word	0x20000278
 8001444:	4002001c 	.word	0x4002001c
 8001448:	50000c00 	.word	0x50000c00
 800144c:	200002d8 	.word	0x200002d8
 8001450:	40020030 	.word	0x40020030
  else if(hdac->Instance==DAC3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a52      	ldr	r2, [pc, #328]	@ (80015a4 <HAL_DAC_MspInit+0x33c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d162      	bne.n	8001524 <HAL_DAC_MspInit+0x2bc>
    __HAL_RCC_DAC3_CLK_ENABLE();
 800145e:	4b52      	ldr	r3, [pc, #328]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a51      	ldr	r2, [pc, #324]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 8001464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b4f      	ldr	r3, [pc, #316]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    hdma_dac3_ch1.Instance = DMA1_Channel4;
 8001476:	4b4d      	ldr	r3, [pc, #308]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 8001478:	4a4d      	ldr	r2, [pc, #308]	@ (80015b0 <HAL_DAC_MspInit+0x348>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 800147c:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 800147e:	2266      	movs	r2, #102	@ 0x66
 8001480:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001482:	4b4a      	ldr	r3, [pc, #296]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 8001484:	2210      	movs	r2, #16
 8001486:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b48      	ldr	r3, [pc, #288]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b47      	ldr	r3, [pc, #284]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001494:	4b45      	ldr	r3, [pc, #276]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 8001496:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800149a:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800149c:	4b43      	ldr	r3, [pc, #268]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 800149e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_NORMAL;
 80014a4:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80014aa:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 80014b0:	483e      	ldr	r0, [pc, #248]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 80014b2:	f000 ffa9 	bl	8002408 <HAL_DMA_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_DAC_MspInit+0x258>
      Error_Handler();
 80014bc:	f7ff fe4c 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3a      	ldr	r2, [pc, #232]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	4a39      	ldr	r2, [pc, #228]	@ (80015ac <HAL_DAC_MspInit+0x344>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_dac3_ch2.Instance = DMA1_Channel5;
 80014cc:	4b39      	ldr	r3, [pc, #228]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014ce:	4a3a      	ldr	r2, [pc, #232]	@ (80015b8 <HAL_DAC_MspInit+0x350>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch2.Init.Request = DMA_REQUEST_DAC3_CHANNEL2;
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014d4:	2267      	movs	r2, #103	@ 0x67
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014d8:	4b36      	ldr	r3, [pc, #216]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014da:	2210      	movs	r2, #16
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014de:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80014e4:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014ea:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch2.Init.Mode = DMA_NORMAL;
 80014fa:	4b2e      	ldr	r3, [pc, #184]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch2) != HAL_OK)
 8001506:	482b      	ldr	r0, [pc, #172]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 8001508:	f000 ff7e 	bl	8002408 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_DAC_MspInit+0x2ae>
      Error_Handler();
 8001512:	f7ff fe21 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac3_ch2);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a26      	ldr	r2, [pc, #152]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	4a25      	ldr	r2, [pc, #148]	@ (80015b4 <HAL_DAC_MspInit+0x34c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001522:	e03b      	b.n	800159c <HAL_DAC_MspInit+0x334>
  else if(hdac->Instance==DAC4)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a24      	ldr	r2, [pc, #144]	@ (80015bc <HAL_DAC_MspInit+0x354>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d136      	bne.n	800159c <HAL_DAC_MspInit+0x334>
    __HAL_RCC_DAC4_CLK_ENABLE();
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 8001534:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_DAC_MspInit+0x340>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    hdma_dac4_ch1.Instance = DMA1_Channel6;
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001548:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_DAC_MspInit+0x35c>)
 800154a:	601a      	str	r2, [r3, #0]
    hdma_dac4_ch1.Init.Request = DMA_REQUEST_DAC4_CHANNEL1;
 800154c:	4b1c      	ldr	r3, [pc, #112]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 800154e:	2268      	movs	r2, #104	@ 0x68
 8001550:	605a      	str	r2, [r3, #4]
    hdma_dac4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001552:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001554:	2210      	movs	r2, #16
 8001556:	609a      	str	r2, [r3, #8]
    hdma_dac4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
    hdma_dac4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	611a      	str	r2, [r3, #16]
    hdma_dac4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156a:	615a      	str	r2, [r3, #20]
    hdma_dac4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 800156e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001572:	619a      	str	r2, [r3, #24]
    hdma_dac4_ch1.Init.Mode = DMA_NORMAL;
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001576:	2200      	movs	r2, #0
 8001578:	61da      	str	r2, [r3, #28]
    hdma_dac4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac4_ch1) != HAL_OK)
 8001580:	480f      	ldr	r0, [pc, #60]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001582:	f000 ff41 	bl	8002408 <HAL_DMA_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_DAC_MspInit+0x328>
      Error_Handler();
 800158c:	f7ff fde4 	bl	8001158 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac4_ch1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <HAL_DAC_MspInit+0x358>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	@ 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	50001000 	.word	0x50001000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	20000338 	.word	0x20000338
 80015b0:	40020044 	.word	0x40020044
 80015b4:	20000398 	.word	0x20000398
 80015b8:	40020058 	.word	0x40020058
 80015bc:	50001400 	.word	0x50001400
 80015c0:	200003f8 	.word	0x200003f8
 80015c4:	4002006c 	.word	0x4002006c

080015c8 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	@ 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2e      	ldr	r2, [pc, #184]	@ (80016a0 <HAL_OPAMP_MspInit+0xd8>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d119      	bne.n	800161e <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a2d      	ldr	r2, [pc, #180]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA2     ------> OPAMP1_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001602:	2304      	movs	r3, #4
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001618:	f001 f966 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP4_MspInit 1 */

  /* USER CODE END OPAMP4_MspInit 1 */
  }

}
 800161c:	e03b      	b.n	8001696 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <HAL_OPAMP_MspInit+0xe0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d118      	bne.n	800165a <HAL_OPAMP_MspInit+0x92>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001640:	2302      	movs	r3, #2
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	@ (80016ac <HAL_OPAMP_MspInit+0xe4>)
 8001654:	f001 f948 	bl	80028e8 <HAL_GPIO_Init>
}
 8001658:	e01d      	b.n	8001696 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP4)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <HAL_OPAMP_MspInit+0xe8>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d118      	bne.n	8001696 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001668:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_OPAMP_MspInit+0xdc>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800167c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	@ (80016ac <HAL_OPAMP_MspInit+0xe4>)
 8001692:	f001 f929 	bl	80028e8 <HAL_GPIO_Init>
}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010300 	.word	0x40010300
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010308 	.word	0x40010308
 80016ac:	48000400 	.word	0x48000400
 80016b0:	4001030c 	.word	0x4001030c

080016b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c4:	d10c      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	4a14      	ldr	r2, [pc, #80]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80016de:	e018      	b.n	8001712 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001720 <HAL_TIM_Base_MspInit+0x6c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d113      	bne.n	8001712 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	4a0b      	ldr	r2, [pc, #44]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0x68>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	201d      	movs	r0, #29
 8001708:	f000 faf7 	bl	8001cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800170c:	201d      	movs	r0, #29
 800170e:	f000 fb0e 	bl	8001d2e <HAL_NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	40000400 	.word	0x40000400

08001724 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a09      	ldr	r2, [pc, #36]	@ (8001758 <HAL_TIM_PWM_MspInit+0x34>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d10b      	bne.n	800174e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_TIM_PWM_MspInit+0x38>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_TIM_PWM_MspInit+0x38>)
 800173c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001740:	6613      	str	r3, [r2, #96]	@ 0x60
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_TIM_PWM_MspInit+0x38>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40013400 	.word	0x40013400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_TIM_MspPostInit+0x64>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11c      	bne.n	80017bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001786:	4a10      	ldr	r2, [pc, #64]	@ (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178e:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_TIM_MspPostInit+0x68>)
 8001790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC10     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = LED_Control_Pin;
 800179a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800179e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80017ac:	2304      	movs	r3, #4
 80017ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_Control_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	4619      	mov	r1, r3
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	f001 f896 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80017bc:	bf00      	nop
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40013400 	.word	0x40013400
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000800 	.word	0x48000800

080017d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0a0      	sub	sp, #128	@ 0x80
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	2254      	movs	r2, #84	@ 0x54
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fe45 	bl	8006480 <memset>
  if(huart->Instance==UART5)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <HAL_UART_MspInit+0xe0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d152      	bne.n	80018a6 <HAL_UART_MspInit+0xd6>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001800:	2310      	movs	r3, #16
 8001802:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f8eb 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001818:	f7ff fc9e 	bl	8001158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a24      	ldr	r2, [pc, #144]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 8001822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	4a18      	ldr	r2, [pc, #96]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <HAL_UART_MspInit+0xe4>)
 800185a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001876:	2305      	movs	r3, #5
 8001878:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	@ (80018b8 <HAL_UART_MspInit+0xe8>)
 8001882:	f001 f831 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001886:	2304      	movs	r3, #4
 8001888:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001896:	2305      	movs	r3, #5
 8001898:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800189e:	4619      	mov	r1, r3
 80018a0:	4806      	ldr	r0, [pc, #24]	@ (80018bc <HAL_UART_MspInit+0xec>)
 80018a2:	f001 f821 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80018a6:	bf00      	nop
 80018a8:	3780      	adds	r7, #128	@ 0x80
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40005000 	.word	0x40005000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <NMI_Handler+0x4>

080018c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <MemManage_Handler+0x4>

080018d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 f8de 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA1_Channel1_IRQHandler+0x10>)
 800191e:	f000 fe96 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000218 	.word	0x20000218

0800192c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <DMA1_Channel2_IRQHandler+0x10>)
 8001932:	f000 fe8c 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000278 	.word	0x20000278

08001940 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <DMA1_Channel3_IRQHandler+0x10>)
 8001946:	f000 fe82 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200002d8 	.word	0x200002d8

08001954 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <DMA1_Channel4_IRQHandler+0x10>)
 800195a:	f000 fe78 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000338 	.word	0x20000338

08001968 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch2);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <DMA1_Channel5_IRQHandler+0x10>)
 800196e:	f000 fe6e 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000398 	.word	0x20000398

0800197c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac4_ch1);
 8001980:	4802      	ldr	r0, [pc, #8]	@ (800198c <DMA1_Channel6_IRQHandler+0x10>)
 8001982:	f000 fe64 	bl	800264e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200003f8 	.word	0x200003f8

08001990 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	TIM3_Callback();
 8001994:	f7fe fef8 	bl	8000788 <TIM3_Callback>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <TIM3_IRQHandler+0x14>)
 800199a:	f002 fc5f 	bl	800425c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  /* USER CODE END TIM3_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000558 	.word	0x20000558

080019a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_Button_Pin);
 80019ac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019b0:	f001 f91c 	bl	8002bec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  EXTI_ButtonIRQHandler();
 80019b4:	f7fe ff02 	bl	80007bc <EXTI_ButtonIRQHandler>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr

080019c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c8:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019cc:	f7ff fff6 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80019d2:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a0c <LoopForever+0xe>)
  movs r3, #0
 80019d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019d8:	e002      	b.n	80019e0 <LoopCopyDataInit>

080019da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019de:	3304      	adds	r3, #4

080019e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e4:	d3f9      	bcc.n	80019da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a14 <LoopForever+0x16>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ec:	e001      	b.n	80019f2 <LoopFillZerobss>

080019ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f0:	3204      	adds	r2, #4

080019f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f4:	d3fb      	bcc.n	80019ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f6:	f004 fd4b 	bl	8006490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019fa:	f7fe ff8b 	bl	8000914 <main>

080019fe <LoopForever>:

LoopForever:
    b LoopForever
 80019fe:	e7fe      	b.n	80019fe <LoopForever>
  ldr   r0, =_estack
 8001a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8001a0c:	08078cbc 	.word	0x08078cbc
  ldr r2, =_sbss
 8001a10:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8001a14:	20000688 	.word	0x20000688

08001a18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC1_2_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_Init+0x3c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_Init+0x3c>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a32:	2003      	movs	r0, #3
 8001a34:	f000 f956 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a38:	200f      	movs	r0, #15
 8001a3a:	f000 f80f 	bl	8001a5c <HAL_InitTick>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	e001      	b.n	8001a4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a4a:	f7ff fbe9 	bl	8001220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]

}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a68:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <HAL_InitTick+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d022      	beq.n	8001ab6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <HAL_InitTick+0x6c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_InitTick+0x68>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f000 f960 	bl	8001d4a <HAL_SYSTICK_Config>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10f      	bne.n	8001ab0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	d809      	bhi.n	8001aaa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a96:	2200      	movs	r2, #0
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9e:	f000 f92c 	bl	8001cfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_InitTick+0x70>)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	e004      	b.n	8001aba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e001      	b.n	8001aba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	2000018c 	.word	0x2000018c
 8001ac8:	20000184 	.word	0x20000184
 8001acc:	20000188 	.word	0x20000188

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a03      	ldr	r2, [pc, #12]	@ (8001aec <HAL_IncTick+0x1c>)
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000684 	.word	0x20000684
 8001af0:	2000018c 	.word	0x2000018c

08001af4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	@ (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000684 	.word	0x20000684

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff fff0 	bl	8001af4 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d004      	beq.n	8001b2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_Delay+0x40>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b2c:	bf00      	nop
 8001b2e:	f7ff ffe1 	bl	8001af4 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d8f7      	bhi.n	8001b2e <HAL_Delay+0x26>
  {
  }
}
 8001b3e:	bf00      	nop
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	2000018c 	.word	0x2000018c

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	@ (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2d 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d08:	f7ff ff44 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68b9      	ldr	r1, [r7, #8]
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	f7ff ff92 	bl	8001c3c <NVIC_EncodePriority>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff61 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff37 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffa4 	bl	8001ca0 <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e014      	b.n	8001d9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff fa6f 	bl	8001268 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e0b2      	b.n	8001f26 <HAL_DAC_Start_DMA+0x17e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	795b      	ldrb	r3, [r3, #5]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_DAC_Start_DMA+0x24>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e0ac      	b.n	8001f26 <HAL_DAC_Start_DMA+0x17e>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d129      	bne.n	8001e32 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	4a53      	ldr	r2, [pc, #332]	@ (8001f30 <HAL_DAC_Start_DMA+0x188>)
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4a52      	ldr	r2, [pc, #328]	@ (8001f34 <HAL_DAC_Start_DMA+0x18c>)
 8001dec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4a51      	ldr	r2, [pc, #324]	@ (8001f38 <HAL_DAC_Start_DMA+0x190>)
 8001df4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001e04:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DAC_Start_DMA+0x6c>
 8001e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d005      	beq.n	8001e1e <HAL_DAC_Start_DMA+0x76>
 8001e12:	e009      	b.n	8001e28 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3308      	adds	r3, #8
 8001e1a:	61bb      	str	r3, [r7, #24]
        break;
 8001e1c:	e033      	b.n	8001e86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	330c      	adds	r3, #12
 8001e24:	61bb      	str	r3, [r7, #24]
        break;
 8001e26:	e02e      	b.n	8001e86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	61bb      	str	r3, [r7, #24]
        break;
 8001e30:	e029      	b.n	8001e86 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4a41      	ldr	r2, [pc, #260]	@ (8001f3c <HAL_DAC_Start_DMA+0x194>)
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a40      	ldr	r2, [pc, #256]	@ (8001f40 <HAL_DAC_Start_DMA+0x198>)
 8001e40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	4a3f      	ldr	r2, [pc, #252]	@ (8001f44 <HAL_DAC_Start_DMA+0x19c>)
 8001e48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001e58:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_DAC_Start_DMA+0xc0>
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d005      	beq.n	8001e72 <HAL_DAC_Start_DMA+0xca>
 8001e66:	e009      	b.n	8001e7c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	61bb      	str	r3, [r7, #24]
        break;
 8001e70:	e009      	b.n	8001e86 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3318      	adds	r3, #24
 8001e78:	61bb      	str	r3, [r7, #24]
        break;
 8001e7a:	e004      	b.n	8001e86 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	331c      	adds	r3, #28
 8001e82:	61bb      	str	r3, [r7, #24]
        break;
 8001e84:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d111      	bne.n	8001eb0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e9a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6898      	ldr	r0, [r3, #8]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f000 fb57 	bl	8002558 <HAL_DMA_Start_IT>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	77fb      	strb	r3, [r7, #31]
 8001eae:	e010      	b.n	8001ed2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	68d8      	ldr	r0, [r3, #12]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f000 fb45 	bl	8002558 <HAL_DMA_Start_IT>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	77fb      	strb	r3, [r7, #31]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11c      	bne.n	8001f18 <HAL_DAC_Start_DMA+0x170>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6819      	ldr	r1, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2201      	movs	r2, #1
 8001eec:	409a      	lsls	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef6:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <HAL_DAC_Start_DMA+0x1a0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	099b      	lsrs	r3, r3, #6
 8001efc:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <HAL_DAC_Start_DMA+0x1a4>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f08:	e002      	b.n	8001f10 <HAL_DAC_Start_DMA+0x168>
    {
      wait_loop_index--;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_DAC_Start_DMA+0x162>
 8001f16:	e005      	b.n	8001f24 <HAL_DAC_Start_DMA+0x17c>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001f24:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	080022f9 	.word	0x080022f9
 8001f34:	0800231b 	.word	0x0800231b
 8001f38:	08002337 	.word	0x08002337
 8001f3c:	0800239b 	.word	0x0800239b
 8001f40:	080023bd 	.word	0x080023bd
 8001f44:	080023d9 	.word	0x080023d9
 8001f48:	20000184 	.word	0x20000184
 8001f4c:	053e2d63 	.word	0x053e2d63

08001f50 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_DAC_ConfigChannel+0x1c>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e19e      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	795b      	ldrb	r3, [r3, #5]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_DAC_ConfigChannel+0x2c>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e198      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d17a      	bne.n	80020be <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff fd94 	bl	8001af4 <HAL_GetTick>
 8001fcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d13d      	bne.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fd4:	e018      	b.n	8002008 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001fd6:	f7ff fd8d 	bl	8001af4 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d911      	bls.n	8002008 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f043 0208 	orr.w	r2, r3, #8
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2203      	movs	r2, #3
 8002002:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e16e      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800200e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1df      	bne.n	8001fd6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002020:	e020      	b.n	8002064 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002022:	f7ff fd67 	bl	8001af4 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d90f      	bls.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	da0a      	bge.n	8002050 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f043 0208 	orr.w	r2, r3, #8
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2203      	movs	r2, #3
 800204a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e14a      	b.n	80022e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	dbe3      	blt.n	8002022 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002062:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	ea02 0103 	and.w	r1, r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	21ff      	movs	r1, #255	@ 0xff
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	ea02 0103 	and.w	r1, r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	409a      	lsls	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d11d      	bne.n	8002102 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	221f      	movs	r2, #31
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020de:	4013      	ands	r3, r2
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f6:	4313      	orrs	r3, r2
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002100:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2207      	movs	r2, #7
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211a:	4013      	ands	r3, r2
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002126:	2300      	movs	r3, #0
 8002128:	623b      	str	r3, [r7, #32]
 800212a:	e00f      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d102      	bne.n	800213a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002134:	2301      	movs	r3, #1
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	e008      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002142:	2301      	movs	r3, #1
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	e001      	b.n	800214c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	6a3a      	ldr	r2, [r7, #32]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216e:	4013      	ands	r3, r2
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <HAL_DAC_ConfigChannel+0x1f8>
 800217a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800217e:	e000      	b.n	8002182 <HAL_DAC_ConfigChannel+0x1fa>
 8002180:	2300      	movs	r3, #0
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219a:	4013      	ands	r3, r2
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	795b      	ldrb	r3, [r3, #5]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_DAC_ConfigChannel+0x224>
 80021a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021aa:	e000      	b.n	80021ae <HAL_DAC_ConfigChannel+0x226>
 80021ac:	2300      	movs	r3, #0
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d114      	bne.n	80021ee <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80021c4:	f001 fb94 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 80021c8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_DAC_ConfigChannel+0x368>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d904      	bls.n	80021dc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021da:	e00f      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4a45      	ldr	r2, [pc, #276]	@ (80022f4 <HAL_DAC_ConfigChannel+0x36c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d90a      	bls.n	80021fa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ec:	e006      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	4313      	orrs	r3, r2
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f8:	e000      	b.n	80021fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80021fa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220a:	4313      	orrs	r3, r2
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800224e:	4013      	ands	r3, r2
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002266:	4313      	orrs	r3, r2
 8002268:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002270:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	22c0      	movs	r2, #192	@ 0xc0
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	ea02 0103 	and.w	r1, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80022e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	09896800 	.word	0x09896800
 80022f4:	04c4b400 	.word	0x04c4b400

080022f8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002304:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fe22 	bl	8001f50 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2201      	movs	r2, #1
 8002310:	711a      	strb	r2, [r3, #4]
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fe1a 	bl	8001f62 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fe0f 	bl	8001f74 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	711a      	strb	r2, [r3, #4]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff ffdb 	bl	8002364 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	711a      	strb	r2, [r3, #4]
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f7ff ffd3 	bl	8002376 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f043 0204 	orr.w	r2, r3, #4
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ffc8 	bl	8002388 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	711a      	strb	r2, [r3, #4]
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e08d      	b.n	8002536 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4b47      	ldr	r3, [pc, #284]	@ (8002540 <HAL_DMA_Init+0x138>)
 8002422:	429a      	cmp	r2, r3
 8002424:	d80f      	bhi.n	8002446 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	4b45      	ldr	r3, [pc, #276]	@ (8002544 <HAL_DMA_Init+0x13c>)
 800242e:	4413      	add	r3, r2
 8002430:	4a45      	ldr	r2, [pc, #276]	@ (8002548 <HAL_DMA_Init+0x140>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a42      	ldr	r2, [pc, #264]	@ (800254c <HAL_DMA_Init+0x144>)
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40
 8002444:	e00e      	b.n	8002464 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b40      	ldr	r3, [pc, #256]	@ (8002550 <HAL_DMA_Init+0x148>)
 800244e:	4413      	add	r3, r2
 8002450:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <HAL_DMA_Init+0x140>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a3c      	ldr	r2, [pc, #240]	@ (8002554 <HAL_DMA_Init+0x14c>)
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800247a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800247e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f9b6 	bl	8002828 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024c4:	d102      	bne.n	80024cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d010      	beq.n	800250c <HAL_DMA_Init+0x104>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d80c      	bhi.n	800250c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f9d4 	bl	80028a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	e008      	b.n	800251e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020407 	.word	0x40020407
 8002544:	bffdfff8 	.word	0xbffdfff8
 8002548:	cccccccd 	.word	0xcccccccd
 800254c:	40020000 	.word	0x40020000
 8002550:	bffdfbf8 	.word	0xbffdfbf8
 8002554:	40020400 	.word	0x40020400

08002558 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_DMA_Start_IT+0x20>
 8002574:	2302      	movs	r3, #2
 8002576:	e066      	b.n	8002646 <HAL_DMA_Start_IT+0xee>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d155      	bne.n	8002638 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f8fb 	bl	80027ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 020e 	orr.w	r2, r2, #14
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e00f      	b.n	80025f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0204 	bic.w	r2, r2, #4
 80025de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 020a 	orr.w	r2, r2, #10
 80025ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002620:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002624:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e005      	b.n	8002644 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002640:	2302      	movs	r3, #2
 8002642:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002644:	7dfb      	ldrb	r3, [r7, #23]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	2204      	movs	r2, #4
 8002670:	409a      	lsls	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d026      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x7a>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d107      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0204 	bic.w	r2, r2, #4
 80026a0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f003 021f 	and.w	r2, r3, #31
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	2104      	movs	r1, #4
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d071      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80026c6:	e06c      	b.n	80027a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	2202      	movs	r2, #2
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02e      	beq.n	800273a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d029      	beq.n	800273a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10b      	bne.n	800270c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 020a 	bic.w	r2, r2, #10
 8002702:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002710:	f003 021f 	and.w	r2, r3, #31
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	2102      	movs	r1, #2
 800271a:	fa01 f202 	lsl.w	r2, r1, r2
 800271e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d038      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002738:	e033      	b.n	80027a2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2208      	movs	r2, #8
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d02a      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d025      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f003 021f 	and.w	r2, r3, #31
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	2b00      	cmp	r3, #0
 8002798:	d004      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
}
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027d4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	f003 021f 	and.w	r2, r3, #31
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d108      	bne.n	800280c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800280a:	e007      	b.n	800281c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
 8002838:	429a      	cmp	r2, r3
 800283a:	d802      	bhi.n	8002842 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e001      	b.n	8002846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002844:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	3b08      	subs	r3, #8
 8002852:	4a11      	ldr	r2, [pc, #68]	@ (8002898 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	009a      	lsls	r2, r3, #2
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002872:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 031f 	and.w	r3, r3, #31
 800287a:	2201      	movs	r2, #1
 800287c:	409a      	lsls	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40020407 	.word	0x40020407
 8002890:	40020800 	.word	0x40020800
 8002894:	40020820 	.word	0x40020820
 8002898:	cccccccd 	.word	0xcccccccd
 800289c:	40020880 	.word	0x40020880

080028a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a08      	ldr	r2, [pc, #32]	@ (80028e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80028c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	2201      	movs	r2, #1
 80028ce:	409a      	lsls	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	1000823f 	.word	0x1000823f
 80028e4:	40020940 	.word	0x40020940

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028f6:	e15a      	b.n	8002bae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 814c 	beq.w	8002ba8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d005      	beq.n	8002928 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002924:	2b02      	cmp	r3, #2
 8002926:	d130      	bne.n	800298a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295e:	2201      	movs	r2, #1
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0201 	and.w	r2, r3, #1
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b03      	cmp	r3, #3
 8002994:	d017      	beq.n	80029c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d123      	bne.n	8002a1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0203 	and.w	r2, r3, #3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80a6 	beq.w	8002ba8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5c:	4b5b      	ldr	r3, [pc, #364]	@ (8002bcc <HAL_GPIO_Init+0x2e4>)
 8002a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a60:	4a5a      	ldr	r2, [pc, #360]	@ (8002bcc <HAL_GPIO_Init+0x2e4>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a68:	4b58      	ldr	r3, [pc, #352]	@ (8002bcc <HAL_GPIO_Init+0x2e4>)
 8002a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a74:	4a56      	ldr	r2, [pc, #344]	@ (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a9e:	d01f      	beq.n	8002ae0 <HAL_GPIO_Init+0x1f8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd4 <HAL_GPIO_Init+0x2ec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d019      	beq.n	8002adc <HAL_GPIO_Init+0x1f4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8002bd8 <HAL_GPIO_Init+0x2f0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d013      	beq.n	8002ad8 <HAL_GPIO_Init+0x1f0>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bdc <HAL_GPIO_Init+0x2f4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_GPIO_Init+0x1ec>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_GPIO_Init+0x2f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <HAL_GPIO_Init+0x1e8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a48      	ldr	r2, [pc, #288]	@ (8002be4 <HAL_GPIO_Init+0x2fc>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d101      	bne.n	8002acc <HAL_GPIO_Init+0x1e4>
 8002ac8:	2305      	movs	r3, #5
 8002aca:	e00a      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002acc:	2306      	movs	r3, #6
 8002ace:	e008      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e006      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e004      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e002      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_GPIO_Init+0x1fa>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	f002 0203 	and.w	r2, r2, #3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4093      	lsls	r3, r2
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af2:	4937      	ldr	r1, [pc, #220]	@ (8002bd0 <HAL_GPIO_Init+0x2e8>)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b00:	4b39      	ldr	r3, [pc, #228]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b24:	4a30      	ldr	r2, [pc, #192]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b4e:	4a26      	ldr	r2, [pc, #152]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b54:	4b24      	ldr	r3, [pc, #144]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b78:	4a1b      	ldr	r2, [pc, #108]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ba2:	4a11      	ldr	r2, [pc, #68]	@ (8002be8 <HAL_GPIO_Init+0x300>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f ae9d 	bne.w	80028f8 <HAL_GPIO_Init+0x10>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	bf00      	nop
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	48000800 	.word	0x48000800
 8002bdc:	48000c00 	.word	0x48000c00
 8002be0:	48001000 	.word	0x48001000
 8002be4:	48001400 	.word	0x48001400
 8002be8:	40010400 	.word	0x40010400

08002bec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bf6:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d006      	beq.n	8002c10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c02:	4a05      	ldr	r2, [pc, #20]	@ (8002c18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c08:	88fb      	ldrh	r3, [r7, #6]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f806 	bl	8002c1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0bb      	b.n	8002dbe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d101      	bne.n	8002c56 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0b3      	b.n	8002dbe <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d101      	bne.n	8002c66 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e0ab      	b.n	8002dbe <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	4b58      	ldr	r3, [pc, #352]	@ (8002dc8 <HAL_OPAMP_Init+0x198>)
 8002c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6a:	4a57      	ldr	r2, [pc, #348]	@ (8002dc8 <HAL_OPAMP_Init+0x198>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c72:	4b55      	ldr	r3, [pc, #340]	@ (8002dc8 <HAL_OPAMP_Init+0x198>)
 8002c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fe fc98 	bl	80015c8 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b40      	cmp	r3, #64	@ 0x40
 8002c9e:	d003      	beq.n	8002ca8 <HAL_OPAMP_Init+0x78>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b60      	cmp	r3, #96	@ 0x60
 8002ca6:	d133      	bne.n	8002d10 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0110 	bic.w	r1, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_OPAMP_Init+0x19c>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6851      	ldr	r1, [r2, #4]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6912      	ldr	r2, [r2, #16]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	7d09      	ldrb	r1, [r1, #20]
 8002cdc:	2901      	cmp	r1, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_OPAMP_Init+0xb6>
 8002ce0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ce4:	e000      	b.n	8002ce8 <HAL_OPAMP_Init+0xb8>
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4311      	orrs	r1, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002cf4:	4311      	orrs	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002cfa:	04d2      	lsls	r2, r2, #19
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d02:	0612      	lsls	r2, r2, #24
 8002d04:	4311      	orrs	r1, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e035      	b.n	8002d7c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 0110 	bic.w	r1, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b27      	ldr	r3, [pc, #156]	@ (8002dcc <HAL_OPAMP_Init+0x19c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6851      	ldr	r1, [r2, #4]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6892      	ldr	r2, [r2, #8]
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	4311      	orrs	r1, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6912      	ldr	r2, [r2, #16]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	7d09      	ldrb	r1, [r1, #20]
 8002d4a:	2901      	cmp	r1, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_OPAMP_Init+0x124>
 8002d4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d52:	e000      	b.n	8002d56 <HAL_OPAMP_Init+0x126>
 8002d54:	2100      	movs	r1, #0
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d68:	04d2      	lsls	r2, r2, #19
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d70:	0612      	lsls	r2, r2, #24
 8002d72:	4311      	orrs	r1, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db10      	blt.n	8002da8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699a      	ldr	r2, [r3, #24]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d103      	bne.n	8002dbc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	e0003e11 	.word	0xe0003e11

08002dd0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e01d      	b.n	8002e24 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	d102      	bne.n	8002dfa <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
 8002df8:	e014      	b.n	8002e24 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d10c      	bne.n	8002e20 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002e1e:	e001      	b.n	8002e24 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr

08002e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d141      	bne.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4a:	d131      	bne.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e4c:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e52:	4a46      	ldr	r2, [pc, #280]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e5c:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e64:	4a41      	ldr	r2, [pc, #260]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e6c:	4b40      	ldr	r3, [pc, #256]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2232      	movs	r2, #50	@ 0x32
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	4a3f      	ldr	r2, [pc, #252]	@ (8002f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	0c9b      	lsrs	r3, r3, #18
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	e002      	b.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e8a:	4b38      	ldr	r3, [pc, #224]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e96:	d102      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f2      	bne.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e9e:	4b33      	ldr	r3, [pc, #204]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eaa:	d158      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e057      	b.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb0:	4b2e      	ldr	r3, [pc, #184]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ec0:	e04d      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec8:	d141      	bne.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eca:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d131      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ed8:	4b24      	ldr	r3, [pc, #144]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ede:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ee8:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2232      	movs	r2, #50	@ 0x32
 8002efe:	fb02 f303 	mul.w	r3, r2, r3
 8002f02:	4a1c      	ldr	r2, [pc, #112]	@ (8002f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0e:	e002      	b.n	8002f16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f16:	4b15      	ldr	r3, [pc, #84]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f22:	d102      	bne.n	8002f2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f2      	bne.n	8002f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f2a:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f36:	d112      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e011      	b.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f42:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f4c:	e007      	b.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f4e:	4b07      	ldr	r3, [pc, #28]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f56:	4a05      	ldr	r2, [pc, #20]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	20000184 	.word	0x20000184
 8002f74:	431bde83 	.word	0x431bde83

08002f78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a03      	ldr	r2, [pc, #12]	@ (8002f90 <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 8002f82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f86:	6093      	str	r3, [r2, #8]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40007000 	.word	0x40007000

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e2fe      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d075      	beq.n	800309e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb2:	4b97      	ldr	r3, [pc, #604]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fbc:	4b94      	ldr	r3, [pc, #592]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x3e>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d002      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x44>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	4b8d      	ldr	r3, [pc, #564]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d05b      	beq.n	800309c <HAL_RCC_OscConfig+0x108>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d157      	bne.n	800309c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e2d9      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x74>
 8002ffa:	4b85      	ldr	r3, [pc, #532]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a84      	ldr	r2, [pc, #528]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e01d      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b7f      	ldr	r3, [pc, #508]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7e      	ldr	r2, [pc, #504]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7c      	ldr	r3, [pc, #496]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7b      	ldr	r2, [pc, #492]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e00b      	b.n	8003044 <HAL_RCC_OscConfig+0xb0>
 800302c:	4b78      	ldr	r3, [pc, #480]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a77      	ldr	r2, [pc, #476]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003032:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b75      	ldr	r3, [pc, #468]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a74      	ldr	r2, [pc, #464]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800303e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d013      	beq.n	8003074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fd52 	bl	8001af4 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003054:	f7fe fd4e 	bl	8001af4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e29e      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003066:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f0      	beq.n	8003054 <HAL_RCC_OscConfig+0xc0>
 8003072:	e014      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fd3e 	bl	8001af4 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fd3a 	bl	8001af4 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	@ 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e28a      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308e:	4b60      	ldr	r3, [pc, #384]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0xe8>
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d075      	beq.n	8003196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
 80030b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b4:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b0c      	cmp	r3, #12
 80030c2:	d102      	bne.n	80030ca <HAL_RCC_OscConfig+0x136>
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d002      	beq.n	80030d0 <HAL_RCC_OscConfig+0x13c>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d11f      	bne.n	8003110 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x154>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e25d      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e8:	4b49      	ldr	r3, [pc, #292]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	4946      	ldr	r1, [pc, #280]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030fc:	4b45      	ldr	r3, [pc, #276]	@ (8003214 <HAL_RCC_OscConfig+0x280>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe fcab 	bl	8001a5c <HAL_InitTick>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d043      	beq.n	8003194 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e249      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d023      	beq.n	8003160 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003118:	4b3d      	ldr	r3, [pc, #244]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a3c      	ldr	r2, [pc, #240]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800311e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fce6 	bl	8001af4 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800312c:	f7fe fce2 	bl	8001af4 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e232      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313e:	4b34      	ldr	r3, [pc, #208]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f0      	beq.n	800312c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b31      	ldr	r3, [pc, #196]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	492d      	ldr	r1, [pc, #180]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
 800315e:	e01a      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2a      	ldr	r2, [pc, #168]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003166:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800316a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316c:	f7fe fcc2 	bl	8001af4 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe fcbe 	bl	8001af4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e20e      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003186:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f0      	bne.n	8003174 <HAL_RCC_OscConfig+0x1e0>
 8003192:	e000      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d041      	beq.n	8003226 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01c      	beq.n	80031e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b0:	4a17      	ldr	r2, [pc, #92]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ba:	f7fe fc9b 	bl	8001af4 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c2:	f7fe fc97 	bl	8001af4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1e7      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0ef      	beq.n	80031c2 <HAL_RCC_OscConfig+0x22e>
 80031e2:	e020      	b.n	8003226 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fe fc7e 	bl	8001af4 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031fa:	e00d      	b.n	8003218 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fc:	f7fe fc7a 	bl	8001af4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d906      	bls.n	8003218 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1ca      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
 800320e:	bf00      	nop
 8003210:	40021000 	.word	0x40021000
 8003214:	20000188 	.word	0x20000188
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003218:	4b8c      	ldr	r3, [pc, #560]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ea      	bne.n	80031fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80a6 	beq.w	8003380 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003234:	2300      	movs	r3, #0
 8003236:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003238:	4b84      	ldr	r3, [pc, #528]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x2b4>
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x2b6>
 8003248:	2300      	movs	r3, #0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324e:	4b7f      	ldr	r3, [pc, #508]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	4a7e      	ldr	r2, [pc, #504]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	@ 0x58
 800325a:	4b7c      	ldr	r3, [pc, #496]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800326a:	4b79      	ldr	r3, [pc, #484]	@ (8003450 <HAL_RCC_OscConfig+0x4bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003276:	4b76      	ldr	r3, [pc, #472]	@ (8003450 <HAL_RCC_OscConfig+0x4bc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	@ (8003450 <HAL_RCC_OscConfig+0x4bc>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe fc37 	bl	8001af4 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe fc33 	bl	8001af4 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e183      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800329c:	4b6c      	ldr	r3, [pc, #432]	@ (8003450 <HAL_RCC_OscConfig+0x4bc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_RCC_OscConfig+0x32e>
 80032b0:	4b66      	ldr	r3, [pc, #408]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b6:	4a65      	ldr	r2, [pc, #404]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032c0:	e024      	b.n	800330c <HAL_RCC_OscConfig+0x378>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	d110      	bne.n	80032ec <HAL_RCC_OscConfig+0x358>
 80032ca:	4b60      	ldr	r3, [pc, #384]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	4a5e      	ldr	r2, [pc, #376]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032da:	4b5c      	ldr	r3, [pc, #368]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e0:	4a5a      	ldr	r2, [pc, #360]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ea:	e00f      	b.n	800330c <HAL_RCC_OscConfig+0x378>
 80032ec:	4b57      	ldr	r3, [pc, #348]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f2:	4a56      	ldr	r2, [pc, #344]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032fc:	4b53      	ldr	r3, [pc, #332]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	4a52      	ldr	r2, [pc, #328]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d016      	beq.n	8003342 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fbee 	bl	8001af4 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331a:	e00a      	b.n	8003332 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331c:	f7fe fbea 	bl	8001af4 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e138      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003332:	4b46      	ldr	r3, [pc, #280]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ed      	beq.n	800331c <HAL_RCC_OscConfig+0x388>
 8003340:	e015      	b.n	800336e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fbd7 	bl	8001af4 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fe fbd3 	bl	8001af4 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e121      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003360:	4b3a      	ldr	r3, [pc, #232]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ed      	bne.n	800334a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800336e:	7ffb      	ldrb	r3, [r7, #31]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b35      	ldr	r3, [pc, #212]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003378:	4a34      	ldr	r2, [pc, #208]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d03c      	beq.n	8003406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01c      	beq.n	80033ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003394:	4b2d      	ldr	r3, [pc, #180]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800339a:	4a2c      	ldr	r2, [pc, #176]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a4:	f7fe fba6 	bl	8001af4 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ac:	f7fe fba2 	bl	8001af4 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e0f2      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033be:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d0ef      	beq.n	80033ac <HAL_RCC_OscConfig+0x418>
 80033cc:	e01b      	b.n	8003406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ce:	4b1f      	ldr	r3, [pc, #124]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f023 0301 	bic.w	r3, r3, #1
 80033da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fe fb89 	bl	8001af4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e6:	f7fe fb85 	bl	8001af4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0d5      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f8:	4b14      	ldr	r3, [pc, #80]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 80033fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1ef      	bne.n	80033e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80c9 	beq.w	80035a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003410:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b0c      	cmp	r3, #12
 800341a:	f000 8083 	beq.w	8003524 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d15e      	bne.n	80034e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_RCC_OscConfig+0x4b8>)
 800342c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fe fb5f 	bl	8001af4 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003438:	e00c      	b.n	8003454 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe fb5b 	bl	8001af4 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d905      	bls.n	8003454 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e0ab      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
 800344c:	40021000 	.word	0x40021000
 8003450:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	4b55      	ldr	r3, [pc, #340]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1ec      	bne.n	800343a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003460:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b52      	ldr	r3, [pc, #328]	@ (80035b0 <HAL_RCC_OscConfig+0x61c>)
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a11      	ldr	r1, [r2, #32]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003470:	3a01      	subs	r2, #1
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800347a:	0212      	lsls	r2, r2, #8
 800347c:	4311      	orrs	r1, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003482:	0852      	lsrs	r2, r2, #1
 8003484:	3a01      	subs	r2, #1
 8003486:	0552      	lsls	r2, r2, #21
 8003488:	4311      	orrs	r1, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0652      	lsls	r2, r2, #25
 8003494:	4311      	orrs	r1, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800349a:	06d2      	lsls	r2, r2, #27
 800349c:	430a      	orrs	r2, r1
 800349e:	4943      	ldr	r1, [pc, #268]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a40      	ldr	r2, [pc, #256]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b0:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a3d      	ldr	r2, [pc, #244]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fb1a 	bl	8001af4 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c4:	f7fe fb16 	bl	8001af4 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e066      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d6:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x530>
 80034e2:	e05e      	b.n	80035a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 80034ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe fb00 	bl	8001af4 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fe fafc 	bl	8001af4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e04c      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350a:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003516:	4b25      	ldr	r3, [pc, #148]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4924      	ldr	r1, [pc, #144]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 800351c:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <HAL_RCC_OscConfig+0x620>)
 800351e:	4013      	ands	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
 8003522:	e03e      	b.n	80035a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e039      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003530:	4b1e      	ldr	r3, [pc, #120]	@ (80035ac <HAL_RCC_OscConfig+0x618>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	429a      	cmp	r2, r3
 8003542:	d12c      	bne.n	800359e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	3b01      	subs	r3, #1
 8003550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d123      	bne.n	800359e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d11b      	bne.n	800359e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d113      	bne.n	800359e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003586:	429a      	cmp	r2, r3
 8003588:	d109      	bne.n	800359e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000
 80035b0:	019f800c 	.word	0x019f800c
 80035b4:	feeefffc 	.word	0xfeeefffc

080035b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e11e      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b91      	ldr	r3, [pc, #580]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b8e      	ldr	r3, [pc, #568]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 020f 	bic.w	r2, r3, #15
 80035e6:	498c      	ldr	r1, [pc, #560]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e106      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d073      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d129      	bne.n	8003668 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003614:	4b81      	ldr	r3, [pc, #516]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0f4      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003624:	f000 f99a 	bl	800395c <RCC_GetSysClockFreqFromPLLSource>
 8003628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4a7c      	ldr	r2, [pc, #496]	@ (8003820 <HAL_RCC_ClockConfig+0x268>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d93f      	bls.n	80036b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003632:	4b7a      	ldr	r3, [pc, #488]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003646:	2b00      	cmp	r3, #0
 8003648:	d033      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800364e:	2b00      	cmp	r3, #0
 8003650:	d12f      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003652:	4b72      	ldr	r3, [pc, #456]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800365a:	4a70      	ldr	r2, [pc, #448]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 800365c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003660:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	e024      	b.n	80036b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d107      	bne.n	8003680 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d109      	bne.n	8003690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0c6      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003680:	4b66      	ldr	r3, [pc, #408]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0be      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003690:	f000 f8ce 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8003694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4a61      	ldr	r2, [pc, #388]	@ (8003820 <HAL_RCC_ClockConfig+0x268>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d909      	bls.n	80036b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800369e:	4b5f      	ldr	r3, [pc, #380]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036a6:	4a5d      	ldr	r2, [pc, #372]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80036a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b2:	4b5a      	ldr	r3, [pc, #360]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 0203 	bic.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4957      	ldr	r1, [pc, #348]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c4:	f7fe fa16 	bl	8001af4 <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036cc:	f7fe fa12 	bl	8001af4 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e095      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e2:	4b4e      	ldr	r3, [pc, #312]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 020c 	and.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d1eb      	bne.n	80036cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d023      	beq.n	8003748 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b43      	ldr	r3, [pc, #268]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a42      	ldr	r2, [pc, #264]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003712:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003716:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d007      	beq.n	8003734 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003724:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800372c:	4a3b      	ldr	r2, [pc, #236]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 800372e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003734:	4b39      	ldr	r3, [pc, #228]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4936      	ldr	r1, [pc, #216]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
 8003746:	e008      	b.n	800375a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b80      	cmp	r3, #128	@ 0x80
 800374c:	d105      	bne.n	800375a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800374e:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	4a32      	ldr	r2, [pc, #200]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 8003754:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003758:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800375a:	4b2f      	ldr	r3, [pc, #188]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d21d      	bcs.n	80037a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003768:	4b2b      	ldr	r3, [pc, #172]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 020f 	bic.w	r2, r3, #15
 8003770:	4929      	ldr	r1, [pc, #164]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003778:	f7fe f9bc 	bl	8001af4 <HAL_GetTick>
 800377c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fe f9b8 	bl	8001af4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e03b      	b.n	800380e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b20      	ldr	r3, [pc, #128]	@ (8003818 <HAL_RCC_ClockConfig+0x260>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1ed      	bne.n	8003780 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4917      	ldr	r1, [pc, #92]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ce:	4b13      	ldr	r3, [pc, #76]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	490f      	ldr	r1, [pc, #60]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e2:	f000 f825 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80037e6:	4602      	mov	r2, r0
 80037e8:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <HAL_RCC_ClockConfig+0x264>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	091b      	lsrs	r3, r3, #4
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	490c      	ldr	r1, [pc, #48]	@ (8003824 <HAL_RCC_ClockConfig+0x26c>)
 80037f4:	5ccb      	ldrb	r3, [r1, r3]
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	fa22 f303 	lsr.w	r3, r2, r3
 80037fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <HAL_RCC_ClockConfig+0x270>)
 8003800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003802:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <HAL_RCC_ClockConfig+0x274>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f928 	bl	8001a5c <HAL_InitTick>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40022000 	.word	0x40022000
 800381c:	40021000 	.word	0x40021000
 8003820:	04c4b400 	.word	0x04c4b400
 8003824:	08078c6c 	.word	0x08078c6c
 8003828:	20000184 	.word	0x20000184
 800382c:	20000188 	.word	0x20000188

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003836:	4b2b      	ldr	r3, [pc, #172]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d102      	bne.n	8003848 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003842:	4b29      	ldr	r3, [pc, #164]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	e047      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003848:	4b26      	ldr	r3, [pc, #152]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d102      	bne.n	800385a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003854:	4b25      	ldr	r3, [pc, #148]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	e03e      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800385a:	4b22      	ldr	r3, [pc, #136]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d136      	bne.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003866:	4b1f      	ldr	r3, [pc, #124]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003870:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3301      	adds	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d10c      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003884:	4a19      	ldr	r2, [pc, #100]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	4a15      	ldr	r2, [pc, #84]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800388e:	68d2      	ldr	r2, [r2, #12]
 8003890:	0a12      	lsrs	r2, r2, #8
 8003892:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
      break;
 800389c:	e00c      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389e:	4a12      	ldr	r2, [pc, #72]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038a8:	68d2      	ldr	r2, [r2, #12]
 80038aa:	0a12      	lsrs	r2, r2, #8
 80038ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
      break;
 80038b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0e5b      	lsrs	r3, r3, #25
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	e001      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038d8:	693b      	ldr	r3, [r7, #16]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	40021000 	.word	0x40021000
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b02      	ldr	r3, [pc, #8]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x10>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	20000184 	.word	0x20000184

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003908:	f7ff fff2 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4904      	ldr	r1, [pc, #16]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	08078c7c 	.word	0x08078c7c

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003934:	f7ff ffdc 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	08078c7c 	.word	0x08078c7c

0800395c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003962:	4b1e      	ldr	r3, [pc, #120]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	091b      	lsrs	r3, r3, #4
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	3301      	adds	r3, #1
 8003978:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d10c      	bne.n	800399a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003980:	4a17      	ldr	r2, [pc, #92]	@ (80039e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	4a14      	ldr	r2, [pc, #80]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398a:	68d2      	ldr	r2, [r2, #12]
 800398c:	0a12      	lsrs	r2, r2, #8
 800398e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	617b      	str	r3, [r7, #20]
    break;
 8003998:	e00c      	b.n	80039b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399a:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	4a0e      	ldr	r2, [pc, #56]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a4:	68d2      	ldr	r2, [r2, #12]
 80039a6:	0a12      	lsrs	r2, r2, #8
 80039a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ac:	fb02 f303 	mul.w	r3, r2, r3
 80039b0:	617b      	str	r3, [r7, #20]
    break;
 80039b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b4:	4b09      	ldr	r3, [pc, #36]	@ (80039dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	0e5b      	lsrs	r3, r3, #25
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	3301      	adds	r3, #1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	00f42400 	.word	0x00f42400

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039f0:	2300      	movs	r3, #0
 80039f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039f4:	2300      	movs	r3, #0
 80039f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8098 	beq.w	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0a:	4b43      	ldr	r3, [pc, #268]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10d      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	4b40      	ldr	r3, [pc, #256]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a22:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	60bb      	str	r3, [r7, #8]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a32:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a39      	ldr	r2, [pc, #228]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3e:	f7fe f859 	bl	8001af4 <HAL_GetTick>
 8003a42:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a44:	e009      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fe f855 	bl	8001af4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d902      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	74fb      	strb	r3, [r7, #19]
        break;
 8003a58:	e005      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5a:	4b30      	ldr	r3, [pc, #192]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0ef      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a66:	7cfb      	ldrb	r3, [r7, #19]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d159      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a76:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d019      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a88:	4b23      	ldr	r3, [pc, #140]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab4:	4a18      	ldr	r2, [pc, #96]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe f815 	bl	8001af4 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe f811 	bl	8001af4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ec      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10b      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	4b07      	ldr	r3, [pc, #28]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b08:	4903      	ldr	r1, [pc, #12]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b10:	e008      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	74bb      	strb	r3, [r7, #18]
 8003b16:	e005      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b24:	7c7b      	ldrb	r3, [r7, #17]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4ba7      	ldr	r3, [pc, #668]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	4aa6      	ldr	r2, [pc, #664]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b42:	4ba1      	ldr	r3, [pc, #644]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b48:	f023 0203 	bic.w	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	499d      	ldr	r1, [pc, #628]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b64:	4b98      	ldr	r3, [pc, #608]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6a:	f023 020c 	bic.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4995      	ldr	r1, [pc, #596]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b86:	4b90      	ldr	r3, [pc, #576]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	498c      	ldr	r1, [pc, #560]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ba8:	4b87      	ldr	r3, [pc, #540]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	4984      	ldr	r1, [pc, #528]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bca:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	497b      	ldr	r1, [pc, #492]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bec:	4b76      	ldr	r3, [pc, #472]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	4973      	ldr	r1, [pc, #460]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c0e:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	496a      	ldr	r1, [pc, #424]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c30:	4b65      	ldr	r3, [pc, #404]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	4962      	ldr	r1, [pc, #392]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c52:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	4959      	ldr	r1, [pc, #356]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c74:	4b54      	ldr	r3, [pc, #336]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c82:	4951      	ldr	r1, [pc, #324]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c96:	4b4c      	ldr	r3, [pc, #304]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	4948      	ldr	r1, [pc, #288]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cb8:	4b43      	ldr	r3, [pc, #268]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	4940      	ldr	r1, [pc, #256]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ce2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d015      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf0:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfe:	4932      	ldr	r1, [pc, #200]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d10:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d1a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d28:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d2e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d36:	4924      	ldr	r1, [pc, #144]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d60:	4b19      	ldr	r3, [pc, #100]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6e:	4916      	ldr	r1, [pc, #88]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a10      	ldr	r2, [pc, #64]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d019      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d98:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	4908      	ldr	r1, [pc, #32]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003db6:	d109      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a02      	ldr	r2, [pc, #8]	@ (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]
 8003dc4:	e002      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d015      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd8:	4b29      	ldr	r3, [pc, #164]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	4926      	ldr	r1, [pc, #152]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003df6:	d105      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df8:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1e:	4918      	ldr	r1, [pc, #96]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	4a12      	ldr	r2, [pc, #72]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	490a      	ldr	r1, [pc, #40]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e66:	d105      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e68:	4b05      	ldr	r3, [pc, #20]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40021000 	.word	0x40021000

08003e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e049      	b.n	8003f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fc02 	bl	80016b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f000 fd72 	bl	80049ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d001      	beq.n	8003f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e04c      	b.n	8003fe6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a25      	ldr	r2, [pc, #148]	@ (8003ff0 <HAL_TIM_Base_Start+0xbc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d022      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f66:	d01d      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <HAL_TIM_Base_Start+0xc0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d018      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a20      	ldr	r2, [pc, #128]	@ (8003ff8 <HAL_TIM_Base_Start+0xc4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d013      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1e      	ldr	r2, [pc, #120]	@ (8003ffc <HAL_TIM_Base_Start+0xc8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00e      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <HAL_TIM_Base_Start+0xcc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d009      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1b      	ldr	r2, [pc, #108]	@ (8004004 <HAL_TIM_Base_Start+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x70>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004008 <HAL_TIM_Base_Start+0xd4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d115      	bne.n	8003fd0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	4b18      	ldr	r3, [pc, #96]	@ (800400c <HAL_TIM_Base_Start+0xd8>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d015      	beq.n	8003fe2 <HAL_TIM_Base_Start+0xae>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fbc:	d011      	beq.n	8003fe2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0201 	orr.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fce:	e008      	b.n	8003fe2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40013400 	.word	0x40013400
 8004004:	40014000 	.word	0x40014000
 8004008:	40015000 	.word	0x40015000
 800400c:	00010007 	.word	0x00010007

08004010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d001      	beq.n	8004028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e054      	b.n	80040d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d01d      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a21      	ldr	r2, [pc, #132]	@ (80040e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a20      	ldr	r2, [pc, #128]	@ (80040e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <HAL_TIM_Base_Start_IT+0xdc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a1b      	ldr	r2, [pc, #108]	@ (80040f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a1a      	ldr	r2, [pc, #104]	@ (80040f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d115      	bne.n	80040bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d015      	beq.n	80040ce <HAL_TIM_Base_Start_IT+0xbe>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a8:	d011      	beq.n	80040ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	e008      	b.n	80040ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e000      	b.n	80040d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40014000 	.word	0x40014000
 80040f4:	40015000 	.word	0x40015000
 80040f8:	00010007 	.word	0x00010007

080040fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e049      	b.n	80041a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fafe 	bl	8001724 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f000 fc36 	bl	80049ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e041      	b.n	8004242 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f839 	bl	800424a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 fbde 	bl	80049ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0208 	bic.w	r2, r2, #8
 80041fe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6819      	ldr	r1, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d020      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d01b      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fb64 	bl	8004974 <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fb57 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fb66 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0204 	mvn.w	r2, #4
 80042dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fb3e 	bl	8004974 <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fb31 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb40 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0208 	mvn.w	r2, #8
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2204      	movs	r2, #4
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fb18 	bl	8004974 <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fb0b 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb1a 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0210 	mvn.w	r2, #16
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2208      	movs	r2, #8
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 faf2 	bl	8004974 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fae5 	bl	8004962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 faf4 	bl	8004986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0201 	mvn.w	r2, #1
 80043c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fac4 	bl	8004950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d104      	bne.n	80043dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00c      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f001 f8f2 	bl	80055da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00c      	beq.n	800441a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f001 f8e9 	bl	80055ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00c      	beq.n	800443e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 faad 	bl	8004998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f06f 0220 	mvn.w	r2, #32
 800445a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f001 f8b3 	bl	80055c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 f8bc 	bl	80055fe <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 f8b3 	bl	8005610 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 f8aa 	bl	8005622 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 f8a1 	bl	8005634 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004512:	2b01      	cmp	r3, #1
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004516:	2302      	movs	r3, #2
 8004518:	e0ff      	b.n	800471a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b14      	cmp	r3, #20
 8004526:	f200 80f0 	bhi.w	800470a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800452a:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004585 	.word	0x08004585
 8004534:	0800470b 	.word	0x0800470b
 8004538:	0800470b 	.word	0x0800470b
 800453c:	0800470b 	.word	0x0800470b
 8004540:	080045c5 	.word	0x080045c5
 8004544:	0800470b 	.word	0x0800470b
 8004548:	0800470b 	.word	0x0800470b
 800454c:	0800470b 	.word	0x0800470b
 8004550:	08004607 	.word	0x08004607
 8004554:	0800470b 	.word	0x0800470b
 8004558:	0800470b 	.word	0x0800470b
 800455c:	0800470b 	.word	0x0800470b
 8004560:	08004647 	.word	0x08004647
 8004564:	0800470b 	.word	0x0800470b
 8004568:	0800470b 	.word	0x0800470b
 800456c:	0800470b 	.word	0x0800470b
 8004570:	08004689 	.word	0x08004689
 8004574:	0800470b 	.word	0x0800470b
 8004578:	0800470b 	.word	0x0800470b
 800457c:	0800470b 	.word	0x0800470b
 8004580:	080046c9 	.word	0x080046c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fac0 	bl	8004b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e0a5      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fb3a 	bl	8004c44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e084      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fbab 	bl	8004d68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e064      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fc1d 	bl	8004e8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e043      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68b9      	ldr	r1, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc8e 	bl	8004fb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0204 	bic.w	r2, r2, #4
 80046b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80046c6:	e023      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fcd8 	bl	8005084 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004708:	e002      	b.n	8004710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	75fb      	strb	r3, [r7, #23]
      break;
 800470e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004718:	7dfb      	ldrb	r3, [r7, #23]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3718      	adds	r7, #24
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop

08004724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIM_ConfigClockSource+0x1c>
 800473c:	2302      	movs	r3, #2
 800473e:	e0f6      	b.n	800492e <HAL_TIM_ConfigClockSource+0x20a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800475e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800476a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a6f      	ldr	r2, [pc, #444]	@ (8004938 <HAL_TIM_ConfigClockSource+0x214>)
 800477a:	4293      	cmp	r3, r2
 800477c:	f000 80c1 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 8004780:	4a6d      	ldr	r2, [pc, #436]	@ (8004938 <HAL_TIM_ConfigClockSource+0x214>)
 8004782:	4293      	cmp	r3, r2
 8004784:	f200 80c6 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004788:	4a6c      	ldr	r2, [pc, #432]	@ (800493c <HAL_TIM_ConfigClockSource+0x218>)
 800478a:	4293      	cmp	r3, r2
 800478c:	f000 80b9 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 8004790:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <HAL_TIM_ConfigClockSource+0x218>)
 8004792:	4293      	cmp	r3, r2
 8004794:	f200 80be 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004798:	4a69      	ldr	r2, [pc, #420]	@ (8004940 <HAL_TIM_ConfigClockSource+0x21c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	f000 80b1 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047a0:	4a67      	ldr	r2, [pc, #412]	@ (8004940 <HAL_TIM_ConfigClockSource+0x21c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	f200 80b6 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047a8:	4a66      	ldr	r2, [pc, #408]	@ (8004944 <HAL_TIM_ConfigClockSource+0x220>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	f000 80a9 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047b0:	4a64      	ldr	r2, [pc, #400]	@ (8004944 <HAL_TIM_ConfigClockSource+0x220>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	f200 80ae 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047b8:	4a63      	ldr	r2, [pc, #396]	@ (8004948 <HAL_TIM_ConfigClockSource+0x224>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	f000 80a1 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047c0:	4a61      	ldr	r2, [pc, #388]	@ (8004948 <HAL_TIM_ConfigClockSource+0x224>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f200 80a6 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047c8:	4a60      	ldr	r2, [pc, #384]	@ (800494c <HAL_TIM_ConfigClockSource+0x228>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f000 8099 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047d0:	4a5e      	ldr	r2, [pc, #376]	@ (800494c <HAL_TIM_ConfigClockSource+0x228>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	f200 809e 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80047dc:	f000 8091 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80047e4:	f200 8096 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ec:	f000 8089 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 80047f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f4:	f200 808e 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d03e      	beq.n	800487c <HAL_TIM_ConfigClockSource+0x158>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	f200 8087 	bhi.w	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480a:	f000 8086 	beq.w	800491a <HAL_TIM_ConfigClockSource+0x1f6>
 800480e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004812:	d87f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004814:	2b70      	cmp	r3, #112	@ 0x70
 8004816:	d01a      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x12a>
 8004818:	2b70      	cmp	r3, #112	@ 0x70
 800481a:	d87b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 800481c:	2b60      	cmp	r3, #96	@ 0x60
 800481e:	d050      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x19e>
 8004820:	2b60      	cmp	r3, #96	@ 0x60
 8004822:	d877      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004824:	2b50      	cmp	r3, #80	@ 0x50
 8004826:	d03c      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x17e>
 8004828:	2b50      	cmp	r3, #80	@ 0x50
 800482a:	d873      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 800482c:	2b40      	cmp	r3, #64	@ 0x40
 800482e:	d058      	beq.n	80048e2 <HAL_TIM_ConfigClockSource+0x1be>
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d86f      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004834:	2b30      	cmp	r3, #48	@ 0x30
 8004836:	d064      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 8004838:	2b30      	cmp	r3, #48	@ 0x30
 800483a:	d86b      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 800483c:	2b20      	cmp	r3, #32
 800483e:	d060      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 8004840:	2b20      	cmp	r3, #32
 8004842:	d867      	bhi.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d05c      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 8004848:	2b10      	cmp	r3, #16
 800484a:	d05a      	beq.n	8004902 <HAL_TIM_ConfigClockSource+0x1de>
 800484c:	e062      	b.n	8004914 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800485e:	f000 fcf4 	bl	800524a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	609a      	str	r2, [r3, #8]
      break;
 800487a:	e04f      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800488c:	f000 fcdd 	bl	800524a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800489e:	609a      	str	r2, [r3, #8]
      break;
 80048a0:	e03c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 fc52 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2150      	movs	r1, #80	@ 0x50
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fca9 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 80048c0:	e02c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048ce:	461a      	mov	r2, r3
 80048d0:	f000 fc70 	bl	80051b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2160      	movs	r1, #96	@ 0x60
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fc99 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 80048e0:	e01c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	461a      	mov	r2, r3
 80048f0:	f000 fc32 	bl	8005158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2140      	movs	r1, #64	@ 0x40
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fc89 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004900:	e00c      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4619      	mov	r1, r3
 800490c:	4610      	mov	r0, r2
 800490e:	f000 fc80 	bl	8005212 <TIM_ITRx_SetConfig>
      break;
 8004912:	e003      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e000      	b.n	800491c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800491a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	00100070 	.word	0x00100070
 800493c:	00100060 	.word	0x00100060
 8004940:	00100050 	.word	0x00100050
 8004944:	00100040 	.word	0x00100040
 8004948:	00100030 	.word	0x00100030
 800494c:	00100020 	.word	0x00100020

08004950 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr

08004962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	bc80      	pop	{r7}
 8004996:	4770      	bx	lr

08004998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bc80      	pop	{r7}
 80049a8:	4770      	bx	lr
	...

080049ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a4b      	ldr	r2, [pc, #300]	@ (8004aec <TIM_Base_SetConfig+0x140>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d017      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ca:	d013      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a48      	ldr	r2, [pc, #288]	@ (8004af0 <TIM_Base_SetConfig+0x144>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00f      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a47      	ldr	r2, [pc, #284]	@ (8004af4 <TIM_Base_SetConfig+0x148>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00b      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a46      	ldr	r2, [pc, #280]	@ (8004af8 <TIM_Base_SetConfig+0x14c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d007      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a45      	ldr	r2, [pc, #276]	@ (8004afc <TIM_Base_SetConfig+0x150>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_Base_SetConfig+0x48>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a44      	ldr	r2, [pc, #272]	@ (8004b00 <TIM_Base_SetConfig+0x154>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d108      	bne.n	8004a06 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a38      	ldr	r2, [pc, #224]	@ (8004aec <TIM_Base_SetConfig+0x140>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d023      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a14:	d01f      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a35      	ldr	r2, [pc, #212]	@ (8004af0 <TIM_Base_SetConfig+0x144>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01b      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a34      	ldr	r2, [pc, #208]	@ (8004af4 <TIM_Base_SetConfig+0x148>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d017      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a33      	ldr	r2, [pc, #204]	@ (8004af8 <TIM_Base_SetConfig+0x14c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a32      	ldr	r2, [pc, #200]	@ (8004afc <TIM_Base_SetConfig+0x150>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00f      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a32      	ldr	r2, [pc, #200]	@ (8004b04 <TIM_Base_SetConfig+0x158>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a31      	ldr	r2, [pc, #196]	@ (8004b08 <TIM_Base_SetConfig+0x15c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a30      	ldr	r2, [pc, #192]	@ (8004b0c <TIM_Base_SetConfig+0x160>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_Base_SetConfig+0xaa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2b      	ldr	r2, [pc, #172]	@ (8004b00 <TIM_Base_SetConfig+0x154>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <TIM_Base_SetConfig+0x140>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d013      	beq.n	8004abc <TIM_Base_SetConfig+0x110>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a19      	ldr	r2, [pc, #100]	@ (8004afc <TIM_Base_SetConfig+0x150>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00f      	beq.n	8004abc <TIM_Base_SetConfig+0x110>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <TIM_Base_SetConfig+0x158>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_Base_SetConfig+0x110>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <TIM_Base_SetConfig+0x15c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_Base_SetConfig+0x110>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a17      	ldr	r2, [pc, #92]	@ (8004b0c <TIM_Base_SetConfig+0x160>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_Base_SetConfig+0x110>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a12      	ldr	r2, [pc, #72]	@ (8004b00 <TIM_Base_SetConfig+0x154>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d103      	bne.n	8004ac4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d105      	bne.n	8004ae2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f023 0201 	bic.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	611a      	str	r2, [r3, #16]
  }
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40013400 	.word	0x40013400
 8004b00:	40015000 	.word	0x40015000
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	f023 0201 	bic.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f023 0302 	bic.w	r3, r3, #2
 8004b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a30      	ldr	r2, [pc, #192]	@ (8004c2c <TIM_OC1_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <TIM_OC1_SetConfig+0x88>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2f      	ldr	r2, [pc, #188]	@ (8004c30 <TIM_OC1_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00f      	beq.n	8004b98 <TIM_OC1_SetConfig+0x88>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2e      	ldr	r2, [pc, #184]	@ (8004c34 <TIM_OC1_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00b      	beq.n	8004b98 <TIM_OC1_SetConfig+0x88>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a2d      	ldr	r2, [pc, #180]	@ (8004c38 <TIM_OC1_SetConfig+0x128>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d007      	beq.n	8004b98 <TIM_OC1_SetConfig+0x88>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c3c <TIM_OC1_SetConfig+0x12c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d003      	beq.n	8004b98 <TIM_OC1_SetConfig+0x88>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <TIM_OC1_SetConfig+0x130>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d10c      	bne.n	8004bb2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f023 0308 	bic.w	r3, r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c2c <TIM_OC1_SetConfig+0x11c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <TIM_OC1_SetConfig+0xd2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <TIM_OC1_SetConfig+0x120>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <TIM_OC1_SetConfig+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c34 <TIM_OC1_SetConfig+0x124>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <TIM_OC1_SetConfig+0xd2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <TIM_OC1_SetConfig+0x128>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <TIM_OC1_SetConfig+0xd2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a19      	ldr	r2, [pc, #100]	@ (8004c3c <TIM_OC1_SetConfig+0x12c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d003      	beq.n	8004be2 <TIM_OC1_SetConfig+0xd2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <TIM_OC1_SetConfig+0x130>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d111      	bne.n	8004c06 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bc80      	pop	{r7}
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800
 8004c40:	40015000 	.word	0x40015000

08004c44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f023 0210 	bic.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0320 	bic.w	r3, r3, #32
 8004c92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8004d50 <TIM_OC2_SetConfig+0x10c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_OC2_SetConfig+0x74>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2a      	ldr	r2, [pc, #168]	@ (8004d54 <TIM_OC2_SetConfig+0x110>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC2_SetConfig+0x74>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <TIM_OC2_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10d      	bne.n	8004cd4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d50 <TIM_OC2_SetConfig+0x10c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <TIM_OC2_SetConfig+0xc0>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <TIM_OC2_SetConfig+0x110>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00f      	beq.n	8004d04 <TIM_OC2_SetConfig+0xc0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d5c <TIM_OC2_SetConfig+0x118>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00b      	beq.n	8004d04 <TIM_OC2_SetConfig+0xc0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a1c      	ldr	r2, [pc, #112]	@ (8004d60 <TIM_OC2_SetConfig+0x11c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d007      	beq.n	8004d04 <TIM_OC2_SetConfig+0xc0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d64 <TIM_OC2_SetConfig+0x120>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_OC2_SetConfig+0xc0>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a16      	ldr	r2, [pc, #88]	@ (8004d58 <TIM_OC2_SetConfig+0x114>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d113      	bne.n	8004d2c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40013400 	.word	0x40013400
 8004d58:	40015000 	.word	0x40015000
 8004d5c:	40014000 	.word	0x40014000
 8004d60:	40014400 	.word	0x40014400
 8004d64:	40014800 	.word	0x40014800

08004d68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0303 	bic.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e74 <TIM_OC3_SetConfig+0x10c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_OC3_SetConfig+0x72>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <TIM_OC3_SetConfig+0x110>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_OC3_SetConfig+0x72>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a29      	ldr	r2, [pc, #164]	@ (8004e7c <TIM_OC3_SetConfig+0x114>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d10d      	bne.n	8004df6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	021b      	lsls	r3, r3, #8
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <TIM_OC3_SetConfig+0x10c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_OC3_SetConfig+0xbe>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1d      	ldr	r2, [pc, #116]	@ (8004e78 <TIM_OC3_SetConfig+0x110>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_OC3_SetConfig+0xbe>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <TIM_OC3_SetConfig+0x118>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_OC3_SetConfig+0xbe>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <TIM_OC3_SetConfig+0x11c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_OC3_SetConfig+0xbe>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	@ (8004e88 <TIM_OC3_SetConfig+0x120>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_OC3_SetConfig+0xbe>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_OC3_SetConfig+0x114>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d113      	bne.n	8004e4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	621a      	str	r2, [r3, #32]
}
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40013400 	.word	0x40013400
 8004e7c:	40015000 	.word	0x40015000
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	031b      	lsls	r3, r3, #12
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <TIM_OC4_SetConfig+0x10c>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d007      	beq.n	8004f00 <TIM_OC4_SetConfig+0x74>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f9c <TIM_OC4_SetConfig+0x110>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC4_SetConfig+0x74>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a29      	ldr	r2, [pc, #164]	@ (8004fa0 <TIM_OC4_SetConfig+0x114>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <TIM_OC4_SetConfig+0x10c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <TIM_OC4_SetConfig+0xc0>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	@ (8004f9c <TIM_OC4_SetConfig+0x110>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_OC4_SetConfig+0xc0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <TIM_OC4_SetConfig+0x118>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_OC4_SetConfig+0xc0>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <TIM_OC4_SetConfig+0x11c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_OC4_SetConfig+0xc0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <TIM_OC4_SetConfig+0x120>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_OC4_SetConfig+0xc0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a16      	ldr	r2, [pc, #88]	@ (8004fa0 <TIM_OC4_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d113      	bne.n	8004f74 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f52:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f5a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	019b      	lsls	r3, r3, #6
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	019b      	lsls	r3, r3, #6
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40015000 	.word	0x40015000
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400
 8004fac:	40014800 	.word	0x40014800

08004fb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ff4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <TIM_OC5_SetConfig+0xbc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_OC5_SetConfig+0x82>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <TIM_OC5_SetConfig+0xc0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_OC5_SetConfig+0x82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <TIM_OC5_SetConfig+0xc4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_OC5_SetConfig+0x82>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <TIM_OC5_SetConfig+0xc8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_OC5_SetConfig+0x82>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <TIM_OC5_SetConfig+0xcc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_OC5_SetConfig+0x82>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <TIM_OC5_SetConfig+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d109      	bne.n	8005046 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005038:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40013400 	.word	0x40013400
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40015000 	.word	0x40015000

08005084 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	051b      	lsls	r3, r3, #20
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <TIM_OC6_SetConfig+0xbc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <TIM_OC6_SetConfig+0x84>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a18      	ldr	r2, [pc, #96]	@ (8005144 <TIM_OC6_SetConfig+0xc0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d00f      	beq.n	8005108 <TIM_OC6_SetConfig+0x84>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a17      	ldr	r2, [pc, #92]	@ (8005148 <TIM_OC6_SetConfig+0xc4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d00b      	beq.n	8005108 <TIM_OC6_SetConfig+0x84>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a16      	ldr	r2, [pc, #88]	@ (800514c <TIM_OC6_SetConfig+0xc8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d007      	beq.n	8005108 <TIM_OC6_SetConfig+0x84>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <TIM_OC6_SetConfig+0xcc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC6_SetConfig+0x84>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <TIM_OC6_SetConfig+0xd0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d109      	bne.n	800511c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	029b      	lsls	r3, r3, #10
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	40012c00 	.word	0x40012c00
 8005144:	40013400 	.word	0x40013400
 8005148:	40014000 	.word	0x40014000
 800514c:	40014400 	.word	0x40014400
 8005150:	40014800 	.word	0x40014800
 8005154:	40015000 	.word	0x40015000

08005158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f023 030a 	bic.w	r3, r3, #10
 8005194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0210 	bic.w	r2, r3, #16
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	031b      	lsls	r3, r3, #12
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	621a      	str	r2, [r3, #32]
}
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800522c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	f043 0307 	orr.w	r3, r3, #7
 8005238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005264:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	021a      	lsls	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	431a      	orrs	r2, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	4313      	orrs	r3, r2
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	609a      	str	r2, [r3, #8]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1a      	ldr	r2, [r3, #32]
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	43db      	mvns	r3, r3
 80052aa:	401a      	ands	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1a      	ldr	r2, [r3, #32]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	fa01 f303 	lsl.w	r3, r1, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_OnePulseN_Start+0x14>
 80052e0:	2304      	movs	r3, #4
 80052e2:	e000      	b.n	80052e6 <HAL_TIMEx_OnePulseN_Start+0x16>
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ee:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052f6:	72bb      	strb	r3, [r7, #10]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052fe:	727b      	strb	r3, [r7, #9]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005306:	723b      	strb	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d108      	bne.n	8005320 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800530e:	7abb      	ldrb	r3, [r7, #10]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005314:	7a7b      	ldrb	r3, [r7, #9]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <HAL_TIMEx_OnePulseN_Start+0x50>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800531a:	7a3b      	ldrb	r3, [r7, #8]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d001      	beq.n	8005324 <HAL_TIMEx_OnePulseN_Start+0x54>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e026      	b.n	8005372 <HAL_TIMEx_OnePulseN_Start+0xa2>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2204      	movs	r2, #4
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 f97a 	bl	8005646 <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2201      	movs	r2, #1
 8005358:	68f9      	ldr	r1, [r7, #12]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff ff94 	bl	8005288 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005390:	2302      	movs	r3, #2
 8005392:	e074      	b.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a33      	ldr	r2, [pc, #204]	@ (8005488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a32      	ldr	r2, [pc, #200]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a30      	ldr	r2, [pc, #192]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d108      	bne.n	80053e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005414:	d01d      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a14      	ldr	r2, [pc, #80]	@ (800548c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a17      	ldr	r2, [pc, #92]	@ (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a10      	ldr	r2, [pc, #64]	@ (8005490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10c      	bne.n	800546c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005458:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	4313      	orrs	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40015000 	.word	0x40015000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054bc:	2302      	movs	r3, #2
 80054be:	e078      	b.n	80055b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	041b      	lsls	r3, r3, #16
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1b      	ldr	r2, [pc, #108]	@ (80055bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1a      	ldr	r2, [pc, #104]	@ (80055c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a18      	ldr	r2, [pc, #96]	@ (80055c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d11c      	bne.n	80055a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	051b      	lsls	r3, r3, #20
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559c:	4313      	orrs	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40015000 	.word	0x40015000

080055c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr

080055ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bc80      	pop	{r7}
 80055fc:	4770      	bx	lr

080055fe <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	2204      	movs	r2, #4
 800565a:	fa02 f303 	lsl.w	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	43db      	mvns	r3, r3
 8005668:	401a      	ands	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1a      	ldr	r2, [r3, #32]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	bc80      	pop	{r7}
 800568c:	4770      	bx	lr

0800568e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e042      	b.n	8005726 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc f88c 	bl	80017d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	@ 0x24
 80056bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fbb3 	bl	8005e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f8b4 	bl	800584c <UART_SetConfig>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e01b      	b.n	8005726 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800570c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fc31 	bl	8005f86 <UART_CheckIdleState>
 8005724:	4603      	mov	r3, r0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b08a      	sub	sp, #40	@ 0x28
 8005732:	af02      	add	r7, sp, #8
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	2b20      	cmp	r3, #32
 8005746:	d17b      	bne.n	8005840 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_UART_Transmit+0x26>
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e074      	b.n	8005842 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2221      	movs	r2, #33	@ 0x21
 8005764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005768:	f7fc f9c4 	bl	8001af4 <HAL_GetTick>
 800576c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	88fa      	ldrh	r2, [r7, #6]
 8005772:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	88fa      	ldrh	r2, [r7, #6]
 800577a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005786:	d108      	bne.n	800579a <HAL_UART_Transmit+0x6c>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e003      	b.n	80057a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057a2:	e030      	b.n	8005806 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2200      	movs	r2, #0
 80057ac:	2180      	movs	r1, #128	@ 0x80
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fc93 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e03d      	b.n	8005842 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	3302      	adds	r3, #2
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e007      	b.n	80057f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	3301      	adds	r3, #1
 80057f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1c8      	bne.n	80057a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	2140      	movs	r1, #64	@ 0x40
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fc5c 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800583c:	2300      	movs	r3, #0
 800583e:	e000      	b.n	8005842 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005840:	2302      	movs	r3, #2
  }
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800584c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005850:	b08c      	sub	sp, #48	@ 0x30
 8005852:	af00      	add	r7, sp, #0
 8005854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	431a      	orrs	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	4313      	orrs	r3, r2
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4baa      	ldr	r3, [pc, #680]	@ (8005b24 <UART_SetConfig+0x2d8>)
 800587c:	4013      	ands	r3, r2
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005884:	430b      	orrs	r3, r1
 8005886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a9f      	ldr	r2, [pc, #636]	@ (8005b28 <UART_SetConfig+0x2dc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d004      	beq.n	80058b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b4:	4313      	orrs	r3, r2
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80058c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058cc:	430b      	orrs	r3, r1
 80058ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d6:	f023 010f 	bic.w	r1, r3, #15
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a90      	ldr	r2, [pc, #576]	@ (8005b2c <UART_SetConfig+0x2e0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d125      	bne.n	800593c <UART_SetConfig+0xf0>
 80058f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005b30 <UART_SetConfig+0x2e4>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d81a      	bhi.n	8005934 <UART_SetConfig+0xe8>
 80058fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <UART_SetConfig+0xb8>)
 8005900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005904:	08005915 	.word	0x08005915
 8005908:	08005925 	.word	0x08005925
 800590c:	0800591d 	.word	0x0800591d
 8005910:	0800592d 	.word	0x0800592d
 8005914:	2301      	movs	r3, #1
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591a:	e116      	b.n	8005b4a <UART_SetConfig+0x2fe>
 800591c:	2302      	movs	r3, #2
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005922:	e112      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005924:	2304      	movs	r3, #4
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592a:	e10e      	b.n	8005b4a <UART_SetConfig+0x2fe>
 800592c:	2308      	movs	r3, #8
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005932:	e10a      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005934:	2310      	movs	r3, #16
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800593a:	e106      	b.n	8005b4a <UART_SetConfig+0x2fe>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a7c      	ldr	r2, [pc, #496]	@ (8005b34 <UART_SetConfig+0x2e8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d138      	bne.n	80059b8 <UART_SetConfig+0x16c>
 8005946:	4b7a      	ldr	r3, [pc, #488]	@ (8005b30 <UART_SetConfig+0x2e4>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594c:	f003 030c 	and.w	r3, r3, #12
 8005950:	2b0c      	cmp	r3, #12
 8005952:	d82d      	bhi.n	80059b0 <UART_SetConfig+0x164>
 8005954:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <UART_SetConfig+0x110>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	08005991 	.word	0x08005991
 8005960:	080059b1 	.word	0x080059b1
 8005964:	080059b1 	.word	0x080059b1
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	080059b1 	.word	0x080059b1
 800597c:	08005999 	.word	0x08005999
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059b1 	.word	0x080059b1
 800598c:	080059a9 	.word	0x080059a9
 8005990:	2300      	movs	r3, #0
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005996:	e0d8      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005998:	2302      	movs	r3, #2
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800599e:	e0d4      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059a0:	2304      	movs	r3, #4
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059a6:	e0d0      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059a8:	2308      	movs	r3, #8
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e0cc      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059b0:	2310      	movs	r3, #16
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b6:	e0c8      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a5e      	ldr	r2, [pc, #376]	@ (8005b38 <UART_SetConfig+0x2ec>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d125      	bne.n	8005a0e <UART_SetConfig+0x1c2>
 80059c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b30 <UART_SetConfig+0x2e4>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059cc:	2b30      	cmp	r3, #48	@ 0x30
 80059ce:	d016      	beq.n	80059fe <UART_SetConfig+0x1b2>
 80059d0:	2b30      	cmp	r3, #48	@ 0x30
 80059d2:	d818      	bhi.n	8005a06 <UART_SetConfig+0x1ba>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d00a      	beq.n	80059ee <UART_SetConfig+0x1a2>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d814      	bhi.n	8005a06 <UART_SetConfig+0x1ba>
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <UART_SetConfig+0x19a>
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d008      	beq.n	80059f6 <UART_SetConfig+0x1aa>
 80059e4:	e00f      	b.n	8005a06 <UART_SetConfig+0x1ba>
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ec:	e0ad      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059ee:	2302      	movs	r3, #2
 80059f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f4:	e0a9      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059f6:	2304      	movs	r3, #4
 80059f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fc:	e0a5      	b.n	8005b4a <UART_SetConfig+0x2fe>
 80059fe:	2308      	movs	r3, #8
 8005a00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a04:	e0a1      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a06:	2310      	movs	r3, #16
 8005a08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0c:	e09d      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4a      	ldr	r2, [pc, #296]	@ (8005b3c <UART_SetConfig+0x2f0>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d125      	bne.n	8005a64 <UART_SetConfig+0x218>
 8005a18:	4b45      	ldr	r3, [pc, #276]	@ (8005b30 <UART_SetConfig+0x2e4>)
 8005a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a24:	d016      	beq.n	8005a54 <UART_SetConfig+0x208>
 8005a26:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a28:	d818      	bhi.n	8005a5c <UART_SetConfig+0x210>
 8005a2a:	2b80      	cmp	r3, #128	@ 0x80
 8005a2c:	d00a      	beq.n	8005a44 <UART_SetConfig+0x1f8>
 8005a2e:	2b80      	cmp	r3, #128	@ 0x80
 8005a30:	d814      	bhi.n	8005a5c <UART_SetConfig+0x210>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <UART_SetConfig+0x1f0>
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d008      	beq.n	8005a4c <UART_SetConfig+0x200>
 8005a3a:	e00f      	b.n	8005a5c <UART_SetConfig+0x210>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a42:	e082      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a44:	2302      	movs	r3, #2
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4a:	e07e      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a4c:	2304      	movs	r3, #4
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a52:	e07a      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a54:	2308      	movs	r3, #8
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5a:	e076      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a62:	e072      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a35      	ldr	r2, [pc, #212]	@ (8005b40 <UART_SetConfig+0x2f4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d12a      	bne.n	8005ac4 <UART_SetConfig+0x278>
 8005a6e:	4b30      	ldr	r3, [pc, #192]	@ (8005b30 <UART_SetConfig+0x2e4>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a7c:	d01a      	beq.n	8005ab4 <UART_SetConfig+0x268>
 8005a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a82:	d81b      	bhi.n	8005abc <UART_SetConfig+0x270>
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a88:	d00c      	beq.n	8005aa4 <UART_SetConfig+0x258>
 8005a8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a8e:	d815      	bhi.n	8005abc <UART_SetConfig+0x270>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <UART_SetConfig+0x250>
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a98:	d008      	beq.n	8005aac <UART_SetConfig+0x260>
 8005a9a:	e00f      	b.n	8005abc <UART_SetConfig+0x270>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa2:	e052      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aaa:	e04e      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005aac:	2304      	movs	r3, #4
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab2:	e04a      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aba:	e046      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005abc:	2310      	movs	r3, #16
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ac2:	e042      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <UART_SetConfig+0x2dc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d13a      	bne.n	8005b44 <UART_SetConfig+0x2f8>
 8005ace:	4b18      	ldr	r3, [pc, #96]	@ (8005b30 <UART_SetConfig+0x2e4>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005adc:	d01a      	beq.n	8005b14 <UART_SetConfig+0x2c8>
 8005ade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ae2:	d81b      	bhi.n	8005b1c <UART_SetConfig+0x2d0>
 8005ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae8:	d00c      	beq.n	8005b04 <UART_SetConfig+0x2b8>
 8005aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aee:	d815      	bhi.n	8005b1c <UART_SetConfig+0x2d0>
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d003      	beq.n	8005afc <UART_SetConfig+0x2b0>
 8005af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005af8:	d008      	beq.n	8005b0c <UART_SetConfig+0x2c0>
 8005afa:	e00f      	b.n	8005b1c <UART_SetConfig+0x2d0>
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b02:	e022      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005b04:	2302      	movs	r3, #2
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0a:	e01e      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b12:	e01a      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e016      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b22:	e012      	b.n	8005b4a <UART_SetConfig+0x2fe>
 8005b24:	cfff69f3 	.word	0xcfff69f3
 8005b28:	40008000 	.word	0x40008000
 8005b2c:	40013800 	.word	0x40013800
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40004400 	.word	0x40004400
 8005b38:	40004800 	.word	0x40004800
 8005b3c:	40004c00 	.word	0x40004c00
 8005b40:	40005000 	.word	0x40005000
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4aae      	ldr	r2, [pc, #696]	@ (8005e08 <UART_SetConfig+0x5bc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	f040 8097 	bne.w	8005c84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d823      	bhi.n	8005ba6 <UART_SetConfig+0x35a>
 8005b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b64 <UART_SetConfig+0x318>)
 8005b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005ba7 	.word	0x08005ba7
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005ba7 	.word	0x08005ba7
 8005b74:	08005b97 	.word	0x08005b97
 8005b78:	08005ba7 	.word	0x08005ba7
 8005b7c:	08005ba7 	.word	0x08005ba7
 8005b80:	08005ba7 	.word	0x08005ba7
 8005b84:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fd febc 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b8e:	e010      	b.n	8005bb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b9e      	ldr	r3, [pc, #632]	@ (8005e0c <UART_SetConfig+0x5c0>)
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b94:	e00d      	b.n	8005bb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fd fe4b 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8005b9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8130 	beq.w	8005e1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	4a94      	ldr	r2, [pc, #592]	@ (8005e10 <UART_SetConfig+0x5c4>)
 8005bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	4413      	add	r3, r2
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d305      	bcc.n	8005bea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d903      	bls.n	8005bf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005bf0:	e113      	b.n	8005e1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	60fa      	str	r2, [r7, #12]
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfe:	4a84      	ldr	r2, [pc, #528]	@ (8005e10 <UART_SetConfig+0x5c4>)
 8005c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2200      	movs	r2, #0
 8005c08:	603b      	str	r3, [r7, #0]
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c14:	f7fa fb00 	bl	8000218 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	020b      	lsls	r3, r1, #8
 8005c2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c2e:	0202      	lsls	r2, r0, #8
 8005c30:	6979      	ldr	r1, [r7, #20]
 8005c32:	6849      	ldr	r1, [r1, #4]
 8005c34:	0849      	lsrs	r1, r1, #1
 8005c36:	2000      	movs	r0, #0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	eb12 0804 	adds.w	r8, r2, r4
 8005c40:	eb43 0905 	adc.w	r9, r3, r5
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	469a      	mov	sl, r3
 8005c4c:	4693      	mov	fp, r2
 8005c4e:	4652      	mov	r2, sl
 8005c50:	465b      	mov	r3, fp
 8005c52:	4640      	mov	r0, r8
 8005c54:	4649      	mov	r1, r9
 8005c56:	f7fa fadf 	bl	8000218 <__aeabi_uldivmod>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4613      	mov	r3, r2
 8005c60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c68:	d308      	bcc.n	8005c7c <UART_SetConfig+0x430>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c70:	d204      	bcs.n	8005c7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	60da      	str	r2, [r3, #12]
 8005c7a:	e0ce      	b.n	8005e1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c82:	e0ca      	b.n	8005e1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c8c:	d166      	bne.n	8005d5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d827      	bhi.n	8005ce6 <UART_SetConfig+0x49a>
 8005c96:	a201      	add	r2, pc, #4	@ (adr r2, 8005c9c <UART_SetConfig+0x450>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005cc9 	.word	0x08005cc9
 8005ca4:	08005cd1 	.word	0x08005cd1
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd7 	.word	0x08005cd7
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005ce7 	.word	0x08005ce7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc0:	f7fd fe20 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cc6:	e014      	b.n	8005cf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fd fe32 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8005ccc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cce:	e010      	b.n	8005cf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8005e0c <UART_SetConfig+0x5c0>)
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005cd4:	e00d      	b.n	8005cf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fd fdab 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8005cda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005cdc:	e009      	b.n	8005cf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ce4:	e005      	b.n	8005cf2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8090 	beq.w	8005e1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	4a44      	ldr	r2, [pc, #272]	@ (8005e10 <UART_SetConfig+0x5c4>)
 8005d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d04:	461a      	mov	r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d0c:	005a      	lsls	r2, r3, #1
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	441a      	add	r2, r3
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	2b0f      	cmp	r3, #15
 8005d24:	d916      	bls.n	8005d54 <UART_SetConfig+0x508>
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2c:	d212      	bcs.n	8005d54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f023 030f 	bic.w	r3, r3, #15
 8005d36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	085b      	lsrs	r3, r3, #1
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	8bfb      	ldrh	r3, [r7, #30]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	8bfa      	ldrh	r2, [r7, #30]
 8005d50:	60da      	str	r2, [r3, #12]
 8005d52:	e062      	b.n	8005e1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d5a:	e05e      	b.n	8005e1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d828      	bhi.n	8005db6 <UART_SetConfig+0x56a>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0x520>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005d99 	.word	0x08005d99
 8005d74:	08005da1 	.word	0x08005da1
 8005d78:	08005db7 	.word	0x08005db7
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	08005db7 	.word	0x08005db7
 8005d84:	08005db7 	.word	0x08005db7
 8005d88:	08005db7 	.word	0x08005db7
 8005d8c:	08005daf 	.word	0x08005daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fd fdb8 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005d94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d96:	e014      	b.n	8005dc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d98:	f7fd fdca 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8005d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d9e:	e010      	b.n	8005dc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <UART_SetConfig+0x5c0>)
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005da4:	e00d      	b.n	8005dc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da6:	f7fd fd43 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 8005daa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dac:	e009      	b.n	8005dc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005db4:	e005      	b.n	8005dc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d028      	beq.n	8005e1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dcc:	4a10      	ldr	r2, [pc, #64]	@ (8005e10 <UART_SetConfig+0x5c4>)
 8005dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	085b      	lsrs	r3, r3, #1
 8005de0:	441a      	add	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	2b0f      	cmp	r3, #15
 8005df0:	d910      	bls.n	8005e14 <UART_SetConfig+0x5c8>
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df8:	d20c      	bcs.n	8005e14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60da      	str	r2, [r3, #12]
 8005e04:	e009      	b.n	8005e1a <UART_SetConfig+0x5ce>
 8005e06:	bf00      	nop
 8005e08:	40008000 	.word	0x40008000
 8005e0c:	00f42400 	.word	0x00f42400
 8005e10:	08078c84 	.word	0x08078c84
      }
      else
      {
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3730      	adds	r7, #48	@ 0x30
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01a      	beq.n	8005f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f42:	d10a      	bne.n	8005f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b098      	sub	sp, #96	@ 0x60
 8005f8a:	af02      	add	r7, sp, #8
 8005f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f96:	f7fb fdad 	bl	8001af4 <HAL_GetTick>
 8005f9a:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d12f      	bne.n	800600a <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005faa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f88e 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d022      	beq.n	800600a <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe4:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e6      	bne.n	8005fc4 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e063      	b.n	80060d2 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b04      	cmp	r3, #4
 8006016:	d149      	bne.n	80060ac <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006020:	2200      	movs	r2, #0
 8006022:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f857 	bl	80060da <UART_WaitOnFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d03c      	beq.n	80060ac <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	623b      	str	r3, [r7, #32]
   return(result);
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006050:	633b      	str	r3, [r7, #48]	@ 0x30
 8006052:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	60fb      	str	r3, [r7, #12]
   return(result);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006084:	61fa      	str	r2, [r7, #28]
 8006086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	69b9      	ldr	r1, [r7, #24]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	617b      	str	r3, [r7, #20]
   return(result);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e012      	b.n	80060d2 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3758      	adds	r7, #88	@ 0x58
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	60f8      	str	r0, [r7, #12]
 80060e2:	60b9      	str	r1, [r7, #8]
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	4613      	mov	r3, r2
 80060e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ea:	e04f      	b.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d04b      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f4:	f7fb fcfe 	bl	8001af4 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	429a      	cmp	r2, r3
 8006102:	d302      	bcc.n	800610a <UART_WaitOnFlagUntilTimeout+0x30>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e04e      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d037      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b80      	cmp	r3, #128	@ 0x80
 8006120:	d034      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d031      	beq.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b08      	cmp	r3, #8
 8006134:	d110      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2208      	movs	r2, #8
 800613c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f838 	bl	80061b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2208      	movs	r2, #8
 8006148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e029      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006166:	d111      	bne.n	800618c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006170:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f81e 	bl	80061b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e00f      	b.n	80061ac <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d0a0      	beq.n	80060ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b095      	sub	sp, #84	@ 0x54
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061da:	643b      	str	r3, [r7, #64]	@ 0x40
 80061dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061e2:	e841 2300 	strex	r3, r2, [r1]
 80061e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1e6      	bne.n	80061bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006214:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1e3      	bne.n	80061ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d118      	bne.n	8006260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	60bb      	str	r3, [r7, #8]
   return(result);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f023 0310 	bic.w	r3, r3, #16
 8006242:	647b      	str	r3, [r7, #68]	@ 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	461a      	mov	r2, r3
 800624a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	613b      	str	r3, [r7, #16]
   return(result);
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e6      	bne.n	800622e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006274:	bf00      	nop
 8006276:	3754      	adds	r7, #84	@ 0x54
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_UARTEx_DisableFifoMode+0x16>
 8006290:	2302      	movs	r3, #2
 8006292:	e027      	b.n	80062e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2224      	movs	r2, #36	@ 0x24
 80062a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006302:	2302      	movs	r3, #2
 8006304:	e02d      	b.n	8006362 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2224      	movs	r2, #36	@ 0x24
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f850 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b084      	sub	sp, #16
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800637e:	2302      	movs	r3, #2
 8006380:	e02d      	b.n	80063de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	@ 0x24
 800638e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f812 	bl	80063e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d108      	bne.n	800640a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006408:	e031      	b.n	800646e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800640a:	2308      	movs	r3, #8
 800640c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800640e:	2308      	movs	r3, #8
 8006410:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	0e5b      	lsrs	r3, r3, #25
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	0f5b      	lsrs	r3, r3, #29
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 0307 	and.w	r3, r3, #7
 8006430:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	7b3a      	ldrb	r2, [r7, #12]
 8006436:	4910      	ldr	r1, [pc, #64]	@ (8006478 <UARTEx_SetNbDataToProcess+0x90>)
 8006438:	5c8a      	ldrb	r2, [r1, r2]
 800643a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800643e:	7b3a      	ldrb	r2, [r7, #12]
 8006440:	490e      	ldr	r1, [pc, #56]	@ (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006442:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006444:	fb93 f3f2 	sdiv	r3, r3, r2
 8006448:	b29a      	uxth	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	7b7a      	ldrb	r2, [r7, #13]
 8006454:	4908      	ldr	r1, [pc, #32]	@ (8006478 <UARTEx_SetNbDataToProcess+0x90>)
 8006456:	5c8a      	ldrb	r2, [r1, r2]
 8006458:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800645c:	7b7a      	ldrb	r2, [r7, #13]
 800645e:	4907      	ldr	r1, [pc, #28]	@ (800647c <UARTEx_SetNbDataToProcess+0x94>)
 8006460:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006462:	fb93 f3f2 	sdiv	r3, r3, r2
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800646e:	bf00      	nop
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	08078c9c 	.word	0x08078c9c
 800647c:	08078ca4 	.word	0x08078ca4

08006480 <memset>:
 8006480:	4402      	add	r2, r0
 8006482:	4603      	mov	r3, r0
 8006484:	4293      	cmp	r3, r2
 8006486:	d100      	bne.n	800648a <memset+0xa>
 8006488:	4770      	bx	lr
 800648a:	f803 1b01 	strb.w	r1, [r3], #1
 800648e:	e7f9      	b.n	8006484 <memset+0x4>

08006490 <__libc_init_array>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	4d0d      	ldr	r5, [pc, #52]	@ (80064c8 <__libc_init_array+0x38>)
 8006494:	4c0d      	ldr	r4, [pc, #52]	@ (80064cc <__libc_init_array+0x3c>)
 8006496:	1b64      	subs	r4, r4, r5
 8006498:	10a4      	asrs	r4, r4, #2
 800649a:	2600      	movs	r6, #0
 800649c:	42a6      	cmp	r6, r4
 800649e:	d109      	bne.n	80064b4 <__libc_init_array+0x24>
 80064a0:	4d0b      	ldr	r5, [pc, #44]	@ (80064d0 <__libc_init_array+0x40>)
 80064a2:	4c0c      	ldr	r4, [pc, #48]	@ (80064d4 <__libc_init_array+0x44>)
 80064a4:	f000 f818 	bl	80064d8 <_init>
 80064a8:	1b64      	subs	r4, r4, r5
 80064aa:	10a4      	asrs	r4, r4, #2
 80064ac:	2600      	movs	r6, #0
 80064ae:	42a6      	cmp	r6, r4
 80064b0:	d105      	bne.n	80064be <__libc_init_array+0x2e>
 80064b2:	bd70      	pop	{r4, r5, r6, pc}
 80064b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b8:	4798      	blx	r3
 80064ba:	3601      	adds	r6, #1
 80064bc:	e7ee      	b.n	800649c <__libc_init_array+0xc>
 80064be:	f855 3b04 	ldr.w	r3, [r5], #4
 80064c2:	4798      	blx	r3
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7f2      	b.n	80064ae <__libc_init_array+0x1e>
 80064c8:	08078cb4 	.word	0x08078cb4
 80064cc:	08078cb4 	.word	0x08078cb4
 80064d0:	08078cb4 	.word	0x08078cb4
 80064d4:	08078cb8 	.word	0x08078cb8

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
